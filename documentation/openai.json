{
	"info": {
		"_postman_id": "90abb798-cb85-43cb-ba3a-ae7941e968da",
		"name": "OpenAI API",
		"description": "<img src=\"https://content.pstmn.io/8cd5c341-3e7a-4a7e-b83d-23f7cf048a34/b3BlbmFpLmpwZw==\">\n\nWelcome to the OpenAI Postman Collection! This collection provides a comprehensive set of examples to help you get started with the OpenAI API. Easily walkthrough multiple usecases, API Capabilities, and OpenAI's assistant APIs.\n\nThe OpenAI API provides a simple interface for developers to create an intelligence layer in their applications powered by OpenAI's state-of-the-art models. The [Chat Completions ](https://www.postman.com/devrel/openai/request/xqcsuot/chat-completions?action=share&source=copy-link&creator=21505573&ctx=documentation) endpoint powers ChatGPT and provides a straightforward way to generate text responses.\n\n> **Note**: This collection is part of a workspace curated by the Postman team to help you explore and work with useful APIs. Learn how to contribute to this collaborative space and its collections [here](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/version-control-overview/#creating-pull-requests). \n  \n\n---\n\n# Getting Started\n\n#### Step 1: Fork the Collection\n\nFork the Collection manually or by clicking the Run in Postman button  \n[<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\">](https://god.gw.postman.com/run-collection/13183464-90abb798-cb85-43cb-ba3a-ae7941e968da?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D13183464-90abb798-cb85-43cb-ba3a-ae7941e968da%26entityType%3Dcollection%26workspaceId%3D6f729c41-9538-4a0f-a4e0-8a02d92d1e73)\n\n#### **Step 2: Setup your account**\n\nCreate an [OpenAI account](https://platform.openai.com/signup) or [sign in](https://platform.openai.com/login) to an existing one.\n\n#### Step 3: Fetch your API key\n\nNext, navigate to the [API keys page](https://platform.openai.com/account/api-keys) and click on the \"Create new secret key\" button.\n\nGive your key a name, select a project, and configure all relevant permissions for this API key.\n\n<img src=\"https://content.pstmn.io/39a27206-d751-40b3-b9bd-2f7287aea9b6/U2NyZWVuc2hvdCAyMDI0LTA4LTAyIGF0IDcuNDcuMDLigK9QTS5wbmc=\">\n\nCreate the secret key.\n\n<img src=\"https://content.pstmn.io/ea46e770-5e33-45fd-ad85-e7b26eb387e4/U2NyZWVuc2hvdCAyMDI0LTA4LTAyIGF0IDcuNTIuMDLigK9QTS5wbmc=\">\n\nOnce the Secret Key is created, copy it to your clipboard by clicking the copy button and select \"Done\" to close the open prompt.\n\n#### Step 4: Configure the API Key in Postman\n\nPostman provides you with a [Vault](https://learning.postman.com/docs/sending-requests/postman-vault/postman-vault-secrets/) that let's you store sensitive data locally. Data stored in this vault is not synced with Postman Cloud and can only be accessed in your local Postman Instance.\n\nUsing the table below as a guide, add your keys to your vault. A reference to a secret `{{vault:openai-secret-key}}}` has been added to the [collection authorization tab](https://www.postman.com/devrel/openai/collection/k25n3c8/chatgpt-api?tab=authorization) as a Bearer token to be automatically used with all requests in this workspace. If you do not use the same variable name in your vault, please update the authorization tab accordingly.\n\n| **Key** | Value | Allowed Domains |\n| --- | --- | --- |\n| `openai-secret-key` | your_key_value | [https://api.openai.com](https://api.openai.com) |\n\n---\n\n## **There are three folders in this collection.**\n\n1. **OpenAI API - Use Cases**: Documents several interesting use cases of the OpenAI API.\n    \n2. **OpenAI API capabilities**: Documents the OpenAI API and includes most of the requests and interfaces that the API exposes. It makes use of the scripts tab to build basic workflows where necessary and test for assertions against the API response.\n    \n3. **OpenAI Assistants API**: Documents the new Assistants API (in Beta) which is designed to help developers build powerful AI assistants capable of performing a variety of tasks\n    \n\n# **OpenAI API Use Cases**\n\n- [Text Generation](https://www.postman.com/devrel/openai/request/xqcsuot/chat-completions?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- [Function Calling](https://www.postman.com/devrel/openai/request/x65tdyb/chat-completions-with-function-calling?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- Build a simple FAQ system\n    \n    - [Create Embeddings of FAQ Answers](https://www.postman.com/devrel/openai/request/tni6s2k/create-embeddings-of-faq-answers?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create Embedding of User Input](https://www.postman.com/devrel/openai/request/mmo8o9u/create-embedding-of-user-input?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n\n# OpenAI API Capabilities\n\n- [Chat Completions](https://www.postman.com/devrel/openai/request/z1m5sfw/chat-completions?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n    - [Chat Completions Reasoning](https://www.postman.com/devrel/openai/request/9ukc9z1/chat-completions-reasoning?action=share&source=copy-link&creator=40440015&ctx=documentation)\n        \n- [Structured Output - Chat Completions](https://www.postman.com/devrel/openai/request/ug5r387/chat-completions-text-generation?action=share&source=copy-link&creator=40440015&ctx=documentation)\n    \n- [Predicted Output - Chat Completions](https://www.postman.com/devrel/openai/request/cvvwqox/chat-completions-text-generation?action=share&source=copy-link&creator=40440015&ctx=documentation)\n    \n- [Embeddings](https://www.postman.com/devrel/openai/request/o51r0bp/embeddings?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- Fine Tuning\n    \n    - [Upload Training File](https://www.postman.com/devrel/openai/request/aat4yv1/upload-training-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create a Fine Tuning Job](https://www.postman.com/devrel/openai/request/lyz6y8a/create-fine-tuning-job?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Enable Weights and Biases Integrations](https://www.postman.com/devrel/openai/request/ndutt0y/enable-weights-and-biases-integration?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Fine Tuning Jobs](https://www.postman.com/devrel/openai/request/l2zxkvt/list-fine-tuning-jobs?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Fine Tuning Events](https://www.postman.com/devrel/openai/request/fp95wua/list-fine-tuning-events?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Fine Tuning Checkpoints](https://www.postman.com/devrel/openai/request/33whmks/list-fine-tuning-checkpoints?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Fine Tuning Jobs](https://www.postman.com/devrel/openai/request/kbdjtu8/retrieve-fine-tuning-jobs?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Cancel Fine Tuning Jobs](https://www.postman.com/devrel/openai/request/q0quai9/cancel-fine-tuning-jobs?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Batch API Requests\n    \n    - [Get Batches](https://www.postman.com/devrel/openai/request/usyj5nr/get-batches?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Batch](https://www.postman.com/devrel/openai/request/0toz44d/retrieve-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Cancel Batch](https://www.postman.com/devrel/openai/request/c9zmbrq/cancel-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Batch](https://www.postman.com/devrel/openai/request/ayowh6p/list-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create Image Variation](https://www.postman.com/devrel/openai/request/6ffvuh8/create-image-variation?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Files\n    \n    - [Upload Files](https://www.postman.com/devrel/openai/request/rixfdg5/upload-files?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Files](https://www.postman.com/devrel/openai/request/xgnko2p/list-files?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve File](https://www.postman.com/devrel/openai/request/1e1ogge/retrieve-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Delete File](https://www.postman.com/devrel/openai/request/e4ogrmh/delete-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve File Contents](https://www.postman.com/devrel/openai/request/seq7fpr/retrieve-file-contents?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Image Generation\n    \n    - [Generate Image](https://www.postman.com/devrel/openai/request/riub8s3/generate-image?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create Image Edit](https://www.postman.com/devrel/openai/request/8c7f7d8/create-image-edit?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Models\n    \n    - [List Models](https://www.postman.com/devrel/openai/request/1p8b6v6/list-models?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Models](https://www.postman.com/devrel/openai/request/ns0dwtr/retrieve-models?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Delete Fine Tuned Model](https://www.postman.com/devrel/openai/request/0ketmr9/delete-fine-tuned-model?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- [Moderations](https://www.postman.com/devrel/openai/request/6quoxk9/moderations?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n\n# OpenAI Assistants API\n\n- [Create Assistant](https://www.postman.com/devrel/openai/request/clib2ud/create-assistant?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- [List Assistant](https://www.postman.com/devrel/openai/request/vvly6fi/list-assistants?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- [Retrieve Assistants](https://www.postman.com/devrel/openai/request/ijtxfc3/retrieve-assistants?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- [Modify Assistants](https://www.postman.com/devrel/openai/request/13183464-f11b5312-5201-4af0-9733-cf30662b2c28?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- [Delete Assistants](https://www.postman.com/devrel/openai/request/13183464-21b031b2-6a14-4ea8-9cec-72571edeeaef?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- Threads\n    \n    - [Create Thread](https://www.postman.com/devrel/openai/request/7i3zquh/create-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Thread](https://www.postman.com/devrel/openai/request/13183464-1afecebb-dcd8-422d-9134-3dfda0a37696?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Modify Thread](https://www.postman.com/devrel/openai/request/13183464-d2a14163-8517-4da7-acc9-c1c5ed8dd480?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Delete Thread](https://www.postman.com/devrel/openai/request/13183464-9f769a5b-58d0-4a52-b7c9-d1772d2989ab?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - Messages\n        \n        - [Create Message in a Thread](https://www.postman.com/devrel/openai/request/yr8dk7b/create-message-in-a-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [List Messages in a Thread](https://www.postman.com/devrel/openai/request/v5529lf/list-messages-in-a-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Get Message in Thread](https://www.postman.com/devrel/openai/request/7cql7ma/get-message-in-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Modify Message in Thread](https://www.postman.com/devrel/openai/request/45p5h7p/modify-message-in-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Delete Message in Thread](https://www.postman.com/devrel/openai/request/13183464-896019ed-3e96-4410-9c20-316519ed771c?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n    - Runs\n        \n        - [Create Thread and Run](https://www.postman.com/devrel/openai/request/ox2r344/create-thread-and-run?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Create Run](https://www.postman.com/devrel/openai/request/kivksuw/create-run?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [List Run](https://www.postman.com/devrel/openai/request/13183464-896b5cc4-095f-4cfd-8991-cb0bf376dd68?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Get Run](https://www.postman.com/devrel/openai/request/13183464-aca95589-be99-433e-8ade-8da750cd5880?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Modify Run](https://www.postman.com/devrel/openai/request/13183464-42914896-b918-4292-8f42-f1dbbabce670?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Submit Tool Outputs](https://www.postman.com/devrel/openai/request/13183464-2acc62e5-f7a3-46aa-b280-c0a437deaddd?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Cancel Run](https://www.postman.com/devrel/openai/request/13183464-41bf75a5-8858-4065-b352-e9b01e5ed614?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [List Run Steps](https://www.postman.com/devrel/openai/request/13183464-b6f2c46f-6452-4537-9abb-3399f018129a?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Get Run Steps](https://www.postman.com/devrel/openai/request/13183464-b4b82005-2019-4654-b366-4a91e2403c5b?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Create Thread](https://www.postman.com/devrel/openai/request/7i3zquh/create-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Retrieve Thread](https://www.postman.com/devrel/openai/request/3hxjbdy/retrieve-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Modify Thread](https://www.postman.com/devrel/openai/request/l58xz2x/modify-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Delete Thread](https://www.postman.com/devrel/openai/request/6bce2v2/delete-thread?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n- Vector Store\n    \n    - [Create Vector Store](https://www.postman.com/devrel/openai/request/4f23w75/create-vector-store?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Vector Stores](https://www.postman.com/devrel/openai/request/13183464-7b8692b4-3cba-4cd5-8c95-16f522ce1fc7?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Vector Store](https://www.postman.com/devrel/openai/request/13183464-741392e9-4db0-4eaf-a895-c032fdf25e4c?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Modify Vector Store](https://www.postman.com/devrel/openai/request/13183464-b65844bb-07fc-489b-b8c4-10d2a1be4b49?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Delete Vector Store](https://www.postman.com/devrel/openai/request/13183464-e5e58ddb-127b-491b-9dd9-8cd4d942368a?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - Vectore Store Files\n        \n        - [Create Vectore Store File](https://www.postman.com/devrel/openai/request/cfi9sn5/create-vector-store-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [List Vector Store File](https://www.postman.com/devrel/openai/request/mu44w08/list-vector-store-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Get Vector Store File](https://www.postman.com/devrel/openai/request/gz7wx0x/get-vector-store-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - [Delete Vector Store File](https://www.postman.com/devrel/openai/request/13183464-c2986e32-db57-4cc6-8c1c-cc5f08a35586?action=share&source=copy-link&creator=5078742&ctx=documentation)\n            \n        - Batches\n            \n            - [Vector Store File Batch](https://www.postman.com/devrel/openai/request/o8eu86g/vector-store-file-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n                \n            - [Get Vector Store File Batch](https://www.postman.com/devrel/openai/request/13183464-94431874-72e3-4516-8447-28570283b47b?action=share&source=copy-link&creator=5078742&ctx=documentation)\n                \n            - [Cancel Vectore Store File Batch](https://www.postman.com/devrel/openai/request/13183464-c31b8300-f4f1-45a9-bb93-2b87401989d0?action=share&source=copy-link&creator=5078742&ctx=documentation)\n                \n            - [List Vector Stores in a Files Batch](https://www.postman.com/devrel/openai/request/13183464-a6ed0a7d-3334-41cb-a968-431b1baf0762?action=share&source=copy-link&creator=5078742&ctx=documentation)\n                \n\n---\n\n---\n\n## Getting Help\n\nWe want you to get the best support you can when working with this workspace. If you're stuck and you need help regarding OpenAI specific issues, we recommend that you explore the following channels.\n\n- [OpenAI Help Center](https://help.openai.com/en/)\n    \n- [OpenAI Developer Forum](https://community.openai.com/)\n    \n\nFor Postman specific questions or feedback about this workspace:\n\n- [Postman's Community Forum](https://community.postman.com/t/ai-provider-workspaces-and-collections/74143) - Provide feedback and ask questions about this workspace, ask general Postman questions, understand how to use a feature, how to build a workflow, etc.\n    \n\nFor Postman specific issues:\n\n- [Postman Github Issues](https://github.com/postmanlabs/postman-app-support) - Submit feature requests, bug reports, etc here",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8513018",
		"_collection_link": "https://www.postman.com/devrel/workspace/openai/collection/13183464-90abb798-cb85-43cb-ba3a-ae7941e968da?action=share&source=collection_link&creator=8513018"
	},
	"item": [
		{
			"name": "OpenAI API - Use Cases",
			"item": [
				{
					"name": "Text Generation - Chat Completions API",
					"item": [
						{
							"name": "Chat Completions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let messages = [",
											"      {",
											"        \"role\": \"developer\",",
											"        \"content\": \"You are a helpful assistant.\"",
											"      },",
											"      {",
											"        \"role\": \"user\",",
											"        \"content\": \"Who won the world series in 2020?\"",
											"      },",
											"      {",
											"        \"role\": \"assistant\",",
											"        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"",
											"      },",
											"      {",
											"        \"role\": \"user\",",
											"        \"content\": \"Where was it played?\"",
											"      }",
											"    ];",
											"",
											"pm.collectionVariables.set('messages', JSON.stringify(messages));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the choices array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
											"    responseData.choices.forEach(function(choice) {",
											"        pm.expect(choice).to.be.an('object');",
											"        pm.expect(choice.index).to.exist.and.to.be.a('number');",
											"        pm.expect(choice.message).to.exist.and.to.be.an('object');",
											"        pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Created field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.created).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Model field should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.model).to.exist.and.to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"chat",
										"completions"
									]
								}
							},
							"response": [
								{
									"name": "Chat Completions",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": {{messages}} \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 17 Jun 2024 06:23:54 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-organization",
											"value": "user-3wdwkjaeznoulp9fnvi35lbh"
										},
										{
											"key": "openai-processing-ms",
											"value": "587"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15724800; includeSubDomains"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "10000"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "60000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "9999"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "59946"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "8.64s"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "54ms"
										},
										{
											"key": "x-request-id",
											"value": "req_ec576d7c4563894a83067c060d5c04a2"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8950f4169e38f9d4-SJC"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"chatcmpl-9b04PNw9WxrCYkXRWJXcOyH5My4BG\",\n    \"object\": \"chat.completion\",\n    \"created\": 1718605433,\n    \"model\": \"gpt-3.5-turbo-0125\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 53,\n        \"completion_tokens\": 17,\n        \"total_tokens\": 70\n    },\n    \"system_fingerprint\": null\n}"
								}
							]
						}
					],
					"description": "The OpenAI API provides a simple interface for developers to create an intelligence layer in their applications, powered by OpenAI's state-of-the-art models. The Chat Completions endpoint powers ChatGPT and provides a simple way to take text as input and use a model like GPT-4o to generate an output."
				},
				{
					"name": "Function Calling - Chat Completions API",
					"item": [
						{
							"name": "Chat Completions with Function Calling",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.object).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.created).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.model).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.choices).to.exist.and.to.be.an('array');",
											"    responseData.choices.forEach(function(choice) {",
											"        pm.expect(choice).to.be.an('object');",
											"        pm.expect(choice.index).to.exist.and.to.be.a('number');",
											"        pm.expect(choice.message).to.exist.and.to.be.an('object');",
											"        pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
											"        // ... continue with other checks for choice.message properties",
											"        pm.expect(choice.tool_calls).to.exist.and.to.be.an('array');",
											"        // ... continue with checks for tool_calls properties",
											"    });",
											"    pm.expect(responseData.usage).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.usage.prompt_tokens).to.exist.and.to.be.a('number');",
											"    // ... continue with other checks for usage properties",
											"    pm.expect(responseData.system_fingerprint).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Choices array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.choices).to.exist.and.to.be.an('array').with.lengthOf(1);",
											"});",
											"",
											"",
											"pm.test(\"Ensure that 'tool_calls' array within 'choices' contains the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.choices).to.be.an('array');",
											"    ",
											"    responseData.choices.forEach(choice => {",
											"        if (choice.message && choice.message.tool_calls) {",
											"            choice.message.tool_calls.forEach(toolCall => {",
											"                pm.expect(toolCall.id).to.exist;",
											"                pm.expect(toolCall.type).to.exist;",
											"                pm.expect(toolCall.function).to.exist;",
											"            });",
											"        }",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Usage object contains expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.usage).to.be.an('object');",
											"    pm.expect(responseData.usage).to.have.property('prompt_tokens');",
											"    pm.expect(responseData.usage).to.have.property('completion_tokens');",
											"    pm.expect(responseData.usage).to.have.property('total_tokens');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the weather in San Francisco?\"\n        }\n    ],\n    \"tools\": [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_current_weather\",\n                \"description\": \"Get the current weather\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"location\": {\n                            \"type\": \"string\",\n                            \"description\": \"The city and state, e.g. San Francisco, CA\"\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"celsius\",\n                                \"fahrenheit\"\n                            ],\n                            \"description\": \"The temperature unit to use. Infer this from the users location.\"\n                        }\n                    },\n                    \"required\": [\n                        \"location\"\n                    ]\n                }\n            }\n        }\n    ],\n    \"tool_choice\": \"required\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"chat",
										"completions"
									]
								}
							},
							"response": [
								{
									"name": "Chat Completions with Function Calling",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the weather in San Francisco?\"\n        }\n    ],\n    \"tools\": [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_current_weather\",\n                \"description\": \"Get the current weather\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"location\": {\n                            \"type\": \"string\",\n                            \"description\": \"The city and state, e.g. San Francisco, CA\"\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"celsius\",\n                                \"fahrenheit\"\n                            ],\n                            \"description\": \"The temperature unit to use. Infer this from the users location.\"\n                        }\n                    },\n                    \"required\": [\n                        \"location\"\n                    ]\n                }\n            }\n        }\n    ],\n    \"tool_choice\": \"required\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 17 Jun 2024 06:23:12 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-organization",
											"value": "user-3wdwkjaeznoulp9fnvi35lbh"
										},
										{
											"key": "openai-processing-ms",
											"value": "649"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15724800; includeSubDomains"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "10000"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "60000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "9999"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "59973"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "8.64s"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "27ms"
										},
										{
											"key": "x-request-id",
											"value": "req_63ab6c79dd2331c08fcf1768d8f16890"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Set-Cookie",
											"value": "__cf_bm=UJExblUU9v1F38bRsx6_EE0oGRgg.lxlH4RoADFiLkE-1718605392-1.0.1.1-WXc1ciRmKxA_kqZCiLtMFyKXabMrvhFDg6qBTd_psxwq_7Oo7eX7PHvy.o7usd7A9mP2ToT97uwuqDLcpiv.bA; path=/; expires=Mon, 17-Jun-24 06:53:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "Set-Cookie",
											"value": "_cfuvid=U_HJGaUnd7v0etZVuA0lnttcaVf.N8Jsdp947aHE4Pc-1718605392310-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8950f30dfeaef9d4-SJC"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"chatcmpl-9b03jdpTlePrfNUed4Oih8obtOuEC\",\n    \"object\": \"chat.completion\",\n    \"created\": 1718605391,\n    \"model\": \"gpt-3.5-turbo-0125\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": null,\n                \"tool_calls\": [\n                    {\n                        \"id\": \"call_H5zLfaW6i3LWQRqUAxuSJ8qS\",\n                        \"type\": \"function\",\n                        \"function\": {\n                            \"name\": \"get_current_weather\",\n                            \"arguments\": \"{\\\"location\\\":\\\"San Francisco\\\"}\"\n                        }\n                    }\n                ]\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 94,\n        \"completion_tokens\": 14,\n        \"total_tokens\": 108\n    },\n    \"system_fingerprint\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "Build a Simple FAQ System - Embeddings API",
					"item": [
						{
							"name": "Create Embeddings of FAQ Answers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let input = [",
											"    \"You can pay using credit card, PayPal, or bank transfer.\",",
											"    \"You can reset your password by clicking 'Forgot password?' at the login screen.\",",
											"    \"You may return products within 30 days for a full refund.\",",
											"    \"Track your order by logging into your account and visiting the order history page.\"",
											"];",
											"",
											"let userInput = pm.collectionVariables.get('inputString'); ",
											"if(userInput == null || userInput == \"undefined\"){",
											"    userInput = input;",
											"    pm.collectionVariables.set('inputString', userInput);",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"//usually these can be stored in a vector database ",
											"pm.collectionVariables.set(\"storedEmbeddings\", JSON.stringify(responseData.data.map(embed => embed.embedding)));",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Data object and its properties are valid\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"    ",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item.index).to.exist.and.to.be.a('number');",
											"        pm.expect(item.embedding).to.exist.and.to.be.an('array');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Index is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.index).to.be.a('number');",
											"        pm.expect(item.index).to.be.at.least(0);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Embedding array is present and contains at least one element\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array');",
											"  pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"Embedding array should contain at least one element\");",
											"});",
											"",
											"",
											"pm.test(\"Usage object and its properties are present\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.usage).to.exist.and.to.be.an('object');",
											"  pm.expect(responseData.usage.prompt_tokens).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.usage.total_tokens).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"{{inputString}}\",\n    \"model\": \"{{embeddingModel}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"embeddings"
									]
								}
							},
							"response": [
								{
									"name": "Create Embeddings of FAQ Answers",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": \"{{inputString}}\",\n    \"model\": \"text-embedding-3-small\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"embeddings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 17 Jun 2024 06:24:14 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "openai-model",
											"value": "text-embedding-3-small"
										},
										{
											"key": "openai-organization",
											"value": "user-3wdwkjaeznoulp9fnvi35lbh"
										},
										{
											"key": "openai-processing-ms",
											"value": "20"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15724800; includeSubDomains"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "3000"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "1000000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "2999"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "999986"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "20ms"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "0s"
										},
										{
											"key": "x-request-id",
											"value": "req_c39ce5660b7d682108ff2160639bdd76"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8950f49c39c6f9d4-SJC"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"embedding\",\n            \"index\": 0,\n            \"embedding\": [\n                -0.0142941205,\n                0.019290362,\n                -0.052887026,\n                -0.031025432,\n                -0.009468484,\n                -0.035729207,\n                -0.02248308,\n                0.05444683,\n                0.010315408,\n                -0.0033267646,\n                0.025858589,\n                -0.0063306014,\n                0.007634498,\n                -0.043138266,\n                0.016901914,\n                0.011192796,\n                -0.013404546,\n                -0.014623141,\n                -0.07097098,\n                -0.010077782,\n                0.00539533,\n                0.030001812,\n                0.044527464,\n                -0.041944046,\n                -0.06292825,\n                0.046964657,\n                -0.04165158,\n                -0.02434753,\n                0.013550778,\n                -0.036338508,\n                0.0077746366,\n                -0.024566878,\n                0.009998573,\n                -0.0061843703,\n                -0.034096293,\n                -0.00094136473,\n                0.017864604,\n                0.041578464,\n                0.028661357,\n                0.020253051,\n                -0.010656614,\n                0.016792241,\n                0.0063549737,\n                -0.01164977,\n                0.032609604,\n                0.0034425312,\n                -0.028417638,\n                0.041334745,\n                0.020021517,\n                0.027491506,\n                -0.0036375064,\n                0.037776448,\n                -0.024786225,\n                0.030708596,\n                -0.029587489,\n                0.0135995215,\n                0.051327225,\n                0.019936217,\n                0.027247787,\n                -0.027247787,\n                0.06546293,\n                -0.038288258,\n                -0.026589746,\n                0.024213485,\n                -0.004651987,\n                -0.07579662,\n                0.012722133,\n                0.044235002,\n                -0.0047555673,\n                -0.051522203,\n                0.009559879,\n                0.024323158,\n                0.00023781645,\n                -0.049767423,\n                0.009748761,\n                -0.009754854,\n                -0.012319997,\n                -0.029806836,\n                0.020594258,\n                -0.0030068834,\n                -0.055957887,\n                -0.028515127,\n                -0.0093344385,\n                -0.019339105,\n                -0.024627807,\n                -0.029124424,\n                -0.051960897,\n                0.05556794,\n                -0.007159246,\n                0.018632319,\n                -0.007055666,\n                0.061075985,\n                0.036216646,\n                0.023701675,\n                0.010510383,\n                0.008816536,\n                -0.041529723,\n                0.011850838,\n                -0.0228121,\n                0.067607656,\n                0.06897248,\n                0.00008720571,\n                0.009383182,\n                0.0082437955,\n                0.034559358,\n                -0.05459306,\n                -0.014525654,\n                -0.011954418,\n                -0.016231688,\n                -0.032268398,\n                -0.054105625,\n                -0.081645876,\n                -0.009724389,\n                0.011789908,\n                0.016597265,\n                0.026199795,\n                -0.054495573,\n                -0.022056572,\n                -0.010778474,\n                -0.051473457,\n                -0.016024526,\n                -0.006744924,\n                -0.013209571,\n                -0.02230029,\n                -0.009876713,\n                -0.013136456,\n                -0.037971422,\n                0.016182942,\n                -0.06063729,\n                -0.013818868,\n                0.010327593,\n                -0.04828074,\n                0.015147137,\n                -0.013562963,\n                -0.0036375064,\n                0.017694,\n                -0.05712774,\n                -0.03268272,\n                -0.03509554,\n                -0.009584251,\n                0.0073785936,\n                0.020911092,\n                0.03290207,\n                -0.039287508,\n                -0.03743524,\n                -0.033389505,\n                -0.021240113,\n                0.000046054327,\n                -0.0058005126,\n                -0.029928695,\n                -0.042870175,\n                -0.054690547,\n                -0.025687985,\n                -0.011942232,\n                -0.011521817,\n                0.0146109555,\n                0.056542814,\n                0.03558298,\n                -0.0048317295,\n                0.0176087,\n                -0.014818117,\n                0.009773132,\n                -0.04740335,\n                0.00064814027,\n                -0.004962729,\n                0.003616181,\n                -0.019546265,\n                0.005477585,\n                -0.029563118,\n                -0.030586738,\n                0.047988277,\n                0.021020766,\n                -0.033121414,\n                0.0020152517,\n                0.031805333,\n                -0.0056999787,\n                0.03741087,\n                -0.02121574,\n                -0.030903572,\n                -0.022470893,\n                -0.028783217,\n                0.029416885,\n                0.032049052,\n                0.009474577,\n                -0.016572893,\n                -0.019290362,\n                -0.020923277,\n                0.018193625,\n                -0.049767423,\n                0.040311128,\n                0.009779226,\n                0.010412895,\n                -0.03909253,\n                -0.025127431,\n                -0.022836473,\n                -0.030513622,\n                -0.007476081,\n                -0.04742772,\n                -0.0133801745,\n                0.03187845,\n                0.02028961,\n                -0.033023927,\n                -0.0070312936,\n                0.024749666,\n                0.013099898,\n                -0.04686717,\n                -0.0975851,\n                -0.020996394,\n                -0.025054315,\n                -0.03563172,\n                0.058248848,\n                -0.009974201,\n                0.0029642326,\n                0.005757862,\n                -0.0052064476,\n                -0.012563716,\n                -0.0014478433,\n                0.023726046,\n                0.034681216,\n                -0.011393865,\n                -0.022202803,\n                0.008670304,\n                0.0093344385,\n                -0.004977961,\n                0.0027905828,\n                0.038507607,\n                -0.010906426,\n                -0.022214988,\n                0.004572778,\n                -0.055811655,\n                -0.0067510167,\n                0.040554844,\n                0.009553785,\n                0.0069459924,\n                -0.0078111948,\n                -0.010784566,\n                0.011034379,\n                0.012057998,\n                0.029051308,\n                -0.014123517,\n                -0.019363476,\n                0.0008469236,\n                0.017559955,\n                -0.004962729,\n                0.058492564,\n                -0.030757342,\n                0.0012064092,\n                -0.027467133,\n                0.066584036,\n                0.011022192,\n                -0.013136456,\n                -0.061953377,\n                -0.01351422,\n                -0.059174977,\n                0.014111332,\n                0.0011942232,\n                -0.013160828,\n                0.025663612,\n                0.026979696,\n                -0.0040183174,\n                -0.008371748,\n                -0.020472398,\n                0.026151052,\n                -0.011923953,\n                -0.007226269,\n                -0.0065743206,\n                0.029148795,\n                0.020996394,\n                -0.05186341,\n                0.045161135,\n                -0.036972176,\n                0.008000077,\n                0.043381985,\n                -0.005629909,\n                -0.015841737,\n                0.037581474,\n                -0.0403355,\n                0.04087168,\n                -0.042967662,\n                -0.0038202957,\n                -0.009986387,\n                -0.033023927,\n                -0.0076405914,\n                -0.043771937,\n                -0.035972927,\n                0.012393112,\n                -0.02139853,\n                -0.01902227,\n                0.009578157,\n                0.009547693,\n                -0.0060411855,\n                0.03341388,\n                -0.00095278904,\n                -0.00573349,\n                0.001162235,\n                0.029709348,\n                0.040798564,\n                0.010047317,\n                0.021166997,\n                0.0213376,\n                0.041944046,\n                0.025809845,\n                0.03151287,\n                0.0005826408,\n                0.009084627,\n                0.04535611,\n                -0.052887026,\n                -0.0012574379,\n                -0.0130633395,\n                0.01818144,\n                -0.029904325,\n                0.016828798,\n                0.028880704,\n                -0.010833311,\n                -0.03295081,\n                -0.040676706,\n                0.028003316,\n                -0.056786533,\n                -0.03689906,\n                -0.052448332,\n                0.033121414,\n                -0.020850163,\n                0.040701076,\n                0.01095517,\n                0.0051241927,\n                -0.076137826,\n                0.03831263,\n                0.036167905,\n                0.021800667,\n                -0.008073193,\n                0.03843449,\n                0.019387849,\n                0.021374159,\n                -0.0011409096,\n                -0.031707846,\n                0.04789079,\n                0.04291892,\n                -0.03290207,\n                0.01922943,\n                0.00363446,\n                0.0493531,\n                -0.021288857,\n                -0.044015657,\n                -0.0026656769,\n                -0.005182076,\n                -0.046501588,\n                0.060198598,\n                0.012843993,\n                0.007884311,\n                0.012514972,\n                -0.034413125,\n                0.005483678,\n                -0.0013008503,\n                0.026882209,\n                -0.0064524612,\n                0.0015750342,\n                0.0019375662,\n                -0.004383896,\n                -0.02856387,\n                0.021118253,\n                0.025907332,\n                0.03767896,\n                0.012953666,\n                -0.00030293514,\n                -0.028466381,\n                0.0485732,\n                0.021166997,\n                0.013867612,\n                -0.010120433,\n                -0.017145634,\n                -0.00057388213,\n                0.024176927,\n                -0.013343616,\n                0.029611861,\n                -0.054788038,\n                -0.019400034,\n                0.0066291573,\n                -0.0008789117,\n                0.032049052,\n                0.010766288,\n                0.06673027,\n                -0.021861596,\n                -0.0052125407,\n                -0.04830511,\n                0.029246282,\n                -0.023981951,\n                -0.039677456,\n                0.0135995215,\n                0.038995042,\n                -0.018510459,\n                0.040530473,\n                -0.015817365,\n                -0.02227592,\n                -0.019582823,\n                0.022251546,\n                0.02242215,\n                0.008128029,\n                0.063123226,\n                -0.0078111948,\n                -0.021983456,\n                0.037508357,\n                -0.034876194,\n                -0.008792164,\n                0.041724697,\n                -0.02094765,\n                0.0016359639,\n                -0.08227954,\n                0.008146308,\n                0.020460213,\n                -0.023847906,\n                0.015122766,\n                -0.063074484,\n                0.05137597,\n                -0.0039634807,\n                -0.022653684,\n                -0.028612614,\n                -0.0025468639,\n                -0.014781559,\n                -0.047476467,\n                -0.039750572,\n                -0.005910186,\n                -0.0049871006,\n                0.0047616605,\n                -0.0015643715,\n                -0.01345329,\n                -0.0065438556,\n                -0.006013767,\n                -0.007439523,\n                -0.04830511,\n                0.0010693172,\n                -0.01402603,\n                -0.055909146,\n                0.022020014,\n                -0.019192873,\n                -0.034266893,\n                -0.06677901,\n                -0.03587544,\n                0.013307058,\n                0.009450205,\n                -0.00647074,\n                -0.008201146,\n                -0.023579815,\n                0.0004824875,\n                0.016170757,\n                0.029319398,\n                -0.058882516,\n                -0.03897067,\n                0.038995042,\n                -0.0012231648,\n                0.007238455,\n                0.039750572,\n                0.016438847,\n                -0.0043869424,\n                0.04160284,\n                -0.058736283,\n                -0.035266142,\n                -0.013136456,\n                -0.001748684,\n                -0.0124906,\n                0.002903303,\n                -0.01550053,\n                0.037971422,\n                -0.03214654,\n                -0.010498197,\n                0.010035131,\n                -0.009791411,\n                -0.03765459,\n                0.029855581,\n                0.040798564,\n                0.031707846,\n                -0.018461715,\n                0.058102615,\n                0.031488497,\n                -0.017949905,\n                -0.023628559,\n                -0.0132826865,\n                -0.018863853,\n                0.004691591,\n                0.006702273,\n                -0.042358365,\n                0.0121311145,\n                0.023677303,\n                0.005489771,\n                0.0016405337,\n                -0.013709195,\n                -0.012600274,\n                0.047257118,\n                0.019497521,\n                -0.009858434,\n                0.009535506,\n                0.02702844,\n                0.045014903,\n                0.0771127,\n                -0.010467732,\n                -0.030464878,\n                -0.013099898,\n                -0.018656692,\n                -0.022020014,\n                -0.021593506,\n                0.006135626,\n                -0.04060359,\n                -0.06005237,\n                -0.0049109384,\n                0.007987891,\n                -0.018766364,\n                0.009779226,\n                -0.042504597,\n                -0.024274414,\n                0.0052612843,\n                0.0038873183,\n                -0.0028058153,\n                0.047598325,\n                0.017657444,\n                0.005739583,\n                -0.028466381,\n                0.016182942,\n                0.01152791,\n                0.015329926,\n                -0.039433736,\n                0.0117350705,\n                0.023421397,\n                -0.018949155,\n                0.052984517,\n                -0.01787679,\n                0.036582224,\n                0.017352795,\n                -0.034291267,\n                0.0064219963,\n                -0.01027885,\n                0.024713108,\n                0.004752521,\n                -0.03558298,\n                0.018754179,\n                0.014099145,\n                0.006077743,\n                -0.00778073,\n                0.03268272,\n                0.002147774,\n                -0.024871526,\n                -0.0440644,\n                -0.017974278,\n                0.020886721,\n                -0.017255306,\n                -0.013928542,\n                0.046233498,\n                0.0123687405,\n                -0.029002564,\n                -0.02332391,\n                0.0022970517,\n                0.01974124,\n                -0.0063915313,\n                -0.021410717,\n                0.021873781,\n                0.013928542,\n                -0.006300137,\n                -0.0013633033,\n                0.032828953,\n                -0.0039604343,\n                0.022117501,\n                0.007987891,\n                -0.037825193,\n                0.003497368,\n                0.02236122,\n                -0.012441856,\n                -0.0023534119,\n                0.021483831,\n                -0.0073907794,\n                0.00784166,\n                -0.029270655,\n                0.009791411,\n                -0.01730405,\n                0.04367445,\n                -0.016243873,\n                0.024213485,\n                0.069021225,\n                0.0036679714,\n                -0.023019262,\n                -0.021959083,\n                -0.01922943,\n                0.009243044,\n                -0.0020472398,\n                0.006769296,\n                -0.006489019,\n                0.026346026,\n                0.031171663,\n                -0.029855581,\n                0.011083122,\n                -0.0057670013,\n                -0.019887472,\n                -0.030294275,\n                0.014854674,\n                0.0071165953,\n                0.08647151,\n                -0.004408268,\n                0.05420311,\n                -0.009072441,\n                -0.030903572,\n                0.035704836,\n                0.053082004,\n                -0.029953068,\n                -0.02780834,\n                -0.0028560823,\n                0.0018720668,\n                0.004932264,\n                -0.0066352505,\n                0.022519637,\n                -0.012374833,\n                -0.009450205,\n                0.0052186335,\n                0.004764707,\n                0.0052430057,\n                -0.030854829,\n                -0.005840117,\n                -0.0029535699,\n                0.0014409887,\n                -0.0308792,\n                -0.022860844,\n                0.0043503847,\n                -0.025761101,\n                -0.010138711,\n                -0.0108028455,\n                -0.009462391,\n                0.05239959,\n                -0.014257563,\n                0.0020213446,\n                0.04430812,\n                -0.038263887,\n                0.016621638,\n                -0.0373865,\n                -0.0020990302,\n                -0.017974278,\n                0.006507298,\n                0.04343073,\n                0.008676398,\n                0.0169141,\n                0.003290207,\n                -0.018400786,\n                0.02727216,\n                0.0030053603,\n                0.014915604,\n                0.013160828,\n                -0.0013701579,\n                -0.007000829,\n                -0.00022067995,\n                0.020094633,\n                0.05956493,\n                0.004158456,\n                0.003341997,\n                -0.016792241,\n                -0.012722133,\n                -0.008286446,\n                -0.07058103,\n                -0.012673389,\n                0.0063488805,\n                -0.0102057345,\n                -0.0020746582,\n                -0.010875962,\n                -0.018510459,\n                -0.01941222,\n                -0.0005312313,\n                -0.010650521,\n                0.019521894,\n                -0.02106951,\n                0.022409964,\n                -0.014135703,\n                0.008749513,\n                -0.05059607,\n                0.018863853,\n                0.021020766,\n                0.00414627,\n                0.0013427394,\n                0.009693924,\n                -0.0039025508,\n                -0.010528662,\n                -0.00516989,\n                0.0039573875,\n                0.014513467,\n                0.003247556,\n                0.025785472,\n                -0.029855581,\n                -0.045404855,\n                0.021764109,\n                -0.012185951,\n                -0.0030266857,\n                -0.01883948,\n                -0.031074176,\n                -0.0059497906,\n                0.020326167,\n                -0.01242967,\n                0.030611109,\n                0.0024554692,\n                -0.0063732523,\n                0.04920687,\n                0.0017974278,\n                -0.036460366,\n                -0.010047317,\n                -0.0032627885,\n                0.012978038,\n                0.004527081,\n                -0.061465938,\n                -0.010534755,\n                -0.040286753,\n                0.02678472,\n                0.0016161618,\n                -0.027394019,\n                -0.013940728,\n                -0.052692052,\n                -0.05200964,\n                0.06736394,\n                0.023592,\n                -0.019570637,\n                0.0046672192,\n                -0.0011881302,\n                0.014135703,\n                -0.037630215,\n                0.043211382,\n                -0.014915604,\n                -0.030099299,\n                0.015342113,\n                -0.017949905,\n                -0.02236122,\n                0.019619381,\n                -0.0043747565,\n                -0.032000307,\n                -0.028978191,\n                -0.010510383,\n                0.040676706,\n                0.031147292,\n                -0.014050402,\n                0.025200548,\n                -0.040676706,\n                0.004289455,\n                -0.036582224,\n                -0.015074021,\n                0.036435995,\n                -0.015171509,\n                -0.017206563,\n                -0.005824885,\n                -0.05751769,\n                -0.046550333,\n                0.0016557662,\n                -0.011198889,\n                -0.0063793454,\n                0.0126855755,\n                -0.019180687,\n                -0.030659853,\n                0.01766963,\n                0.009876713,\n                -0.059272468,\n                0.017438097,\n                -0.0025087828,\n                0.008438772,\n                0.010449453,\n                -0.0035674372,\n                -0.008073193,\n                -0.02395758,\n                0.014915604,\n                -0.0014120471,\n                0.010492104,\n                0.007323757,\n                -0.0022574475,\n                -0.008475329,\n                -0.019546265,\n                -0.0015796039,\n                0.026735976,\n                0.0060107205,\n                -0.027978944,\n                -0.021276671,\n                -0.020862348,\n                0.002679386,\n                0.05161969,\n                0.007786823,\n                -0.00009396511,\n                0.027613366,\n                0.032341514,\n                0.007963519,\n                -0.017645257,\n                -0.044015657,\n                0.012259067,\n                0.021751923,\n                -0.005553747,\n                -0.022836473,\n                0.019777799,\n                -0.020423654,\n                -0.0053374465,\n                -0.013660451,\n                -0.004752521,\n                -0.011643676,\n                -0.00086215604,\n                -0.011442608,\n                0.0067510167,\n                -0.037605844,\n                0.0025362012,\n                0.0012597227,\n                -0.007933054,\n                -0.016792241,\n                0.01715782,\n                -0.0332189,\n                -0.024103811,\n                0.0095416,\n                -0.018425157,\n                -0.035388,\n                0.0014981104,\n                0.01384324,\n                0.032365885,\n                0.008036635,\n                0.01378231,\n                0.06872877,\n                0.040457357,\n                -0.027905827,\n                0.029709348,\n                0.007677149,\n                0.025371151,\n                0.012563716,\n                -0.022239361,\n                -0.038337003,\n                -0.011204982,\n                -0.026979696,\n                -0.0411154,\n                -0.0121433,\n                0.011631491,\n                0.010272757,\n                0.006671808,\n                0.0029444303,\n                -0.018498274,\n                0.028393267,\n                0.022202803,\n                0.0073420354,\n                0.0625383,\n                0.020862348,\n                0.015244625,\n                -0.015244625,\n                0.022885216,\n                -0.006683994,\n                -0.0048043113,\n                -0.0046062893,\n                0.005763955,\n                -0.034364384,\n                0.005806606,\n                -0.03217091,\n                0.014647514,\n                0.015390856,\n                -0.020569885,\n                0.0010220966,\n                -0.03470559,\n                0.04165158,\n                -0.01844953,\n                -0.015390856,\n                0.023275167,\n                -0.00567256,\n                -0.01736498,\n                -0.028100803,\n                0.00204267,\n                0.003923876,\n                -0.023701675,\n                0.02164225,\n                -0.0017532537,\n                -0.0139163565,\n                0.017742746,\n                -0.029709348,\n                -0.022178432,\n                0.047086515,\n                -0.0038934115,\n                -0.02780834,\n                0.06682776,\n                0.008073193,\n                0.012466228,\n                0.025834216,\n                0.025103059,\n                -0.0030937083,\n                -0.015403043,\n                0.010382431,\n                0.03295081,\n                -0.024055067,\n                -0.02383572,\n                -0.019619381,\n                -0.012003162,\n                -0.000119479446,\n                0.0017166958,\n                -0.019509709,\n                0.025566125,\n                0.020996394,\n                -0.028003316,\n                0.0042803152,\n                -0.0038659929,\n                0.021227926,\n                -0.012277346,\n                0.07530918,\n                -0.01736498,\n                -0.013465476,\n                -0.010748009,\n                0.02778397,\n                0.03960434,\n                -0.012076277,\n                -0.00790259,\n                -0.0062453,\n                0.0024250043,\n                0.044746812,\n                0.007725893,\n                0.0054501668,\n                -0.0033876945,\n                0.034656845,\n                -0.0054623527,\n                -0.011540095,\n                -0.013489848,\n                0.02600482,\n                0.0043290593,\n                -0.022592753,\n                0.045185506,\n                0.03714278,\n                0.02832015,\n                -0.047354605,\n                -0.02817392,\n                -0.011948325,\n                -0.018315485,\n                0.0050145187,\n                -0.0045088017,\n                0.008274261,\n                0.008371748,\n                0.040554844,\n                -0.001242967,\n                -0.02440846,\n                0.029100051,\n                0.046014152,\n                0.024335345,\n                0.023579815,\n                0.017291864,\n                0.007884311,\n                0.054885525,\n                -0.0036557852,\n                -0.0072567337,\n                0.0012833329,\n                -0.00051561807,\n                -0.009230858,\n                0.0039330157,\n                -0.049133755,\n                -0.010144805,\n                -0.0039695734,\n                0.0013206524,\n                -0.028490754,\n                0.007829473,\n                0.0045088017,\n                -0.035168655,\n                -0.020411469,\n                0.022617126,\n                -0.0017075564,\n                0.030513622,\n                -0.029148795,\n                -0.0029185354,\n                -0.021471646,\n                0.048524458,\n                0.03219528,\n                0.01883948,\n                -0.036825944,\n                -0.03190282,\n                -0.02293396,\n                -0.0124906,\n                0.007171432,\n                -0.0002012586,\n                0.017352795,\n                -0.013026781,\n                -0.0133801745,\n                0.03161036,\n                0.0045666853,\n                0.03421815,\n                0.009316159,\n                -0.025078688,\n                0.009261323,\n                0.005925419,\n                0.02422567,\n                -0.0031744402,\n                0.021751923,\n                0.032073423,\n                0.027320903,\n                0.030026184,\n                -0.0040305033,\n                0.056981508,\n                -0.034778703,\n                0.016572893,\n                -0.0034455776,\n                -0.01220423,\n                0.00232447,\n                0.04396691,\n                -0.030976688,\n                -0.038288258,\n                0.0016572893,\n                0.05766392,\n                0.005943698,\n                -0.0149277905,\n                -0.0077746366,\n                0.024786225,\n                0.010126526,\n                0.038726952,\n                0.0287101,\n                0.013623893,\n                -0.023494514,\n                -0.01300241,\n                0.02031398,\n                -0.025273662,\n                -0.011229354,\n                0.010004666,\n                0.005239959,\n                0.0035552513,\n                -0.038629465,\n                -0.000015589449,\n                -0.04589229,\n                -0.006120394,\n                0.009523321,\n                -0.030927943,\n                0.009230858,\n                -0.0030860922,\n                -0.038142025,\n                0.014013844,\n                0.0060350923,\n                -0.0054593063,\n                -0.014866861,\n                -0.018157067,\n                0.0016192083,\n                0.010516476,\n                0.015658947,\n                0.0022513545,\n                0.004795172,\n                -0.026272912,\n                -0.022751171,\n                0.0114365155,\n                -0.0550805,\n                0.04265083,\n                -0.021288857,\n                0.040043034,\n                0.017267494,\n                -0.0059497906,\n                -0.008176773,\n                0.007323757,\n                0.018242368,\n                0.008201146,\n                0.023348283,\n                -0.028661357,\n                -0.019131944,\n                -0.013087711,\n                -0.018973526,\n                -0.012185951,\n                0.033901315,\n                0.012411391,\n                0.0065438556,\n                -0.0011051134,\n                0.0014859245,\n                0.014001658,\n                -0.007025201,\n                0.0006709889,\n                -0.030196788,\n                0.025273662,\n                -0.031171663,\n                0.0108028455,\n                -0.006671808,\n                -0.012064092,\n                0.00029988863,\n                0.021361973,\n                -0.01113796,\n                -0.00062643405,\n                0.0070373868,\n                -0.0005586497,\n                0.018681062,\n                -0.0037502265,\n                -0.042212136,\n                -0.024103811,\n                -0.013502033,\n                0.005565933,\n                -0.007457802,\n                -0.029538745,\n                0.0055628866,\n                0.02082579,\n                0.03667971,\n                0.0047616605,\n                0.00915165,\n                0.0022620172,\n                0.0024006325,\n                -0.008591096,\n                -0.0023092378,\n                -0.008603281,\n                0.013709195,\n                -0.0061721844,\n                0.006138673,\n                -0.036289763,\n                0.024493761,\n                0.013855427,\n                0.011253726,\n                -0.035168655,\n                0.035777953,\n                -0.0018644505,\n                -0.016511964,\n                -0.020119006,\n                -0.0041523627,\n                0.011058751,\n                0.0098888995,\n                -0.023019262,\n                0.00046839748,\n                0.013818868,\n                0.011783815,\n                0.023384841,\n                0.035266142,\n                -0.012600274,\n                0.010309314,\n                0.002616933,\n                0.002280296,\n                -0.014659699,\n                0.007890403,\n                0.01869325,\n                0.00720799,\n                0.016877543,\n                -0.0205577,\n                0.052058384,\n                0.0058919075,\n                0.014659699,\n                -0.01709689,\n                0.02780834,\n                -0.00692162,\n                -0.021166997,\n                0.038020167,\n                -0.007939147,\n                0.019826543,\n                -0.005556794,\n                0.028636985,\n                0.014818117,\n                -0.010297129,\n                0.007713707,\n                -0.017840233,\n                0.0070922235,\n                0.026053563,\n                0.012161579,\n                0.008487515,\n                0.036752827,\n                0.017218748,\n                -0.014050402,\n                -0.021057324,\n                0.014720629,\n                -0.004810404,\n                0.011546189,\n                -0.008469236,\n                0.016085455,\n                0.004990147,\n                -0.0014676455,\n                0.007939147,\n                -0.03663097,\n                0.006476833,\n                -0.0024996432,\n                -0.018632319,\n                0.02031398,\n                0.09734138,\n                0.00015556128,\n                0.0039330157,\n                -0.01568332,\n                0.007933054,\n                -0.0220322,\n                -0.031951565,\n                -0.01631699,\n                0.062343325,\n                -0.013709195,\n                0.0057700477,\n                -0.026833465,\n                0.009565972,\n                0.003128743,\n                0.042260878,\n                0.03957997,\n                -0.030537993,\n                0.0067814817,\n                0.027467133,\n                0.014403794,\n                0.028393267,\n                -0.006964271,\n                0.02768648,\n                -0.028393267,\n                -0.012929294,\n                -0.009102905,\n                0.011820372,\n                -0.043479472,\n                0.0008560631,\n                -0.0013914832,\n                0.024786225,\n                0.014513467,\n                0.011643676,\n                -0.03719152,\n                0.008280354,\n                0.009529414,\n                0.033145785,\n                -0.025834216,\n                0.0062940437,\n                0.010102154,\n                -0.048256367,\n                0.025371151,\n                -0.03268272,\n                0.019765614,\n                0.01673131,\n                0.0074090585,\n                -0.015719878,\n                -0.045404855,\n                0.021325415,\n                -0.012454042,\n                0.032585233,\n                -0.018705435,\n                -0.014440352,\n                -0.028856331,\n                -0.008511887,\n                0.010601778,\n                -0.0028073385,\n                -0.009876713,\n                0.00414627,\n                -0.00044212153,\n                -0.027467133,\n                -0.016329175,\n                0.013014596,\n                0.0070983167,\n                0.01660945,\n                0.013099898,\n                -0.029416885,\n                0.014464724,\n                -0.00047030154,\n                0.00880435,\n                0.024262229,\n                0.026979696,\n                -0.018315485,\n                -0.02227592,\n                0.029124424,\n                0.016828798,\n                0.03368197,\n                0.0010038178,\n                0.0014745,\n                -0.047232747,\n                -0.011503538,\n                0.015451786,\n                0.028588241,\n                0.0066657155,\n                -0.022129687,\n                0.025127431,\n                -0.02805206,\n                0.013246129,\n                0.004143223,\n                0.022946145,\n                -0.027905827,\n                -0.0017349748,\n                -0.0038142027,\n                0.00088576635,\n                -0.0027007114,\n                0.043113895,\n                -0.02756462,\n                -0.014062587,\n                -0.0032932532,\n                -0.006568228,\n                -0.0352174,\n                0.01736498,\n                -0.0040762005,\n                -0.006580414,\n                0.0110404715,\n                -0.030659853,\n                -0.0052308193,\n                -0.030196788,\n                -0.017267494,\n                -0.0061752307,\n                -0.0024448065,\n                0.002185855,\n                0.021020766,\n                0.023604188,\n                -0.008158495,\n                0.053520698,\n                -0.057712663,\n                0.00068584055,\n                0.025322406,\n                0.015598018,\n                0.016560707,\n                -0.015780807,\n                -0.019241616,\n                0.035972927,\n                0.018754179,\n                0.015415228,\n                -0.0017989511,\n                0.0330483,\n                0.014964348,\n                0.0346081,\n                -0.005185122,\n                -0.034096293,\n                -0.009626902,\n                0.002085321,\n                -0.021654435,\n                0.020813605,\n                -0.035144284,\n                0.011503538,\n                0.010815032,\n                -0.03589981,\n                -0.03112292,\n                0.00018221805,\n                -0.03585107,\n                -0.005285656,\n                -0.015756436,\n                0.016548522,\n                0.0032262306,\n                0.0010236199,\n                0.03419378,\n                -0.003259742,\n                -0.01736498,\n                -0.014391609,\n                0.04213902,\n                -0.008511887,\n                0.01384324,\n                -0.002179762,\n                0.03960434,\n                0.03897067,\n                -0.0129049225,\n                -0.02844201,\n                -0.04842697,\n                -0.026930952,\n                -0.004383896,\n                0.023738233,\n                0.011838651,\n                -0.023628559,\n                0.012758691,\n                0.038361374,\n                0.0030464877,\n                0.008871373,\n                -0.038775697,\n                -0.00778073,\n                -0.010912519,\n                0.030269902,\n                0.014403794,\n                -0.014099145,\n                -0.010778474,\n                0.05137597,\n                -0.023141121,\n                -0.033097044,\n                -0.000017529204,\n                -0.0009337485,\n                -0.004889613,\n                -0.0070800376,\n                0.013441104,\n                0.010863775,\n                -0.020021517,\n                -0.014330679,\n                -0.021154812,\n                0.010540848,\n                -0.03921439,\n                -0.020216493,\n                -0.022860844,\n                0.035972927,\n                -0.012563716,\n                0.010242292,\n                -0.012612459,\n                0.008889651,\n                0.007993984,\n                0.02293396,\n                0.0036740643,\n                -0.020764861,\n                0.016304802,\n                0.006482926,\n                0.018632319,\n                0.0036801572,\n                -0.029733721,\n                0.007677149,\n                0.019765614,\n                -0.002348842,\n                0.020204308,\n                0.012563716,\n                -0.015390856,\n                0.018510459,\n                -0.0008195052,\n                0.0057852804,\n                0.0070922235,\n                0.0068728765,\n                0.043650076,\n                0.006964271,\n                0.004109712,\n                -0.021483831,\n                -0.016475406,\n                -0.049669936,\n                0.01832767,\n                -0.018985711,\n                -0.02227592,\n                0.016682567,\n                -0.003035825,\n                -0.019071013,\n                0.012709947,\n                -0.022678055,\n                -0.0018202765,\n                -0.022288105,\n                -0.05005989,\n                0.0015719876,\n                -0.009407554,\n                -0.031293523,\n                -0.017559955,\n                0.0032658349,\n                -0.023470141,\n                -0.0001422329,\n                -0.03048925,\n                0.0016085455,\n                -0.021410717,\n                0.011716792,\n                0.043918166,\n                0.04218776,\n                -0.036801573,\n                0.013940728,\n                -0.016597265,\n                0.037313383,\n                -0.008097565,\n                0.019558452,\n                0.018023022,\n                -0.0070922235,\n                0.045551084,\n                0.0035126004,\n                -0.017864604,\n                -0.03560735,\n                -0.030757342,\n                -0.050401095,\n                -0.010735823,\n                -0.010449453,\n                -0.00829254,\n                0.017511211,\n                0.03780082,\n                -0.016012339,\n                -0.01363608,\n                0.0025453405,\n                -0.03161036,\n                0.0006469978,\n                0.043381985,\n                -0.017194377,\n                -0.003366369,\n                -0.0054501668,\n                -0.022799915,\n                -0.025005572,\n                0.04238274,\n                0.0411154,\n                -0.021288857,\n                0.040969167,\n                -0.0058797216,\n                -0.013721381,\n                0.000068545975,\n                0.017218748,\n                -0.006300137,\n                0.047086515,\n                -0.025054315,\n                -0.0046123825,\n                0.026321655,\n                0.021118253,\n                0.01965594,\n                0.03270709,\n                0.020253051,\n                0.012064092,\n                0.016207315,\n                -0.00040442124,\n                -0.009230858,\n                -0.006805854,\n                0.003378555,\n                -0.013148641,\n                0.0013937681,\n                -0.0027875362,\n                0.047622696,\n                -0.023884464,\n                0.018815108,\n                0.0033694154,\n                -0.022020014,\n                -0.00048972294,\n                0.012405299,\n                -0.0051881685,\n                0.0017349748,\n                0.014598769,\n                -0.005316121,\n                0.0038812254,\n                -0.01408696,\n                0.018230183,\n                0.03921439,\n                0.009450205,\n                0.032097794,\n                0.022982704,\n                -0.0095416,\n                -0.0029231051,\n                -0.008572817,\n                -0.002391493,\n                -0.01408696,\n                -0.001345786,\n                0.0049871006,\n                -0.00527347,\n                -0.0346081,\n                -0.023287352,\n                0.004109712,\n                -0.0027692574,\n                0.020898907,\n                0.0005525567,\n                -0.018437345,\n                -0.0015719876,\n                -0.0001145289,\n                -0.00692162,\n                -0.0034486242,\n                0.016694752,\n                -0.0075796614,\n                -0.032000307,\n                -0.010967356,\n                0.017718373,\n                0.01294148,\n                0.021630064,\n                0.052887026,\n                -0.0034486242,\n                0.00929788,\n                0.018949155,\n                -0.01408696,\n                0.0017867651,\n                -0.012234695,\n                0.021532577,\n                0.056835275,\n                -0.016024526,\n                -0.016658194,\n                0.0043260125,\n                -0.006495112,\n                -0.004959682,\n                0.0049749147,\n                0.010327593,\n                -0.027004067,\n                0.026979696,\n                -0.032292772,\n                0.03397443,\n                -0.0014432736,\n                -0.0162195,\n                -0.008042728,\n                -0.004414361,\n                -0.013038968,\n                -0.038605094,\n                -0.012795249,\n                -0.024128184,\n                -0.012649017,\n                -0.0049444498,\n                0.027491506,\n                -0.0074090585,\n                -0.005791373,\n                0.021605691,\n                -0.020399282,\n                0.032512117,\n                0.03524177,\n                0.027394019,\n                -0.022397779,\n                0.012137207,\n                0.056445327\n            ]\n        }\n    ],\n    \"model\": \"text-embedding-3-small\",\n    \"usage\": {\n        \"prompt_tokens\": 11,\n        \"total_tokens\": 11\n    }\n}"
								}
							]
						},
						{
							"name": "Create Embedding of User Input",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let input = [",
											"    \"What forms of payment are accepted?\",",
											"    \"How can I reset my password?\",",
											"    \"What is your return policy?\",",
											"    \"How can I track my order?\"",
											"];",
											"",
											"let userInput = pm.collectionVariables.get('inputString'); ",
											"if(userInput == null || userInput == \"undefined\"){",
											"    userInput = input;",
											"    pm.collectionVariables.set('inputString', userInput);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"console.log(responseData)",
											"pm.collectionVariables.set(\"userInputEmbeddings\", JSON.stringify(responseData.data.map(embed => embed.embedding)));",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Data object and its properties are present\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item.index).to.exist.and.to.be.a('number');",
											"        pm.expect(item.embedding).to.exist.and.to.be.an('array');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Embedding array is present and contains expected number of elements\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"  pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"Embedding array should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Model field should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.model).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Usage object and its properties are present\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.usage).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.usage.prompt_tokens).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.usage.total_tokens).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"{{inputString}}\",\n    \"model\": \"{{embeddingModel}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"embeddings"
									]
								}
							},
							"response": [
								{
									"name": "Create Embedding of User Input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": \"{{inputString}}\",\n    \"model\": \"text-embedding-3-small\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"embeddings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 17 Jun 2024 07:18:35 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "openai-model",
											"value": "text-embedding-3-small"
										},
										{
											"key": "openai-organization",
											"value": "user-3wdwkjaeznoulp9fnvi35lbh"
										},
										{
											"key": "openai-processing-ms",
											"value": "20"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15724800; includeSubDomains"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "3000"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "1000000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "2999"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "999986"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "20ms"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "0s"
										},
										{
											"key": "x-request-id",
											"value": "req_e731a671a3c42ef0a1e78779b52dc97b"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Set-Cookie",
											"value": "__cf_bm=XsZnxgxBZl7EfoNI3htzM3eA8gyOYjSdxzJimwO3Afo-1718608715-1.0.1.1-VnzQ71IjnQX0ELWypRYa5SJfU_6CynxppMA0rM3Deeyyb5I_48gdAg6ioD01tBG8KM2AuHojjm37bFru.gA98A; path=/; expires=Mon, 17-Jun-24 07:48:35 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "Set-Cookie",
											"value": "_cfuvid=CRX8GN385YltHtZZ6YPO25qnfCRtaIe1cIHF_6RJhCE-1718608715066-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "895144346b147af7-SJC"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"embedding\",\n            \"index\": 0,\n            \"embedding\": [\n                -0.0142941205,\n                0.019290362,\n                -0.052887026,\n                -0.031025432,\n                -0.009468484,\n                -0.035729207,\n                -0.02248308,\n                0.05444683,\n                0.010315408,\n                -0.0033267646,\n                0.025858589,\n                -0.0063306014,\n                0.007634498,\n                -0.043138266,\n                0.016901914,\n                0.011192796,\n                -0.013404546,\n                -0.014623141,\n                -0.07097098,\n                -0.010077782,\n                0.00539533,\n                0.030001812,\n                0.044527464,\n                -0.041944046,\n                -0.06292825,\n                0.046964657,\n                -0.04165158,\n                -0.02434753,\n                0.013550778,\n                -0.036338508,\n                0.0077746366,\n                -0.024566878,\n                0.009998573,\n                -0.0061843703,\n                -0.034096293,\n                -0.00094136473,\n                0.017864604,\n                0.041578464,\n                0.028661357,\n                0.020253051,\n                -0.010656614,\n                0.016792241,\n                0.0063549737,\n                -0.01164977,\n                0.032609604,\n                0.0034425312,\n                -0.028417638,\n                0.041334745,\n                0.020021517,\n                0.027491506,\n                -0.0036375064,\n                0.037776448,\n                -0.024786225,\n                0.030708596,\n                -0.029587489,\n                0.0135995215,\n                0.051327225,\n                0.019936217,\n                0.027247787,\n                -0.027247787,\n                0.06546293,\n                -0.038288258,\n                -0.026589746,\n                0.024213485,\n                -0.004651987,\n                -0.07579662,\n                0.012722133,\n                0.044235002,\n                -0.0047555673,\n                -0.051522203,\n                0.009559879,\n                0.024323158,\n                0.00023781645,\n                -0.049767423,\n                0.009748761,\n                -0.009754854,\n                -0.012319997,\n                -0.029806836,\n                0.020594258,\n                -0.0030068834,\n                -0.055957887,\n                -0.028515127,\n                -0.0093344385,\n                -0.019339105,\n                -0.024627807,\n                -0.029124424,\n                -0.051960897,\n                0.05556794,\n                -0.007159246,\n                0.018632319,\n                -0.007055666,\n                0.061075985,\n                0.036216646,\n                0.023701675,\n                0.010510383,\n                0.008816536,\n                -0.041529723,\n                0.011850838,\n                -0.0228121,\n                0.067607656,\n                0.06897248,\n                0.00008720571,\n                0.009383182,\n                0.0082437955,\n                0.034559358,\n                -0.05459306,\n                -0.014525654,\n                -0.011954418,\n                -0.016231688,\n                -0.032268398,\n                -0.054105625,\n                -0.081645876,\n                -0.009724389,\n                0.011789908,\n                0.016597265,\n                0.026199795,\n                -0.054495573,\n                -0.022056572,\n                -0.010778474,\n                -0.051473457,\n                -0.016024526,\n                -0.006744924,\n                -0.013209571,\n                -0.02230029,\n                -0.009876713,\n                -0.013136456,\n                -0.037971422,\n                0.016182942,\n                -0.06063729,\n                -0.013818868,\n                0.010327593,\n                -0.04828074,\n                0.015147137,\n                -0.013562963,\n                -0.0036375064,\n                0.017694,\n                -0.05712774,\n                -0.03268272,\n                -0.03509554,\n                -0.009584251,\n                0.0073785936,\n                0.020911092,\n                0.03290207,\n                -0.039287508,\n                -0.03743524,\n                -0.033389505,\n                -0.021240113,\n                0.000046054327,\n                -0.0058005126,\n                -0.029928695,\n                -0.042870175,\n                -0.054690547,\n                -0.025687985,\n                -0.011942232,\n                -0.011521817,\n                0.0146109555,\n                0.056542814,\n                0.03558298,\n                -0.0048317295,\n                0.0176087,\n                -0.014818117,\n                0.009773132,\n                -0.04740335,\n                0.00064814027,\n                -0.004962729,\n                0.003616181,\n                -0.019546265,\n                0.005477585,\n                -0.029563118,\n                -0.030586738,\n                0.047988277,\n                0.021020766,\n                -0.033121414,\n                0.0020152517,\n                0.031805333,\n                -0.0056999787,\n                0.03741087,\n                -0.02121574,\n                -0.030903572,\n                -0.022470893,\n                -0.028783217,\n                0.029416885,\n                0.032049052,\n                0.009474577,\n                -0.016572893,\n                -0.019290362,\n                -0.020923277,\n                0.018193625,\n                -0.049767423,\n                0.040311128,\n                0.009779226,\n                0.010412895,\n                -0.03909253,\n                -0.025127431,\n                -0.022836473,\n                -0.030513622,\n                -0.007476081,\n                -0.04742772,\n                -0.0133801745,\n                0.03187845,\n                0.02028961,\n                -0.033023927,\n                -0.0070312936,\n                0.024749666,\n                0.013099898,\n                -0.04686717,\n                -0.0975851,\n                -0.020996394,\n                -0.025054315,\n                -0.03563172,\n                0.058248848,\n                -0.009974201,\n                0.0029642326,\n                0.005757862,\n                -0.0052064476,\n                -0.012563716,\n                -0.0014478433,\n                0.023726046,\n                0.034681216,\n                -0.011393865,\n                -0.022202803,\n                0.008670304,\n                0.0093344385,\n                -0.004977961,\n                0.0027905828,\n                0.038507607,\n                -0.010906426,\n                -0.022214988,\n                0.004572778,\n                -0.055811655,\n                -0.0067510167,\n                0.040554844,\n                0.009553785,\n                0.0069459924,\n                -0.0078111948,\n                -0.010784566,\n                0.011034379,\n                0.012057998,\n                0.029051308,\n                -0.014123517,\n                -0.019363476,\n                0.0008469236,\n                0.017559955,\n                -0.004962729,\n                0.058492564,\n                -0.030757342,\n                0.0012064092,\n                -0.027467133,\n                0.066584036,\n                0.011022192,\n                -0.013136456,\n                -0.061953377,\n                -0.01351422,\n                -0.059174977,\n                0.014111332,\n                0.0011942232,\n                -0.013160828,\n                0.025663612,\n                0.026979696,\n                -0.0040183174,\n                -0.008371748,\n                -0.020472398,\n                0.026151052,\n                -0.011923953,\n                -0.007226269,\n                -0.0065743206,\n                0.029148795,\n                0.020996394,\n                -0.05186341,\n                0.045161135,\n                -0.036972176,\n                0.008000077,\n                0.043381985,\n                -0.005629909,\n                -0.015841737,\n                0.037581474,\n                -0.0403355,\n                0.04087168,\n                -0.042967662,\n                -0.0038202957,\n                -0.009986387,\n                -0.033023927,\n                -0.0076405914,\n                -0.043771937,\n                -0.035972927,\n                0.012393112,\n                -0.02139853,\n                -0.01902227,\n                0.009578157,\n                0.009547693,\n                -0.0060411855,\n                0.03341388,\n                -0.00095278904,\n                -0.00573349,\n                0.001162235,\n                0.029709348,\n                0.040798564,\n                0.010047317,\n                0.021166997,\n                0.0213376,\n                0.041944046,\n                0.025809845,\n                0.03151287,\n                0.0005826408,\n                0.009084627,\n                0.04535611,\n                -0.052887026,\n                -0.0012574379,\n                -0.0130633395,\n                0.01818144,\n                -0.029904325,\n                0.016828798,\n                0.028880704,\n                -0.010833311,\n                -0.03295081,\n                -0.040676706,\n                0.028003316,\n                -0.056786533,\n                -0.03689906,\n                -0.052448332,\n                0.033121414,\n                -0.020850163,\n                0.040701076,\n                0.01095517,\n                0.0051241927,\n                -0.076137826,\n                0.03831263,\n                0.036167905,\n                0.021800667,\n                -0.008073193,\n                0.03843449,\n                0.019387849,\n                0.021374159,\n                -0.0011409096,\n                -0.031707846,\n                0.04789079,\n                0.04291892,\n                -0.03290207,\n                0.01922943,\n                0.00363446,\n                0.0493531,\n                -0.021288857,\n                -0.044015657,\n                -0.0026656769,\n                -0.005182076,\n                -0.046501588,\n                0.060198598,\n                0.012843993,\n                0.007884311,\n                0.012514972,\n                -0.034413125,\n                0.005483678,\n                -0.0013008503,\n                0.026882209,\n                -0.0064524612,\n                0.0015750342,\n                0.0019375662,\n                -0.004383896,\n                -0.02856387,\n                0.021118253,\n                0.025907332,\n                0.03767896,\n                0.012953666,\n                -0.00030293514,\n                -0.028466381,\n                0.0485732,\n                0.021166997,\n                0.013867612,\n                -0.010120433,\n                -0.017145634,\n                -0.00057388213,\n                0.024176927,\n                -0.013343616,\n                0.029611861,\n                -0.054788038,\n                -0.019400034,\n                0.0066291573,\n                -0.0008789117,\n                0.032049052,\n                0.010766288,\n                0.06673027,\n                -0.021861596,\n                -0.0052125407,\n                -0.04830511,\n                0.029246282,\n                -0.023981951,\n                -0.039677456,\n                0.0135995215,\n                0.038995042,\n                -0.018510459,\n                0.040530473,\n                -0.015817365,\n                -0.02227592,\n                -0.019582823,\n                0.022251546,\n                0.02242215,\n                0.008128029,\n                0.063123226,\n                -0.0078111948,\n                -0.021983456,\n                0.037508357,\n                -0.034876194,\n                -0.008792164,\n                0.041724697,\n                -0.02094765,\n                0.0016359639,\n                -0.08227954,\n                0.008146308,\n                0.020460213,\n                -0.023847906,\n                0.015122766,\n                -0.063074484,\n                0.05137597,\n                -0.0039634807,\n                -0.022653684,\n                -0.028612614,\n                -0.0025468639,\n                -0.014781559,\n                -0.047476467,\n                -0.039750572,\n                -0.005910186,\n                -0.0049871006,\n                0.0047616605,\n                -0.0015643715,\n                -0.01345329,\n                -0.0065438556,\n                -0.006013767,\n                -0.007439523,\n                -0.04830511,\n                0.0010693172,\n                -0.01402603,\n                -0.055909146,\n                0.022020014,\n                -0.019192873,\n                -0.034266893,\n                -0.06677901,\n                -0.03587544,\n                0.013307058,\n                0.009450205,\n                -0.00647074,\n                -0.008201146,\n                -0.023579815,\n                0.0004824875,\n                0.016170757,\n                0.029319398,\n                -0.058882516,\n                -0.03897067,\n                0.038995042,\n                -0.0012231648,\n                0.007238455,\n                0.039750572,\n                0.016438847,\n                -0.0043869424,\n                0.04160284,\n                -0.058736283,\n                -0.035266142,\n                -0.013136456,\n                -0.001748684,\n                -0.0124906,\n                0.002903303,\n                -0.01550053,\n                0.037971422,\n                -0.03214654,\n                -0.010498197,\n                0.010035131,\n                -0.009791411,\n                -0.03765459,\n                0.029855581,\n                0.040798564,\n                0.031707846,\n                -0.018461715,\n                0.058102615,\n                0.031488497,\n                -0.017949905,\n                -0.023628559,\n                -0.0132826865,\n                -0.018863853,\n                0.004691591,\n                0.006702273,\n                -0.042358365,\n                0.0121311145,\n                0.023677303,\n                0.005489771,\n                0.0016405337,\n                -0.013709195,\n                -0.012600274,\n                0.047257118,\n                0.019497521,\n                -0.009858434,\n                0.009535506,\n                0.02702844,\n                0.045014903,\n                0.0771127,\n                -0.010467732,\n                -0.030464878,\n                -0.013099898,\n                -0.018656692,\n                -0.022020014,\n                -0.021593506,\n                0.006135626,\n                -0.04060359,\n                -0.06005237,\n                -0.0049109384,\n                0.007987891,\n                -0.018766364,\n                0.009779226,\n                -0.042504597,\n                -0.024274414,\n                0.0052612843,\n                0.0038873183,\n                -0.0028058153,\n                0.047598325,\n                0.017657444,\n                0.005739583,\n                -0.028466381,\n                0.016182942,\n                0.01152791,\n                0.015329926,\n                -0.039433736,\n                0.0117350705,\n                0.023421397,\n                -0.018949155,\n                0.052984517,\n                -0.01787679,\n                0.036582224,\n                0.017352795,\n                -0.034291267,\n                0.0064219963,\n                -0.01027885,\n                0.024713108,\n                0.004752521,\n                -0.03558298,\n                0.018754179,\n                0.014099145,\n                0.006077743,\n                -0.00778073,\n                0.03268272,\n                0.002147774,\n                -0.024871526,\n                -0.0440644,\n                -0.017974278,\n                0.020886721,\n                -0.017255306,\n                -0.013928542,\n                0.046233498,\n                0.0123687405,\n                -0.029002564,\n                -0.02332391,\n                0.0022970517,\n                0.01974124,\n                -0.0063915313,\n                -0.021410717,\n                0.021873781,\n                0.013928542,\n                -0.006300137,\n                -0.0013633033,\n                0.032828953,\n                -0.0039604343,\n                0.022117501,\n                0.007987891,\n                -0.037825193,\n                0.003497368,\n                0.02236122,\n                -0.012441856,\n                -0.0023534119,\n                0.021483831,\n                -0.0073907794,\n                0.00784166,\n                -0.029270655,\n                0.009791411,\n                -0.01730405,\n                0.04367445,\n                -0.016243873,\n                0.024213485,\n                0.069021225,\n                0.0036679714,\n                -0.023019262,\n                -0.021959083,\n                -0.01922943,\n                0.009243044,\n                -0.0020472398,\n                0.006769296,\n                -0.006489019,\n                0.026346026,\n                0.031171663,\n                -0.029855581,\n                0.011083122,\n                -0.0057670013,\n                -0.019887472,\n                -0.030294275,\n                0.014854674,\n                0.0071165953,\n                0.08647151,\n                -0.004408268,\n                0.05420311,\n                -0.009072441,\n                -0.030903572,\n                0.035704836,\n                0.053082004,\n                -0.029953068,\n                -0.02780834,\n                -0.0028560823,\n                0.0018720668,\n                0.004932264,\n                -0.0066352505,\n                0.022519637,\n                -0.012374833,\n                -0.009450205,\n                0.0052186335,\n                0.004764707,\n                0.0052430057,\n                -0.030854829,\n                -0.005840117,\n                -0.0029535699,\n                0.0014409887,\n                -0.0308792,\n                -0.022860844,\n                0.0043503847,\n                -0.025761101,\n                -0.010138711,\n                -0.0108028455,\n                -0.009462391,\n                0.05239959,\n                -0.014257563,\n                0.0020213446,\n                0.04430812,\n                -0.038263887,\n                0.016621638,\n                -0.0373865,\n                -0.0020990302,\n                -0.017974278,\n                0.006507298,\n                0.04343073,\n                0.008676398,\n                0.0169141,\n                0.003290207,\n                -0.018400786,\n                0.02727216,\n                0.0030053603,\n                0.014915604,\n                0.013160828,\n                -0.0013701579,\n                -0.007000829,\n                -0.00022067995,\n                0.020094633,\n                0.05956493,\n                0.004158456,\n                0.003341997,\n                -0.016792241,\n                -0.012722133,\n                -0.008286446,\n                -0.07058103,\n                -0.012673389,\n                0.0063488805,\n                -0.0102057345,\n                -0.0020746582,\n                -0.010875962,\n                -0.018510459,\n                -0.01941222,\n                -0.0005312313,\n                -0.010650521,\n                0.019521894,\n                -0.02106951,\n                0.022409964,\n                -0.014135703,\n                0.008749513,\n                -0.05059607,\n                0.018863853,\n                0.021020766,\n                0.00414627,\n                0.0013427394,\n                0.009693924,\n                -0.0039025508,\n                -0.010528662,\n                -0.00516989,\n                0.0039573875,\n                0.014513467,\n                0.003247556,\n                0.025785472,\n                -0.029855581,\n                -0.045404855,\n                0.021764109,\n                -0.012185951,\n                -0.0030266857,\n                -0.01883948,\n                -0.031074176,\n                -0.0059497906,\n                0.020326167,\n                -0.01242967,\n                0.030611109,\n                0.0024554692,\n                -0.0063732523,\n                0.04920687,\n                0.0017974278,\n                -0.036460366,\n                -0.010047317,\n                -0.0032627885,\n                0.012978038,\n                0.004527081,\n                -0.061465938,\n                -0.010534755,\n                -0.040286753,\n                0.02678472,\n                0.0016161618,\n                -0.027394019,\n                -0.013940728,\n                -0.052692052,\n                -0.05200964,\n                0.06736394,\n                0.023592,\n                -0.019570637,\n                0.0046672192,\n                -0.0011881302,\n                0.014135703,\n                -0.037630215,\n                0.043211382,\n                -0.014915604,\n                -0.030099299,\n                0.015342113,\n                -0.017949905,\n                -0.02236122,\n                0.019619381,\n                -0.0043747565,\n                -0.032000307,\n                -0.028978191,\n                -0.010510383,\n                0.040676706,\n                0.031147292,\n                -0.014050402,\n                0.025200548,\n                -0.040676706,\n                0.004289455,\n                -0.036582224,\n                -0.015074021,\n                0.036435995,\n                -0.015171509,\n                -0.017206563,\n                -0.005824885,\n                -0.05751769,\n                -0.046550333,\n                0.0016557662,\n                -0.011198889,\n                -0.0063793454,\n                0.0126855755,\n                -0.019180687,\n                -0.030659853,\n                0.01766963,\n                0.009876713,\n                -0.059272468,\n                0.017438097,\n                -0.0025087828,\n                0.008438772,\n                0.010449453,\n                -0.0035674372,\n                -0.008073193,\n                -0.02395758,\n                0.014915604,\n                -0.0014120471,\n                0.010492104,\n                0.007323757,\n                -0.0022574475,\n                -0.008475329,\n                -0.019546265,\n                -0.0015796039,\n                0.026735976,\n                0.0060107205,\n                -0.027978944,\n                -0.021276671,\n                -0.020862348,\n                0.002679386,\n                0.05161969,\n                0.007786823,\n                -0.00009396511,\n                0.027613366,\n                0.032341514,\n                0.007963519,\n                -0.017645257,\n                -0.044015657,\n                0.012259067,\n                0.021751923,\n                -0.005553747,\n                -0.022836473,\n                0.019777799,\n                -0.020423654,\n                -0.0053374465,\n                -0.013660451,\n                -0.004752521,\n                -0.011643676,\n                -0.00086215604,\n                -0.011442608,\n                0.0067510167,\n                -0.037605844,\n                0.0025362012,\n                0.0012597227,\n                -0.007933054,\n                -0.016792241,\n                0.01715782,\n                -0.0332189,\n                -0.024103811,\n                0.0095416,\n                -0.018425157,\n                -0.035388,\n                0.0014981104,\n                0.01384324,\n                0.032365885,\n                0.008036635,\n                0.01378231,\n                0.06872877,\n                0.040457357,\n                -0.027905827,\n                0.029709348,\n                0.007677149,\n                0.025371151,\n                0.012563716,\n                -0.022239361,\n                -0.038337003,\n                -0.011204982,\n                -0.026979696,\n                -0.0411154,\n                -0.0121433,\n                0.011631491,\n                0.010272757,\n                0.006671808,\n                0.0029444303,\n                -0.018498274,\n                0.028393267,\n                0.022202803,\n                0.0073420354,\n                0.0625383,\n                0.020862348,\n                0.015244625,\n                -0.015244625,\n                0.022885216,\n                -0.006683994,\n                -0.0048043113,\n                -0.0046062893,\n                0.005763955,\n                -0.034364384,\n                0.005806606,\n                -0.03217091,\n                0.014647514,\n                0.015390856,\n                -0.020569885,\n                0.0010220966,\n                -0.03470559,\n                0.04165158,\n                -0.01844953,\n                -0.015390856,\n                0.023275167,\n                -0.00567256,\n                -0.01736498,\n                -0.028100803,\n                0.00204267,\n                0.003923876,\n                -0.023701675,\n                0.02164225,\n                -0.0017532537,\n                -0.0139163565,\n                0.017742746,\n                -0.029709348,\n                -0.022178432,\n                0.047086515,\n                -0.0038934115,\n                -0.02780834,\n                0.06682776,\n                0.008073193,\n                0.012466228,\n                0.025834216,\n                0.025103059,\n                -0.0030937083,\n                -0.015403043,\n                0.010382431,\n                0.03295081,\n                -0.024055067,\n                -0.02383572,\n                -0.019619381,\n                -0.012003162,\n                -0.000119479446,\n                0.0017166958,\n                -0.019509709,\n                0.025566125,\n                0.020996394,\n                -0.028003316,\n                0.0042803152,\n                -0.0038659929,\n                0.021227926,\n                -0.012277346,\n                0.07530918,\n                -0.01736498,\n                -0.013465476,\n                -0.010748009,\n                0.02778397,\n                0.03960434,\n                -0.012076277,\n                -0.00790259,\n                -0.0062453,\n                0.0024250043,\n                0.044746812,\n                0.007725893,\n                0.0054501668,\n                -0.0033876945,\n                0.034656845,\n                -0.0054623527,\n                -0.011540095,\n                -0.013489848,\n                0.02600482,\n                0.0043290593,\n                -0.022592753,\n                0.045185506,\n                0.03714278,\n                0.02832015,\n                -0.047354605,\n                -0.02817392,\n                -0.011948325,\n                -0.018315485,\n                0.0050145187,\n                -0.0045088017,\n                0.008274261,\n                0.008371748,\n                0.040554844,\n                -0.001242967,\n                -0.02440846,\n                0.029100051,\n                0.046014152,\n                0.024335345,\n                0.023579815,\n                0.017291864,\n                0.007884311,\n                0.054885525,\n                -0.0036557852,\n                -0.0072567337,\n                0.0012833329,\n                -0.00051561807,\n                -0.009230858,\n                0.0039330157,\n                -0.049133755,\n                -0.010144805,\n                -0.0039695734,\n                0.0013206524,\n                -0.028490754,\n                0.007829473,\n                0.0045088017,\n                -0.035168655,\n                -0.020411469,\n                0.022617126,\n                -0.0017075564,\n                0.030513622,\n                -0.029148795,\n                -0.0029185354,\n                -0.021471646,\n                0.048524458,\n                0.03219528,\n                0.01883948,\n                -0.036825944,\n                -0.03190282,\n                -0.02293396,\n                -0.0124906,\n                0.007171432,\n                -0.0002012586,\n                0.017352795,\n                -0.013026781,\n                -0.0133801745,\n                0.03161036,\n                0.0045666853,\n                0.03421815,\n                0.009316159,\n                -0.025078688,\n                0.009261323,\n                0.005925419,\n                0.02422567,\n                -0.0031744402,\n                0.021751923,\n                0.032073423,\n                0.027320903,\n                0.030026184,\n                -0.0040305033,\n                0.056981508,\n                -0.034778703,\n                0.016572893,\n                -0.0034455776,\n                -0.01220423,\n                0.00232447,\n                0.04396691,\n                -0.030976688,\n                -0.038288258,\n                0.0016572893,\n                0.05766392,\n                0.005943698,\n                -0.0149277905,\n                -0.0077746366,\n                0.024786225,\n                0.010126526,\n                0.038726952,\n                0.0287101,\n                0.013623893,\n                -0.023494514,\n                -0.01300241,\n                0.02031398,\n                -0.025273662,\n                -0.011229354,\n                0.010004666,\n                0.005239959,\n                0.0035552513,\n                -0.038629465,\n                -0.000015589449,\n                -0.04589229,\n                -0.006120394,\n                0.009523321,\n                -0.030927943,\n                0.009230858,\n                -0.0030860922,\n                -0.038142025,\n                0.014013844,\n                0.0060350923,\n                -0.0054593063,\n                -0.014866861,\n                -0.018157067,\n                0.0016192083,\n                0.010516476,\n                0.015658947,\n                0.0022513545,\n                0.004795172,\n                -0.026272912,\n                -0.022751171,\n                0.0114365155,\n                -0.0550805,\n                0.04265083,\n                -0.021288857,\n                0.040043034,\n                0.017267494,\n                -0.0059497906,\n                -0.008176773,\n                0.007323757,\n                0.018242368,\n                0.008201146,\n                0.023348283,\n                -0.028661357,\n                -0.019131944,\n                -0.013087711,\n                -0.018973526,\n                -0.012185951,\n                0.033901315,\n                0.012411391,\n                0.0065438556,\n                -0.0011051134,\n                0.0014859245,\n                0.014001658,\n                -0.007025201,\n                0.0006709889,\n                -0.030196788,\n                0.025273662,\n                -0.031171663,\n                0.0108028455,\n                -0.006671808,\n                -0.012064092,\n                0.00029988863,\n                0.021361973,\n                -0.01113796,\n                -0.00062643405,\n                0.0070373868,\n                -0.0005586497,\n                0.018681062,\n                -0.0037502265,\n                -0.042212136,\n                -0.024103811,\n                -0.013502033,\n                0.005565933,\n                -0.007457802,\n                -0.029538745,\n                0.0055628866,\n                0.02082579,\n                0.03667971,\n                0.0047616605,\n                0.00915165,\n                0.0022620172,\n                0.0024006325,\n                -0.008591096,\n                -0.0023092378,\n                -0.008603281,\n                0.013709195,\n                -0.0061721844,\n                0.006138673,\n                -0.036289763,\n                0.024493761,\n                0.013855427,\n                0.011253726,\n                -0.035168655,\n                0.035777953,\n                -0.0018644505,\n                -0.016511964,\n                -0.020119006,\n                -0.0041523627,\n                0.011058751,\n                0.0098888995,\n                -0.023019262,\n                0.00046839748,\n                0.013818868,\n                0.011783815,\n                0.023384841,\n                0.035266142,\n                -0.012600274,\n                0.010309314,\n                0.002616933,\n                0.002280296,\n                -0.014659699,\n                0.007890403,\n                0.01869325,\n                0.00720799,\n                0.016877543,\n                -0.0205577,\n                0.052058384,\n                0.0058919075,\n                0.014659699,\n                -0.01709689,\n                0.02780834,\n                -0.00692162,\n                -0.021166997,\n                0.038020167,\n                -0.007939147,\n                0.019826543,\n                -0.005556794,\n                0.028636985,\n                0.014818117,\n                -0.010297129,\n                0.007713707,\n                -0.017840233,\n                0.0070922235,\n                0.026053563,\n                0.012161579,\n                0.008487515,\n                0.036752827,\n                0.017218748,\n                -0.014050402,\n                -0.021057324,\n                0.014720629,\n                -0.004810404,\n                0.011546189,\n                -0.008469236,\n                0.016085455,\n                0.004990147,\n                -0.0014676455,\n                0.007939147,\n                -0.03663097,\n                0.006476833,\n                -0.0024996432,\n                -0.018632319,\n                0.02031398,\n                0.09734138,\n                0.00015556128,\n                0.0039330157,\n                -0.01568332,\n                0.007933054,\n                -0.0220322,\n                -0.031951565,\n                -0.01631699,\n                0.062343325,\n                -0.013709195,\n                0.0057700477,\n                -0.026833465,\n                0.009565972,\n                0.003128743,\n                0.042260878,\n                0.03957997,\n                -0.030537993,\n                0.0067814817,\n                0.027467133,\n                0.014403794,\n                0.028393267,\n                -0.006964271,\n                0.02768648,\n                -0.028393267,\n                -0.012929294,\n                -0.009102905,\n                0.011820372,\n                -0.043479472,\n                0.0008560631,\n                -0.0013914832,\n                0.024786225,\n                0.014513467,\n                0.011643676,\n                -0.03719152,\n                0.008280354,\n                0.009529414,\n                0.033145785,\n                -0.025834216,\n                0.0062940437,\n                0.010102154,\n                -0.048256367,\n                0.025371151,\n                -0.03268272,\n                0.019765614,\n                0.01673131,\n                0.0074090585,\n                -0.015719878,\n                -0.045404855,\n                0.021325415,\n                -0.012454042,\n                0.032585233,\n                -0.018705435,\n                -0.014440352,\n                -0.028856331,\n                -0.008511887,\n                0.010601778,\n                -0.0028073385,\n                -0.009876713,\n                0.00414627,\n                -0.00044212153,\n                -0.027467133,\n                -0.016329175,\n                0.013014596,\n                0.0070983167,\n                0.01660945,\n                0.013099898,\n                -0.029416885,\n                0.014464724,\n                -0.00047030154,\n                0.00880435,\n                0.024262229,\n                0.026979696,\n                -0.018315485,\n                -0.02227592,\n                0.029124424,\n                0.016828798,\n                0.03368197,\n                0.0010038178,\n                0.0014745,\n                -0.047232747,\n                -0.011503538,\n                0.015451786,\n                0.028588241,\n                0.0066657155,\n                -0.022129687,\n                0.025127431,\n                -0.02805206,\n                0.013246129,\n                0.004143223,\n                0.022946145,\n                -0.027905827,\n                -0.0017349748,\n                -0.0038142027,\n                0.00088576635,\n                -0.0027007114,\n                0.043113895,\n                -0.02756462,\n                -0.014062587,\n                -0.0032932532,\n                -0.006568228,\n                -0.0352174,\n                0.01736498,\n                -0.0040762005,\n                -0.006580414,\n                0.0110404715,\n                -0.030659853,\n                -0.0052308193,\n                -0.030196788,\n                -0.017267494,\n                -0.0061752307,\n                -0.0024448065,\n                0.002185855,\n                0.021020766,\n                0.023604188,\n                -0.008158495,\n                0.053520698,\n                -0.057712663,\n                0.00068584055,\n                0.025322406,\n                0.015598018,\n                0.016560707,\n                -0.015780807,\n                -0.019241616,\n                0.035972927,\n                0.018754179,\n                0.015415228,\n                -0.0017989511,\n                0.0330483,\n                0.014964348,\n                0.0346081,\n                -0.005185122,\n                -0.034096293,\n                -0.009626902,\n                0.002085321,\n                -0.021654435,\n                0.020813605,\n                -0.035144284,\n                0.011503538,\n                0.010815032,\n                -0.03589981,\n                -0.03112292,\n                0.00018221805,\n                -0.03585107,\n                -0.005285656,\n                -0.015756436,\n                0.016548522,\n                0.0032262306,\n                0.0010236199,\n                0.03419378,\n                -0.003259742,\n                -0.01736498,\n                -0.014391609,\n                0.04213902,\n                -0.008511887,\n                0.01384324,\n                -0.002179762,\n                0.03960434,\n                0.03897067,\n                -0.0129049225,\n                -0.02844201,\n                -0.04842697,\n                -0.026930952,\n                -0.004383896,\n                0.023738233,\n                0.011838651,\n                -0.023628559,\n                0.012758691,\n                0.038361374,\n                0.0030464877,\n                0.008871373,\n                -0.038775697,\n                -0.00778073,\n                -0.010912519,\n                0.030269902,\n                0.014403794,\n                -0.014099145,\n                -0.010778474,\n                0.05137597,\n                -0.023141121,\n                -0.033097044,\n                -0.000017529204,\n                -0.0009337485,\n                -0.004889613,\n                -0.0070800376,\n                0.013441104,\n                0.010863775,\n                -0.020021517,\n                -0.014330679,\n                -0.021154812,\n                0.010540848,\n                -0.03921439,\n                -0.020216493,\n                -0.022860844,\n                0.035972927,\n                -0.012563716,\n                0.010242292,\n                -0.012612459,\n                0.008889651,\n                0.007993984,\n                0.02293396,\n                0.0036740643,\n                -0.020764861,\n                0.016304802,\n                0.006482926,\n                0.018632319,\n                0.0036801572,\n                -0.029733721,\n                0.007677149,\n                0.019765614,\n                -0.002348842,\n                0.020204308,\n                0.012563716,\n                -0.015390856,\n                0.018510459,\n                -0.0008195052,\n                0.0057852804,\n                0.0070922235,\n                0.0068728765,\n                0.043650076,\n                0.006964271,\n                0.004109712,\n                -0.021483831,\n                -0.016475406,\n                -0.049669936,\n                0.01832767,\n                -0.018985711,\n                -0.02227592,\n                0.016682567,\n                -0.003035825,\n                -0.019071013,\n                0.012709947,\n                -0.022678055,\n                -0.0018202765,\n                -0.022288105,\n                -0.05005989,\n                0.0015719876,\n                -0.009407554,\n                -0.031293523,\n                -0.017559955,\n                0.0032658349,\n                -0.023470141,\n                -0.0001422329,\n                -0.03048925,\n                0.0016085455,\n                -0.021410717,\n                0.011716792,\n                0.043918166,\n                0.04218776,\n                -0.036801573,\n                0.013940728,\n                -0.016597265,\n                0.037313383,\n                -0.008097565,\n                0.019558452,\n                0.018023022,\n                -0.0070922235,\n                0.045551084,\n                0.0035126004,\n                -0.017864604,\n                -0.03560735,\n                -0.030757342,\n                -0.050401095,\n                -0.010735823,\n                -0.010449453,\n                -0.00829254,\n                0.017511211,\n                0.03780082,\n                -0.016012339,\n                -0.01363608,\n                0.0025453405,\n                -0.03161036,\n                0.0006469978,\n                0.043381985,\n                -0.017194377,\n                -0.003366369,\n                -0.0054501668,\n                -0.022799915,\n                -0.025005572,\n                0.04238274,\n                0.0411154,\n                -0.021288857,\n                0.040969167,\n                -0.0058797216,\n                -0.013721381,\n                0.000068545975,\n                0.017218748,\n                -0.006300137,\n                0.047086515,\n                -0.025054315,\n                -0.0046123825,\n                0.026321655,\n                0.021118253,\n                0.01965594,\n                0.03270709,\n                0.020253051,\n                0.012064092,\n                0.016207315,\n                -0.00040442124,\n                -0.009230858,\n                -0.006805854,\n                0.003378555,\n                -0.013148641,\n                0.0013937681,\n                -0.0027875362,\n                0.047622696,\n                -0.023884464,\n                0.018815108,\n                0.0033694154,\n                -0.022020014,\n                -0.00048972294,\n                0.012405299,\n                -0.0051881685,\n                0.0017349748,\n                0.014598769,\n                -0.005316121,\n                0.0038812254,\n                -0.01408696,\n                0.018230183,\n                0.03921439,\n                0.009450205,\n                0.032097794,\n                0.022982704,\n                -0.0095416,\n                -0.0029231051,\n                -0.008572817,\n                -0.002391493,\n                -0.01408696,\n                -0.001345786,\n                0.0049871006,\n                -0.00527347,\n                -0.0346081,\n                -0.023287352,\n                0.004109712,\n                -0.0027692574,\n                0.020898907,\n                0.0005525567,\n                -0.018437345,\n                -0.0015719876,\n                -0.0001145289,\n                -0.00692162,\n                -0.0034486242,\n                0.016694752,\n                -0.0075796614,\n                -0.032000307,\n                -0.010967356,\n                0.017718373,\n                0.01294148,\n                0.021630064,\n                0.052887026,\n                -0.0034486242,\n                0.00929788,\n                0.018949155,\n                -0.01408696,\n                0.0017867651,\n                -0.012234695,\n                0.021532577,\n                0.056835275,\n                -0.016024526,\n                -0.016658194,\n                0.0043260125,\n                -0.006495112,\n                -0.004959682,\n                0.0049749147,\n                0.010327593,\n                -0.027004067,\n                0.026979696,\n                -0.032292772,\n                0.03397443,\n                -0.0014432736,\n                -0.0162195,\n                -0.008042728,\n                -0.004414361,\n                -0.013038968,\n                -0.038605094,\n                -0.012795249,\n                -0.024128184,\n                -0.012649017,\n                -0.0049444498,\n                0.027491506,\n                -0.0074090585,\n                -0.005791373,\n                0.021605691,\n                -0.020399282,\n                0.032512117,\n                0.03524177,\n                0.027394019,\n                -0.022397779,\n                0.012137207,\n                0.056445327\n            ]\n        }\n    ],\n    \"model\": \"text-embedding-3-small\",\n    \"usage\": {\n        \"prompt_tokens\": 11,\n        \"total_tokens\": 11\n    }\n}"
								}
							]
						}
					],
					"description": "Large Language Models (LLMs) like ChatGPT are trained on massive datasets to produce human-like responses. However, when tasked with providing specific information on a niche dataset, such as FAQs for a product or service, these models can sometimes generate incorrect responses, known as \"hallucinations.\" We can try to mitigate this by stuffing our niche information in the prompt. But it's impractical to overload the prompt with extensive details due to potential cost and inefficiency.\n\nUsing OpenAI's Embeddings API, we can encode textual data into numerical vectors known as embeddings. These embeddings capture semantic similarities between texts. By comparing these embeddings, we can effectively match user queries with the relevant data in our knowledge base and use only the corresponding data in our prompt. \n\n# Technical Background: Understanding Embeddings\nIn natural language processing (NLP), embeddings are a sophisticated method for representing text data. An embedding translates words, phrases, or entire documents into dense vectors of numerical values. These vectors, typically high-dimensional, capture the semantic and syntactic relationships between different pieces of text. Unlike simple keyword matching, embeddings understand the contextual meanings of words, allowing for more accurate and relevant text analysis.\nEmbeddings are generated through models trained on vast amounts of text data. During this training process, the model learns to map semantically similar phrases to proximate points in the embedding space. For instance, \"bank account\" and \"savings account\" would be closer in the embedding space than \"bank account\" and \"river bank,\" despite the shared word \"bank.\"\n\n## Step 1: Embed FAQ Data\nEmbed a batch of FAQ entries to the Embeddings API, which returns a numerical representation for each piece of text. These embeddings should be stored in a database with their corresponding FAQ entries for later retrieval.\n\n\n## Step 2: Embed User Query\nWe can process a user's query (\"What forms of payment are accepted?\") by converting it into an embedding. This embedding can then be compared to those generated from the FAQ data to identify the most relevant response.\n\n\n# Step 3 Using Embeddings for Semantic Search \nOnce the embeddings are created, the next step (not shown in this collection) involves comparing the embedding of the user's query with the stored FAQ embeddings using a similarity measure like cosine similarity. This comparison helps determine which FAQ answer is most semantically similar to the user's question. We can then use the FAQ answer to return to the user, or we can add it to our prompt tp ChatGPT to return a more relevant and accurate answer. "
				}
			],
			"description": "This folder highlights some practical workflows using OpenAI APIs, showcasing:\n\n- Text generation from a prompt, as you might using ChatGPT\n    \n- Text generation using function calling to connect language models to external data and systems\n    \n- How to use the Embeddings API to build a simple FAQ system\n    \n\n[](https://platform.openai.com/docs/quickstart/next-steps)"
		},
		{
			"name": "OpenAI API Capabilities",
			"item": [
				{
					"name": "Chat Completions",
					"item": [
						{
							"name": "Reasoning",
							"item": [
								{
									"name": "Chat Completions - Reasoning o1-mini",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let messages = [",
													"      {",
													"        \"role\": \"user\",",
													"        \"content\": \"What are three compounds we should consider investigating to advance research into new antibiotics? Why should we consider them?\"",
													"      }",
													"    ];",
													"",
													"pm.collectionVariables.set('messages', JSON.stringify(messages));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.object).to.exist;",
													"    pm.expect(responseData.created).to.exist;",
													"    pm.expect(responseData.model).to.exist;",
													"    pm.expect(responseData.choices).to.exist;",
													"    pm.expect(responseData.usage).to.exist;",
													"    pm.expect(responseData.system_fingerprint).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Choices array and its elements are valid\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
													"",
													"  responseData.choices.forEach(function(choice) {",
													"    pm.expect(choice).to.be.an('object');",
													"    pm.expect(choice.index).to.exist.and.to.be.a('number');",
													"    pm.expect(choice.message).to.exist.and.to.be.an('object');",
													"    pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
													"    pm.expect(choice.message.content).to.exist.and.to.be.a('string');",
													"    pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Ensure message object within choices has non-empty role and content\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.choices).to.be.an('array');",
													"  pm.expect(responseData.choices).to.have.lengthOf.at.least(1, \"There should be at least one choice\");",
													"",
													"  responseData.choices.forEach(function(choice) {",
													"    pm.expect(choice.message).to.be.an('object');",
													"    pm.expect(choice.message.role).to.exist.and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
													"    pm.expect(choice.message.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens properties\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.usage).to.have.property('prompt_tokens');",
													"  pm.expect(responseData.usage).to.have.property('completion_tokens');",
													"  pm.expect(responseData.usage).to.have.property('total_tokens');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"o1-mini\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										},
										"description": "The o1 models are among the newest models from OpenAI\n\nDue to this you may not be able to run this request **OR** you may need to modify it."
									},
									"response": [
										{
											"name": "Chat Completions - Reasoning o1-mini",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{vault:OpenAIKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"model\": \"o1-mini\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"chat",
														"completions"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 30 Jan 2025 20:07:33 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "access-control-expose-headers",
													"value": "X-Request-ID"
												},
												{
													"key": "openai-organization",
													"value": "postman"
												},
												{
													"key": "openai-processing-ms",
													"value": "6830"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "x-ratelimit-limit-requests",
													"value": "30000"
												},
												{
													"key": "x-ratelimit-limit-tokens",
													"value": "150000000"
												},
												{
													"key": "x-ratelimit-remaining-requests",
													"value": "29999"
												},
												{
													"key": "x-ratelimit-remaining-tokens",
													"value": "149999951"
												},
												{
													"key": "x-ratelimit-reset-requests",
													"value": "2ms"
												},
												{
													"key": "x-ratelimit-reset-tokens",
													"value": "0s"
												},
												{
													"key": "x-request-id",
													"value": "req_8c61f4de9e82fe1fee3f666d3a1dd736"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "90a41697ee7e2f4c-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"chatcmpl-AvV6s5tOWck0HVWFObE90Fv3fcDl0\",\n    \"object\": \"chat.completion\",\n    \"created\": 1738267646,\n    \"model\": \"o1-mini-2024-09-12\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Advancing research into new antibiotics is crucial in the fight against multidrug-resistant (MDR) bacteria. Here are three promising compounds that warrant further investigation:\\n\\n1. **Teixobactin**\\n   - **Description:** Teixobactin is a novel antibiotic discovered in 2015 using the innovative iChip technology, which allows for the cultivation of previously \\\"unculturable\\\" soil bacteria.\\n   - **Why Consider It:**\\n     - **Unique Mechanism of Action:** Teixobactin binds to lipid II and lipid III, essential precursors for cell wall synthesis in Gram-positive bacteria. This mechanism is different from those of existing antibiotics, reducing the likelihood of cross-resistance.\\n     - **Low Resistance Development:** Early studies suggest that resistance to teixobactin is hard to develop, making it a robust candidate against persistent bacterial threats.\\n     - **Broad Spectrum Against Gram-Positive Pathogens:** It has shown efficacy against a range of Gram-positive bacteria, including *Staphylococcus aureus* and *Mycobacterium tuberculosis*.\\n\\n2. **Darobactin**\\n   - **Description:** Darobactin is an antibiotic derived from *Photorhabdus* bacteria, which are symbionts of entomopathogenic nematodes.\\n   - **Why Consider It:**\\n     - **Effective Against Gram-Negative Bacteria:** Darobactin targets the BamA protein, a critical component of the outer membrane in Gram-negative bacteria, a category notoriously difficult to treat due to their inherent resistance mechanisms.\\n     - **Novel Target Site:** By inhibiting BamA, darobactin disrupts the assembly of essential outer membrane proteins, a target not exploited by current antibiotics, thereby providing a new avenue for antibacterial action.\\n     - **Potential Against MDR Pathogens:** It has shown activity against multidrug-resistant strains like *Escherichia coli* and *Klebsiella pneumoniae*.\\n\\n3. **Malacidins**\\n   - **Description:** Malacidins are a class of calcium-dependent antibiotics discovered through metagenomic analysis of soil samples.\\n   - **Why Consider It:**\\n     - **Broad Activity Against Gram-Positive Bacteria:** Malacidins exhibit potent activity against a variety of Gram-positive pathogens, including methicillin-resistant *Staphylococcus aureus* (MRSA) and *Clostridioides difficile*.\\n     - **Mechanism Involving Membrane Disruption:** They target the bacterial cell membrane by binding to lipid II, leading to membrane depolarization and cell death, a mechanism that minimizes the chance of resistance development.\\n     - **Stability and Efficacy:** Malacidins demonstrate stability in various conditions and have shown efficacy in animal models, indicating their potential for therapeutic use.\\n\\n**Conclusion**\\n\\nInvestigating teixobactin, darobactin, and malacidins could significantly advance antibiotic research due to their novel mechanisms of action, effectiveness against resistant and hard-to-treat bacteria, and the reduced likelihood of resistance development. Continued research and development of these compounds may pave the way for new treatments in the ongoing battle against antibiotic-resistant infections.\",\n                \"refusal\": null\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 28,\n        \"completion_tokens\": 968,\n        \"total_tokens\": 996,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 320,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": \"fp_f56e40de61\"\n}"
										}
									]
								},
								{
									"name": "Chat Completions - Reasoning o1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let messages = [",
													"        {",
													"            \"role\": \"developer\",",
													"            \"content\": \"You're a research assistant with knowledge in the medical field. You provide answers that are informative enough but not overly verbose.\"",
													"        },",
													"        {",
													"            \"role\": \"user\",",
													"            \"content\": \"What are three compounds we should consider investigating to advance research into new antibiotics? Why should we consider them?\"",
													"        }",
													"    ];",
													"",
													"pm.collectionVariables.set('messages', JSON.stringify(messages));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.object).to.exist;",
													"    pm.expect(responseData.created).to.exist;",
													"    pm.expect(responseData.model).to.exist;",
													"    pm.expect(responseData.choices).to.exist;",
													"    pm.expect(responseData.usage).to.exist;",
													"    pm.expect(responseData.system_fingerprint).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Choices array and its elements are valid\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
													"",
													"  responseData.choices.forEach(function(choice) {",
													"    pm.expect(choice).to.be.an('object');",
													"    pm.expect(choice.index).to.exist.and.to.be.a('number');",
													"    pm.expect(choice.message).to.exist.and.to.be.an('object');",
													"    pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
													"    pm.expect(choice.message.content).to.exist.and.to.be.a('string');",
													"    pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Ensure message object within choices has non-empty role and content\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.choices).to.be.an('array');",
													"  pm.expect(responseData.choices).to.have.lengthOf.at.least(1, \"There should be at least one choice\");",
													"",
													"  responseData.choices.forEach(function(choice) {",
													"    pm.expect(choice.message).to.be.an('object');",
													"    pm.expect(choice.message.role).to.exist.and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
													"    pm.expect(choice.message.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens properties\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.usage).to.have.property('prompt_tokens');",
													"  pm.expect(responseData.usage).to.have.property('completion_tokens');",
													"  pm.expect(responseData.usage).to.have.property('total_tokens');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"o1\",\n    \"reasoning_effort\": \"low\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										},
										"description": "The o1 models are among the newest models from OpenAI\n\nDue to this you may not be able to run this request **OR** you may need to modify it."
									},
									"response": [
										{
											"name": "Chat Completions - Reasoning o1",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{vault:OpenAIKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"model\": \"o1\",\n    \"reasoning_effort\": \"low\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"chat",
														"completions"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Mon, 03 Feb 2025 17:07:55 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "access-control-expose-headers",
													"value": "X-Request-ID"
												},
												{
													"key": "openai-organization",
													"value": "postman"
												},
												{
													"key": "openai-processing-ms",
													"value": "7436"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "x-ratelimit-limit-requests",
													"value": "1000"
												},
												{
													"key": "x-ratelimit-limit-tokens",
													"value": "30000000"
												},
												{
													"key": "x-ratelimit-remaining-requests",
													"value": "999"
												},
												{
													"key": "x-ratelimit-remaining-tokens",
													"value": "29999916"
												},
												{
													"key": "x-ratelimit-reset-requests",
													"value": "60ms"
												},
												{
													"key": "x-ratelimit-reset-tokens",
													"value": "0s"
												},
												{
													"key": "x-request-id",
													"value": "req_ec9c660d06018acccad526e07fc8040b"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "90c404edc921cb9b-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"chatcmpl-AwuDD48TfZzBuQX62MK2W0xVR1V5E\",\n    \"object\": \"chat.completion\",\n    \"created\": 1738602467,\n    \"model\": \"o1-2024-12-17\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Here are three promising candidates for further exploration in antibiotic research, along with why they merit attention:\\n\\n1. Teixobactin:\\n   • Novel Mechanism: Targets multiple steps in bacterial cell-wall synthesis, which may help reduce resistance development.  \\n   • Broad-Spectrum Activity: Has shown efficacy against various Gram-positive pathogens, including multidrug-resistant strains.\\n\\n2. Malacidins:\\n   • Unique Origin: Discovered in soil-dwelling microorganisms; environmental screening can reveal new structures or modes of action.  \\n   • Disruption of Cell-Wall Processes: Like teixobactin, malacidins bind to important components of the bacterial cell envelope, crucial for bacterial survival.\\n\\n3. Odilorhabdins:\\n   • Novel Ribosomal Targeting: Bind to the small ribosomal subunit at a unique site, interfering with protein synthesis.  \\n   • Potential for Reduced Cross-Resistance: Because they attach to an uncommon site, bacteria may find it more difficult to develop resistance compared to older ribosome-targeting antibiotics.\\n\\nInvestigating these compounds might yield new classes of antibiotics that circumvent existing resistance mechanisms and improve treatment options for drug-resistant infections.\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 54,\n        \"completion_tokens\": 499,\n        \"total_tokens\": 553,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 256,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": \"fp_d91c966719\"\n}"
										}
									]
								},
								{
									"name": "Chat Completions - Reasoning o3-mini",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let messages = [",
													"        {",
													"            \"role\": \"developer\",",
													"            \"content\": \"You're a coding assistant that excels in writing clear and well documented code.\"",
													"        },",
													"        {",
													"            \"role\": \"user\",",
													"            \"content\": \"Write a bash script that takes a matrix represented as a string with format \\\"[1,2],[3,4],[5,6]\\\" and prints the transpose in the same format.\"",
													"        }",
													"    ];",
													"",
													"pm.collectionVariables.set('messages', JSON.stringify(messages));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.object).to.exist;",
													"    pm.expect(responseData.created).to.exist;",
													"    pm.expect(responseData.model).to.exist;",
													"    pm.expect(responseData.choices).to.exist;",
													"    pm.expect(responseData.usage).to.exist;",
													"    pm.expect(responseData.system_fingerprint).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Choices array and its elements are valid\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
													"",
													"  responseData.choices.forEach(function(choice) {",
													"    pm.expect(choice).to.be.an('object');",
													"    pm.expect(choice.index).to.exist.and.to.be.a('number');",
													"    pm.expect(choice.message).to.exist.and.to.be.an('object');",
													"    pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
													"    pm.expect(choice.message.content).to.exist.and.to.be.a('string');",
													"    pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Ensure message object within choices has non-empty role and content\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.choices).to.be.an('array');",
													"  pm.expect(responseData.choices).to.have.lengthOf.at.least(1, \"There should be at least one choice\");",
													"",
													"  responseData.choices.forEach(function(choice) {",
													"    pm.expect(choice.message).to.be.an('object');",
													"    pm.expect(choice.message.role).to.exist.and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
													"    pm.expect(choice.message.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens properties\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.usage).to.have.property('prompt_tokens');",
													"  pm.expect(responseData.usage).to.have.property('completion_tokens');",
													"  pm.expect(responseData.usage).to.have.property('total_tokens');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"o3-mini\",\n    \"reasoning_effort\": \"medium\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										},
										"description": "The o1 models are among the newest models from OpenAI\n\nDue to this you may not be able to run this request **OR** you may need to modify it."
									},
									"response": [
										{
											"name": "Chat Completions - Reasoning o3-mini",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{vault:OpenAIKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"model\": \"o3-mini\",\n    \"reasoning_effort\": \"medium\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"chat",
														"completions"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Mon, 03 Feb 2025 16:58:10 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "access-control-expose-headers",
													"value": "X-Request-ID"
												},
												{
													"key": "openai-organization",
													"value": "postman"
												},
												{
													"key": "openai-processing-ms",
													"value": "13539"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "x-ratelimit-limit-requests",
													"value": "30000"
												},
												{
													"key": "x-ratelimit-limit-tokens",
													"value": "150000000"
												},
												{
													"key": "x-ratelimit-remaining-requests",
													"value": "29999"
												},
												{
													"key": "x-ratelimit-remaining-tokens",
													"value": "149999927"
												},
												{
													"key": "x-ratelimit-reset-requests",
													"value": "2ms"
												},
												{
													"key": "x-ratelimit-reset-tokens",
													"value": "0s"
												},
												{
													"key": "x-request-id",
													"value": "req_fe9037b31dbff5da8a8a77614586a06a"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "cf-cache-status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "90c3f6803d77cb9b-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"chatcmpl-Awu3gZdwKd6DaRlJqa5VLW1ezaIo4\",\n    \"object\": \"chat.completion\",\n    \"created\": 1738601876,\n    \"model\": \"o3-mini-2025-01-31\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Below is one acceptable solution. This bash script:\\n\\n• Takes a single command‐line argument that is the matrix as a string in the format \\\"[1,2],[3,4],[5,6]\\\".\\n\\n• Uses sed to “strip off” the outer brackets and to break the rows apart.\\n\\n• Then splits each row into its comma‐separated values.\\n\\n• Finally, it computes the transpose and prints it in the same format.\\n\\nYou can save the code to (for example) transpose.sh and then run it with the input string.\\n\\n--------------------------------------------------\\n#!/bin/bash\\n#\\n# This script takes a matrix represented as a string, e.g.:\\n#   \\\"[1,2],[3,4],[5,6]\\\"\\n# and prints its transpose in the same format.\\n#\\n# Usage:\\n#   ./transpose.sh \\\"[1,2],[3,4],[5,6]\\\"\\n#\\n\\n# Fail if no argument is provided.\\nif [ \\\"$#\\\" -ne 1 ]; then\\n    echo \\\"Usage: $0 \\\\\\\"[1,2],[3,4],[5,6]\\\\\\\"\\\"\\n    exit 1\\nfi\\n\\ninput=\\\"$1\\\"\\n\\n# Remove the leading \\\"[\\\" and trailing \\\"]\\\" then replace \\\"],[\\\"\\n# with a space. For example, \\\"[1,2],[3,4],[5,6]\\\" becomes \\n# \\\"1,2 3,4 5,6\\\"\\nrows_str=$(echo \\\"$input\\\" | sed 's/^\\\\[//; s/\\\\]$//; s/\\\\],\\\\[/ /g')\\n\\n# Split the rows on whitespace into an array.\\nread -r -a rows <<< \\\"$rows_str\\\"\\nnum_rows=${#rows[@]}\\n\\n# Determine the number of columns by splitting the first row\\nIFS=',' read -r -a first_row_arr <<< \\\"${rows[0]}\\\"\\nnum_cols=${#first_row_arr[@]}\\n\\n# Create an array to accumulate the transposed rows.\\ndeclare -a transpose\\n\\n# For each column index, go through each row and build the transposed row.\\nfor (( col=0; col<num_cols; col++ )); do\\n    # Start building a string for the current transposed row.\\n    trans_row=\\\"\\\"\\n    for (( row=0; row<num_rows; row++ )); do\\n        # Split the current row into elements.\\n        IFS=',' read -r -a elems <<< \\\"${rows[row]}\\\"\\n        trans_row+=\\\"${elems[col]}\\\"\\n        # Append a comma unless this is the last element in this row.\\n        if [ $row -lt $((num_rows - 1)) ]; then\\n            trans_row+=\\\",\\\"\\n        fi\\n    done\\n    # Add square brackets around the transposed row and save.\\n    transpose+=(\\\"[$trans_row]\\\")\\ndone\\n\\n# Join the transposed rows with commas. (The IFS join trick.)\\n(IFS=,; echo \\\"${transpose[*]}\\\")\\n\\n# End of script\\n\\n--------------------------------------------------\\n\\nExplanation:\\n\\n1. The sed command:\\n   • s/^\\\\[// removes the first “[”\\n   • s/\\\\]$// removes the last “]”\\n   • s/\\\\],\\\\[/ /g replaces each “],[” with a space, so that we can use bash word splitting to obtain each row.\\n\\n2. We then split each row using IFS=',' and compute the number of rows and columns.\\n\\n3. The nested for‐loops build each transposed row by iterating over the original rows for each column.\\n\\n4. Finally, the transposed rows are joined (using IFS set to a comma) and printed.\\n\\nWhen you run, for example:\\n\\n  ./transpose.sh \\\"[1,2],[3,4],[5,6]\\\"\\n\\nThe output will be:\\n\\n  [1,3,5],[2,4,6]\\n\\nAny solution that meets the specification is correct.\",\n                \"refusal\": null\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 60,\n        \"completion_tokens\": 2548,\n        \"total_tokens\": 2608,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 1536,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": \"fp_8bcaa0ca21\"\n}"
										}
									]
								}
							],
							"description": "Explore advanced [reasoning](https://platform.openai.com/docs/guides/reasoning) and problem-solving models. **OpenAI o1** series models are new large language models trained with reinforcement learning to perform complex reasoning. o1 models [think before they answer](https://openai.com/index/introducing-openai-o1-preview/), producing a long internal chain of thought before responding to the user. o1 models excel in scientific reasoning, ranking in the 89th percentile on competitive programming questions (Codeforces), placing among the top 500 students in the US in a qualifier for the USA Math Olympiad (AIME), and exceeding human PhD-level accuracy on a benchmark of physics, biology, and chemistry problems (GPQA).\n\nThere are two reasoning models available in the API:\n\n1. `o1`: designed to reason about hard problems using broad general knowledge about the world.\n    \n2. `o1-mini`: a faster and more affordable version of o1, particularly adept at coding, math, and science tasks where extensive general knowledge isn't required.\n    \n3. `o3-mini`: a small reasoning model providing high intelligence at the same cost and latency targets of o1-mini (and therfore recommended over o1-mini). o3-mini also supports key developer features, like [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs), [function calling](https://platform.openai.com/docs/guides/function-calling), [Batch API](https://platform.openai.com/docs/guides/batch), and more."
						},
						{
							"name": "Chat Completions - Text generation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let messages = [",
											"      {",
											"        \"role\": \"developer\",",
											"        \"content\": \"You are a helpful assistant.\"",
											"      },",
											"      {",
											"        \"role\": \"user\",",
											"        \"content\": \"Who won the world series in 2020?\"",
											"      },",
											"      {",
											"        \"role\": \"assistant\",",
											"        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"",
											"      },",
											"      {",
											"        \"role\": \"user\",",
											"        \"content\": \"Where was it played?\"",
											"      }",
											"    ];",
											"",
											"pm.collectionVariables.set('messages', JSON.stringify(messages));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.object).to.exist;",
											"    pm.expect(responseData.created).to.exist;",
											"    pm.expect(responseData.model).to.exist;",
											"    pm.expect(responseData.choices).to.exist;",
											"    pm.expect(responseData.usage).to.exist;",
											"    pm.expect(responseData.system_fingerprint).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Choices array and its elements are valid\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
											"",
											"  responseData.choices.forEach(function(choice) {",
											"    pm.expect(choice).to.be.an('object');",
											"    pm.expect(choice.index).to.exist.and.to.be.a('number');",
											"    pm.expect(choice.message).to.exist.and.to.be.an('object');",
											"    pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
											"    pm.expect(choice.message.content).to.exist.and.to.be.a('string');",
											"    pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Ensure message object within choices has non-empty role and content\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.choices).to.be.an('array');",
											"  pm.expect(responseData.choices).to.have.lengthOf.at.least(1, \"There should be at least one choice\");",
											"",
											"  responseData.choices.forEach(function(choice) {",
											"    pm.expect(choice.message).to.be.an('object');",
											"    pm.expect(choice.message.role).to.exist.and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
											"    pm.expect(choice.message.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens properties\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.usage).to.have.property('prompt_tokens');",
											"  pm.expect(responseData.usage).to.have.property('completion_tokens');",
											"  pm.expect(responseData.usage).to.have.property('total_tokens');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"chat",
										"completions"
									]
								}
							},
							"response": [
								{
									"name": "Chat Completions - Text generation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": {{messages}} //see Pre-request script\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 30 Jan 2025 20:11:56 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "access-control-expose-headers",
											"value": "X-Request-ID"
										},
										{
											"key": "openai-organization",
											"value": "postman"
										},
										{
											"key": "openai-processing-ms",
											"value": "1785"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "10000"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "30000000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "9999"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "29999946"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "6ms"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "0s"
										},
										{
											"key": "x-request-id",
											"value": "req_29a1c019bc58d9727511462f05f727e1"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "cf-cache-status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "90a41d1f6a222f4c-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"chatcmpl-AvVBC7rAqHbrEvVbJVyNQ9PdqM3dk\",\n    \"object\": \"chat.completion\",\n    \"created\": 1738267914,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"The 2020 World Series was held at Globe Life Field in Arlington, Texas. This was part of a decision to use a neutral site due to the COVID-19 pandemic.\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 53,\n        \"completion_tokens\": 37,\n        \"total_tokens\": 90,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": \"fp_4691090a87\"\n}"
								}
							]
						}
					],
					"description": "# Text generation\n\nOpenAI provides simple APIs to use a [large language model](https://platform.openai.com/docs/models) to generate text from a prompt, as you might using [ChatGPT](https://chatgpt.com/). These models have been trained on vast quantities of data to understand multimedia inputs and natural language instructions. From these [prompts](https://platform.openai.com/docs/guides/prompt-engineering), models can generate almost any kind of text response, like code, mathematical equations, structured JSON data, or human-like prose.\n\nUsing OpenAI's text generation models, you can build applications to:\n\n- Draft documents\n    \n- Write computer code\n    \n- Answer questions about a knowledge base\n    \n- Analyze texts\n    \n- Give software a natural language interface\n    \n- Tutor in a range of subjects\n    \n- Translate languages\n    \n- Simulate characters for games\n    \n\n---\n\nTo use one of these models via the OpenAI API, you’ll send a request to the Chat Completions API containing the inputs and your API key, and receive a response containing the model’s output.\n\nYou can experiment with various models in the [chat playground](https://platform.openai.com/playground?mode=chat). If you’re not sure which model to use then try `gpt-4o` if you need high intelligence or `gpt-3.5-turbo` if you need the fastest speed and lowest cost.\n\n[](https://platform.openai.com/docs/guides/text-generation/chat-completions-api)\n\n## [Chat Completions API](https://platform.openai.com/docs/guides/text-generation/chat-completions-api)\n\nChat models take a list of messages as input and return a model-generated message as output. Although the chat format is designed to make multi-turn conversations easy, it’s just as useful for single-turn tasks without any conversation."
				},
				{
					"name": "Structured Outputs",
					"item": [
						{
							"name": "Chat Completions - Text generation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.object).to.exist;",
											"    pm.expect(responseData.created).to.exist;",
											"    pm.expect(responseData.model).to.exist;",
											"    pm.expect(responseData.choices).to.exist;",
											"    pm.expect(responseData.usage).to.exist;",
											"    pm.expect(responseData.system_fingerprint).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Choices array and its elements are valid\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
											"",
											"  responseData.choices.forEach(function(choice) {",
											"    pm.expect(choice).to.be.an('object');",
											"    pm.expect(choice.index).to.exist.and.to.be.a('number');",
											"    pm.expect(choice.message).to.exist.and.to.be.an('object');",
											"    pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
											"    pm.expect(choice.message.content).to.exist.and.to.be.a('string');",
											"    pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Ensure message object within choices has non-empty role and content\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.choices).to.be.an('array');",
											"  pm.expect(responseData.choices).to.have.lengthOf.at.least(1, \"There should be at least one choice\");",
											"",
											"  responseData.choices.forEach(function(choice) {",
											"    pm.expect(choice.message).to.be.an('object');",
											"    pm.expect(choice.message.role).to.exist.and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
											"    pm.expect(choice.message.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens properties\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.usage).to.have.property('prompt_tokens');",
											"  pm.expect(responseData.usage).to.have.property('completion_tokens');",
											"  pm.expect(responseData.usage).to.have.property('total_tokens');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": [\n      {\n        \"role\": \"developer\",\n        \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"how can I solve 8x + 7 = -23\"\n      }\n    ],\n    \"response_format\": {\n      \"type\": \"json_schema\",\n      \"json_schema\": {\n        \"name\": \"math_reasoning\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"steps\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"explanation\": { \"type\": \"string\" },\n                  \"output\": { \"type\": \"string\" }\n                },\n                \"required\": [\"explanation\", \"output\"],\n                \"additionalProperties\": false\n              }\n            },\n            \"final_answer\": { \"type\": \"string\" }\n          },\n          \"required\": [\"steps\", \"final_answer\"],\n          \"additionalProperties\": false\n        },\n        \"strict\": true\n      }\n    }\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "completions",
									"host": [
										"completions"
									]
								}
							},
							"response": [
								{
									"name": "Chat Completions - Text generation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": [\n      {\n        \"role\": \"developer\",\n        \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"how can I solve 8x + 7 = -23\"\n      }\n    ],\n    \"response_format\": {\n      \"type\": \"json_schema\",\n      \"json_schema\": {\n        \"name\": \"math_reasoning\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"steps\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"explanation\": { \"type\": \"string\" },\n                  \"output\": { \"type\": \"string\" }\n                },\n                \"required\": [\"explanation\", \"output\"],\n                \"additionalProperties\": false\n              }\n            },\n            \"final_answer\": { \"type\": \"string\" }\n          },\n          \"required\": [\"steps\", \"final_answer\"],\n          \"additionalProperties\": false\n        },\n        \"strict\": true\n      }\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 22:51:03 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "access-control-expose-headers",
											"value": "X-Request-ID"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "openai-processing-ms",
											"value": "4590"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "500"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "30000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "499"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "29955"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "120ms"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "90ms"
										},
										{
											"key": "x-request-id",
											"value": "req_213b1a47a6f0fa705930873ad836fca1"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Set-Cookie",
											"value": "__cf_bm=T.ZbUxzvACzNYEOfrtJ19BS5YgnyZOunz_yeqcWoJiE-1736463063-1.0.1.1-E0LbcrgHUZ6jYq90ns89rrAVRJeFRHex7H6llg_NGYZYICOjmncpVTR.K3vf7rL_wIPJMUYfyHywnenRIU43Eg; path=/; expires=Thu, 09-Jan-25 23:21:03 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff7fd4768a1091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"chatcmpl-Anveduo1eSWsznRXf2n7dCT4RTHu1\",\n    \"object\": \"chat.completion\",\n    \"created\": 1736463059,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"{\\\"steps\\\":[{\\\"explanation\\\":\\\"We start with the equation 8x + 7 = -23. Our goal is to isolate the variable x.\\\",\\\"output\\\":\\\"8x + 7 = -23\\\"},{\\\"explanation\\\":\\\"First, we need to get rid of the constant term on the left side of the equation. We do this by subtracting 7 from both sides of the equation.\\\",\\\"output\\\":\\\"8x + 7 - 7 = -23 - 7\\\"},{\\\"explanation\\\":\\\"Simplifying both sides, we get 8x = -30.\\\",\\\"output\\\":\\\"8x = -30\\\"},{\\\"explanation\\\":\\\"The next step is to isolate x by dividing both sides of the equation by 8, since 8 is multiplied by x.\\\",\\\"output\\\":\\\"8x / 8 = -30 / 8\\\"},{\\\"explanation\\\":\\\"After dividing both sides by 8, we simplify the right side of the equation. -30/8 simplifies to -3.75 or as a fraction -15/4.\\\",\\\"output\\\":\\\"x = -3.75 or x = -15/4\\\"}],\\\"final_answer\\\":\\\"x = -3.75 or x = -15/4\\\"}\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 100,\n        \"completion_tokens\": 238,\n        \"total_tokens\": 338,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"system_fingerprint\": \"fp_703d4ff298\"\n}"
								}
							]
						}
					],
					"description": "JSON is one of the most widely used formats in the world for applications to exchange data.\n\n[Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs) is a feature that ensures the model will always generate responses that adhere to your supplied [JSON Schema](https://json-schema.org/overview/what-is-jsonschema), so you don't need to worry about the model omitting a required key, or hallucinating an invalid enum value."
				},
				{
					"name": "Predicted Outputs",
					"item": [
						{
							"name": "Chat Completions - Text generation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.object).to.exist;",
											"    pm.expect(responseData.created).to.exist;",
											"    pm.expect(responseData.model).to.exist;",
											"    pm.expect(responseData.choices).to.exist;",
											"    pm.expect(responseData.usage).to.exist;",
											"    pm.expect(responseData.system_fingerprint).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Choices array and its elements are valid\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.choices).to.be.an('array').that.is.not.empty;",
											"",
											"  responseData.choices.forEach(function(choice) {",
											"    pm.expect(choice).to.be.an('object');",
											"    pm.expect(choice.index).to.exist.and.to.be.a('number');",
											"    pm.expect(choice.message).to.exist.and.to.be.an('object');",
											"    pm.expect(choice.message.role).to.exist.and.to.be.a('string');",
											"    pm.expect(choice.message.content).to.exist.and.to.be.a('string');",
											"    pm.expect(choice.finish_reason).to.exist.and.to.be.a('string');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Ensure message object within choices has non-empty role and content\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.choices).to.be.an('array');",
											"  pm.expect(responseData.choices).to.have.lengthOf.at.least(1, \"There should be at least one choice\");",
											"",
											"  responseData.choices.forEach(function(choice) {",
											"    pm.expect(choice.message).to.be.an('object');",
											"    pm.expect(choice.message.role).to.exist.and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
											"    pm.expect(choice.message.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens properties\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.usage).to.have.property('prompt_tokens');",
											"  pm.expect(responseData.usage).to.have.property('completion_tokens');",
											"  pm.expect(responseData.usage).to.have.property('total_tokens');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{vault:OpenAIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Replace the username property with an email property. Respond only with code, and with no markdown formatting.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"class User { firstName: string = \\\"\\\"; lastName: string = \\\"\\\"; username: string = \\\"\\\"; }\"\n        }\n    ],\n    \"prediction\": {\n        \"type\": \"content\",\n        \"content\": \"class User { firstName: string = \\\"\\\"; lastName: string = \\\"\\\"; email: string = \\\"\\\"; }\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"chat",
										"completions"
									]
								}
							},
							"response": [
								{
									"name": "Chat Completions - Text generation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{vault:OpenAIKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Replace the username property with an email property. Respond only with code, and with no markdown formatting.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"class User { firstName: string = \\\"\\\"; lastName: string = \\\"\\\"; username: string = \\\"\\\"; }\"\n        }\n    ],\n    \"prediction\": {\n        \"type\": \"content\",\n        \"content\": \"class User { firstName: string = \\\"\\\"; lastName: string = \\\"\\\"; email: string = \\\"\\\"; }\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/chat/completions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"chat",
												"completions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 23:02:02 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "access-control-expose-headers",
											"value": "X-Request-ID"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "openai-processing-ms",
											"value": "1039"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "x-ratelimit-limit-requests",
											"value": "500"
										},
										{
											"key": "x-ratelimit-limit-tokens",
											"value": "30000"
										},
										{
											"key": "x-ratelimit-remaining-requests",
											"value": "499"
										},
										{
											"key": "x-ratelimit-remaining-tokens",
											"value": "29933"
										},
										{
											"key": "x-ratelimit-reset-requests",
											"value": "120ms"
										},
										{
											"key": "x-ratelimit-reset-tokens",
											"value": "134ms"
										},
										{
											"key": "x-request-id",
											"value": "req_13d810aca8482b012e1e74093f681d39"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff80d731ffb091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"chatcmpl-AnvpJmWMTaQRmLgaP8hhTa1yOgL34\",\n    \"object\": \"chat.completion\",\n    \"created\": 1736463721,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"class User { firstName: string = \\\"\\\"; lastName: string = \\\"\\\"; email: string = \\\"\\\"; }\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 52,\n        \"completion_tokens\": 22,\n        \"total_tokens\": 74,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 21,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"system_fingerprint\": \"fp_703d4ff298\"\n}"
								}
							]
						}
					],
					"description": "[Predicted Outputs](https://platform.openai.com/docs/guides/predicted-outputs) enable you to speed up API responses from [Chat Completions](https://platform.openai.com/docs/api-reference/chat/create) when many of the output tokens are known ahead of time. This is most common when you are regenerating a text or code file with minor modifications."
				},
				{
					"name": "Embeddings",
					"item": [
						{
							"name": "Embeddings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('object');",
											"  pm.expect(responseData).to.have.property('data');",
											"  pm.expect(responseData).to.have.property('model');",
											"  pm.expect(responseData).to.have.property('usage');",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the data array - object, index, and embedding\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item.object).to.exist.and.to.be.a('string');",
											"        pm.expect(item.index).to.exist.and.to.be.a('number');",
											"        pm.expect(item.embedding).to.exist.and.to.be.an('array');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let input = [",
											"    \"You can pay using credit card, PayPal, or bank transfer.\",",
											"    \"You can reset your password by clicking 'Forgot password?' at the login screen.\",",
											"    \"You may return products within 30 days for a full refund.\",",
											"    \"Track your order by logging into your account and visiting the order history page.\"",
											"];",
											"",
											"let userInput = pm.collectionVariables.get('inputString'); ",
											"if(userInput == null || userInput == \"undefined\"){",
											"    userInput = input;",
											"    pm.collectionVariables.set('inputString', userInput);",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"{{inputString}}\",\n    \"model\": \"{{embeddingModel}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"embeddings"
									]
								}
							},
							"response": []
						}
					],
					"description": "OpenAI’s text [embeddings](https://platform.openai.com/docs/guides/embeddings) measure the relatedness of text strings. Embeddings are commonly used for:\n\n- **Search** (where results are ranked by relevance to a query string)\n    \n- **Clustering** (where text strings are grouped by similarity)\n    \n- **Recommendations** (where items with related text strings are recommended)\n    \n- **Anomaly detection** (where outliers with little relatedness are identified)\n    \n- **Diversity measurement** (where similarity distributions are analyzed)\n    \n- **Classification** (where text strings are classified by their most similar label)\n    \n\nAn embedding is a vector (list) of floating point numbers. The [distance](https://platform.openai.com/docs/guides/embeddings#which-distance-function-should-i-use) between two vectors measures their relatedness. Small distances suggest high relatedness and large distances suggest low relatedness."
				},
				{
					"name": "Fine Tuning",
					"item": [
						{
							"name": "Upload Training File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Stores the fileId in a collection level variable",
											"var fileId = pm.response.json().id;",
											"pm.collectionVariables.set(\"fileId\", fileId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "purpose",
											"value": "fine-tune",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "fine_tune.jsonl"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files"
									]
								}
							},
							"response": [
								{
									"name": "Upload Training File",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "purpose",
													"value": "fine-tune",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "fine_tune.jsonl"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"files"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 19:09:07 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_659fd1da08f7b4f997b3987be6f0bf29"
										},
										{
											"key": "openai-processing-ms",
											"value": "671"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fee7ae84b372ee7-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"file\",\n    \"id\": \"file-TeqYRSFVGZ3x7czq4seS8P\",\n    \"purpose\": \"fine-tune\",\n    \"filename\": \"fine_tune.jsonl\",\n    \"bytes\": 4919,\n    \"created_at\": 1736363347,\n    \"status\": \"processed\",\n    \"status_details\": null\n}"
								}
							]
						},
						{
							"name": "Create Fine Tuning Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Stores the fileId in a collection level variable",
											"var tuningJobId = pm.response.json().id;",
											"pm.collectionVariables.set(\"tuningJobId\", tuningJobId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"training_file\": \"{{fileId}}\",\n    \"model\": \"gpt-3.5-turbo\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"fine_tuning",
										"jobs"
									]
								}
							},
							"response": [
								{
									"name": "Create Fine Tuning Job",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"training_file\": \"{{fileId}}\",\n    \"model\": \"gpt-3.5-turbo\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"fine_tuning",
												"jobs"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 19:30:39 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_7876e3a0c09da4102d2e5271e550e141"
										},
										{
											"key": "openai-processing-ms",
											"value": "1478"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fee9a6dbd127d4a-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"fine_tuning.job\",\n    \"id\": \"ftjob-IU7xzDkE5JFTsJgpevZTDVoB\",\n    \"model\": \"gpt-3.5-turbo-0125\",\n    \"created_at\": 1736364639,\n    \"finished_at\": null,\n    \"fine_tuned_model\": null,\n    \"organization_id\": \"org-krOIFyxVjJBW16QjtMHuoBud\",\n    \"result_files\": [],\n    \"status\": \"validating_files\",\n    \"validation_file\": null,\n    \"training_file\": \"file-XFCsstmgtsF2cEVUfHhKft\",\n    \"hyperparameters\": {\n        \"n_epochs\": \"auto\",\n        \"batch_size\": \"auto\",\n        \"learning_rate_multiplier\": \"auto\"\n    },\n    \"trained_tokens\": null,\n    \"error\": {},\n    \"user_provided_suffix\": null,\n    \"seed\": 1103876586,\n    \"estimated_finish\": null,\n    \"integrations\": [],\n    \"method\": {\n        \"type\": \"supervised\",\n        \"supervised\": {\n            \"hyperparameters\": {\n                \"batch_size\": \"auto\",\n                \"learning_rate_multiplier\": \"auto\",\n                \"n_epochs\": \"auto\"\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Enable Weights and Biases Integration",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"gpt-3.5-turbo-0125\",\n    \"training_file\": \"file-ABC123\",\n    \"validation_file\": \"file-DEF456\",\n    \"integrations\": [\n        {\n            \"type\": \"wandb\",\n            \"wandb\": {\n                \"project\": \"custom-wandb-project\",\n                \"tags\": [\"project:tag\", \"lineage\"]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"fine_tuning",
										"jobs"
									]
								},
								"description": "Weights and Biases (W&B) is a popular tool for tracking machine learning experiments. You can use the OpenAI integration with W&B to track your fine-tuning jobs in W&B. This integration will automatically log metrics, hyperparameters, and other job-related information to the W&B project you specify.\n\nTo integrate your fine-tuning jobs with W&B, you'll need to\n\nProvide authentication credentials for your Weights and Biases account to OpenAI  \nConfigure the W&B integration when creating new fine-tuning jobs"
							},
							"response": []
						},
						{
							"name": "List Fine Tuning Jobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Hyperparameters object contains expected keys\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array').and.not.empty;",
											"    ",
											"    responseData.data.forEach(function(job) {",
											"        pm.expect(job.hyperparameters).to.be.an('object');",
											"        pm.expect(job.hyperparameters).to.include.all.keys('n_epochs', 'batch_size', 'learning_rate_multiplier');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Result files array is present and not empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    ",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.result_files).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Result files array should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs?limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"fine_tuning",
										"jobs"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": [
								{
									"name": "List Fine Tuning Jobs",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs?limit=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"fine_tuning",
												"jobs"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 20:37:11 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_9ae540bab7fcd3b669052d92fa040682"
										},
										{
											"key": "openai-processing-ms",
											"value": "103"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8feefbe9dc262aad-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"fine_tuning.job\",\n            \"id\": \"ftjob-eiI5JPFksQL6EizNw4CbO0rD\",\n            \"model\": \"gpt-3.5-turbo-0125\",\n            \"created_at\": 1736368413,\n            \"finished_at\": null,\n            \"fine_tuned_model\": null,\n            \"organization_id\": \"org-krOIFyxVjJBW16QjtMHuoBud\",\n            \"result_files\": [],\n            \"status\": \"running\",\n            \"validation_file\": null,\n            \"training_file\": \"file-RYuivPHF3ZAvgz7yU8hXHp\",\n            \"hyperparameters\": {\n                \"n_epochs\": 10,\n                \"batch_size\": 1,\n                \"learning_rate_multiplier\": 2\n            },\n            \"trained_tokens\": null,\n            \"error\": {},\n            \"user_provided_suffix\": null,\n            \"seed\": 1840334027,\n            \"estimated_finish\": 1736368727,\n            \"integrations\": [],\n            \"method\": {\n                \"type\": \"supervised\",\n                \"supervised\": {\n                    \"hyperparameters\": {\n                        \"n_epochs\": 10,\n                        \"batch_size\": 1,\n                        \"learning_rate_multiplier\": 2\n                    }\n                }\n            }\n        },\n        {\n            \"object\": \"fine_tuning.job\",\n            \"id\": \"ftjob-pFkb4hyUkGib6mwc1GFR62zk\",\n            \"model\": \"gpt-3.5-turbo-0125\",\n            \"created_at\": 1736366276,\n            \"finished_at\": 1736366626,\n            \"fine_tuned_model\": \"ft:gpt-3.5-turbo-0125:cbrehmpersonal::AnWZIbyK\",\n            \"organization_id\": \"org-krOIFyxVjJBW16QjtMHuoBud\",\n            \"result_files\": [\n                \"file-3iSNBfXyLimKcJxqet8LZ5\"\n            ],\n            \"status\": \"succeeded\",\n            \"validation_file\": null,\n            \"training_file\": \"file-E2ikJZr8MhhMpT8i8cqf6c\",\n            \"hyperparameters\": {\n                \"n_epochs\": 8,\n                \"batch_size\": 1,\n                \"learning_rate_multiplier\": 2\n            },\n            \"trained_tokens\": 4640,\n            \"error\": {},\n            \"user_provided_suffix\": null,\n            \"seed\": 359632737,\n            \"estimated_finish\": null,\n            \"integrations\": [],\n            \"method\": {\n                \"type\": \"supervised\",\n                \"supervised\": {\n                    \"hyperparameters\": {\n                        \"n_epochs\": 8,\n                        \"batch_size\": 1,\n                        \"learning_rate_multiplier\": 2\n                    }\n                }\n            }\n        },\n        {\n            \"object\": \"fine_tuning.job\",\n            \"id\": \"ftjob-LKySkSKaV7xsoJjzctonFRhb\",\n            \"model\": \"gpt-3.5-turbo-0125\",\n            \"created_at\": 1736365938,\n            \"finished_at\": null,\n            \"fine_tuned_model\": null,\n            \"organization_id\": \"org-krOIFyxVjJBW16QjtMHuoBud\",\n            \"result_files\": [],\n            \"status\": \"failed\",\n            \"validation_file\": null,\n            \"training_file\": \"file-5bnJSpMYqvRwY2DpMYLwvM\",\n            \"hyperparameters\": {\n                \"n_epochs\": \"auto\",\n                \"batch_size\": \"auto\",\n                \"learning_rate_multiplier\": \"auto\"\n            },\n            \"trained_tokens\": null,\n            \"error\": {\n                \"code\": \"invalid_n_examples\",\n                \"param\": \"training_file\",\n                \"message\": \"Training file has 3 example(s), but must have at least 10 examples\"\n            },\n            \"user_provided_suffix\": null,\n            \"seed\": 1999341899,\n            \"estimated_finish\": null,\n            \"integrations\": [],\n            \"method\": {\n                \"type\": \"supervised\",\n                \"supervised\": {\n                    \"hyperparameters\": {\n                        \"n_epochs\": \"auto\",\n                        \"batch_size\": \"auto\",\n                        \"learning_rate_multiplier\": \"auto\"\n                    }\n                }\n            }\n        },\n        {\n            \"object\": \"fine_tuning.job\",\n            \"id\": \"ftjob-IU7xzDkE5JFTsJgpevZTDVoB\",\n            \"model\": \"gpt-3.5-turbo-0125\",\n            \"created_at\": 1736364639,\n            \"finished_at\": null,\n            \"fine_tuned_model\": null,\n            \"organization_id\": \"org-krOIFyxVjJBW16QjtMHuoBud\",\n            \"result_files\": [],\n            \"status\": \"failed\",\n            \"validation_file\": null,\n            \"training_file\": \"file-XFCsstmgtsF2cEVUfHhKft\",\n            \"hyperparameters\": {\n                \"n_epochs\": \"auto\",\n                \"batch_size\": \"auto\",\n                \"learning_rate_multiplier\": \"auto\"\n            },\n            \"trained_tokens\": null,\n            \"error\": {\n                \"code\": \"invalid_training_file\",\n                \"param\": \"training_file\",\n                \"message\": \"The job failed due to an invalid training file. Invalid file format. Line 1, message 1: Must be a dictionary with a \\\"role\\\" key\"\n            },\n            \"user_provided_suffix\": null,\n            \"seed\": 1103876586,\n            \"estimated_finish\": null,\n            \"integrations\": [],\n            \"method\": {\n                \"type\": \"supervised\",\n                \"supervised\": {\n                    \"hyperparameters\": {\n                        \"n_epochs\": \"auto\",\n                        \"batch_size\": \"auto\",\n                        \"learning_rate_multiplier\": \"auto\"\n                    }\n                }\n            }\n        }\n    ],\n    \"has_more\": false\n}"
								}
							]
						},
						{
							"name": "List Fine Tuning Events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs/{{tuningJobId}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"fine_tuning",
										"jobs",
										"{{tuningJobId}}",
										"events"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"disabled": true
										},
										{
											"key": "after",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "List Fine Tuning Events",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs/{{tuningJobId}}/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"fine_tuning",
												"jobs",
												"{{tuningJobId}}",
												"events"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 20:39:22 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_427aba125d30f10afec51087fd58b80f"
										},
										{
											"key": "openai-processing-ms",
											"value": "105"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8feeff1d4f222aad-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-R5SFAByHs0UTKn0atwuY76MP\",\n            \"created_at\": 1736368758,\n            \"level\": \"info\",\n            \"message\": \"Step 87/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 87,\n                \"train_loss\": 0.0016487502725794911,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-NPCpJZZonAySWhKZiYgCFNU9\",\n            \"created_at\": 1736368756,\n            \"level\": \"info\",\n            \"message\": \"Step 86/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 86,\n                \"train_loss\": 0.0000028867980290669948,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-dQTbw5FuQzdHmixdN4F5YnlK\",\n            \"created_at\": 1736368756,\n            \"level\": \"info\",\n            \"message\": \"Step 85/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 85,\n                \"train_loss\": 0.00018444466695655137,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-Y33sjCAh6CdfGf7oOPp9iLHn\",\n            \"created_at\": 1736368753,\n            \"level\": \"info\",\n            \"message\": \"Step 84/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 84,\n                \"train_loss\": 0.004326352383941412,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-k5HXv0P8sySk3UX1VYXP7twL\",\n            \"created_at\": 1736368753,\n            \"level\": \"info\",\n            \"message\": \"Step 83/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 83,\n                \"train_loss\": 0.000039971393562154844,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-s1Z7jPvtPxc8aOIKaVA8OcVG\",\n            \"created_at\": 1736368751,\n            \"level\": \"info\",\n            \"message\": \"Step 82/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 82,\n                \"train_loss\": 0.0003723453846760094,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-nCzx7H2vyPXCao9qtXnkSqSj\",\n            \"created_at\": 1736368751,\n            \"level\": \"info\",\n            \"message\": \"Step 81/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 81,\n                \"train_loss\": 0.00070953369140625,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-0nqKJ0TDpEjXn70gGSuGwBBx\",\n            \"created_at\": 1736368748,\n            \"level\": \"info\",\n            \"message\": \"Step 80/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 80,\n                \"train_loss\": 0.000003608497308960068,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-cjvwQqoBcjRQ4QIyKBC0CRc2\",\n            \"created_at\": 1736368745,\n            \"level\": \"info\",\n            \"message\": \"Step 79/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 79,\n                \"train_loss\": 0.000007531581559305778,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-IfDiM7rjfRcvvlnOHlUDxQ0X\",\n            \"created_at\": 1736368745,\n            \"level\": \"info\",\n            \"message\": \"Step 78/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 78,\n                \"train_loss\": 0.0016026496887207031,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-CBxpdq1u2uxLB09wLB6io4mi\",\n            \"created_at\": 1736368743,\n            \"level\": \"info\",\n            \"message\": \"Step 77/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 77,\n                \"train_loss\": 0.0014040947426110506,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-9jamXJHdGFZ9yfXO1Se72Xvc\",\n            \"created_at\": 1736368743,\n            \"level\": \"info\",\n            \"message\": \"Step 76/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 76,\n                \"train_loss\": 0.00010005287185776979,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-vgUJdo47cHJ3k9IlJUaSrFK6\",\n            \"created_at\": 1736368740,\n            \"level\": \"info\",\n            \"message\": \"Step 75/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 75,\n                \"train_loss\": 0.001010894775390625,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-Gds6wOH7mNTv0OdP1BXNEKQS\",\n            \"created_at\": 1736368740,\n            \"level\": \"info\",\n            \"message\": \"Step 74/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 74,\n                \"train_loss\": 0.004356422461569309,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-vLCQBAbxIYJl33CY9Rf3bsvn\",\n            \"created_at\": 1736368738,\n            \"level\": \"info\",\n            \"message\": \"Step 73/100: training loss=0.01\",\n            \"data\": {\n                \"step\": 73,\n                \"train_loss\": 0.011166832409799099,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-1PDBPDdIwdwJcgdpMOW7RzYN\",\n            \"created_at\": 1736368738,\n            \"level\": \"info\",\n            \"message\": \"Step 72/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 72,\n                \"train_loss\": 0.0009466130868531764,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-4ljeSKH7hL5LUVS42uN3b0Bm\",\n            \"created_at\": 1736368735,\n            \"level\": \"info\",\n            \"message\": \"Step 71/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 71,\n                \"train_loss\": 0.0013041129568591714,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-dv53XZ20XxFWac8ScW3PxDQM\",\n            \"created_at\": 1736368732,\n            \"level\": \"info\",\n            \"message\": \"Step 70/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 70,\n                \"train_loss\": 0.000016041291019064374,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-1pt1yY8IlcF1NjKvNc6jT0ap\",\n            \"created_at\": 1736368729,\n            \"level\": \"info\",\n            \"message\": \"Step 69/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 69,\n                \"train_loss\": 0.0000055158461691462435,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        },\n        {\n            \"object\": \"fine_tuning.job.event\",\n            \"id\": \"ftevent-nVR33Xt3rMno1R5XOjWMKiIl\",\n            \"created_at\": 1736368729,\n            \"level\": \"info\",\n            \"message\": \"Step 68/100: training loss=0.00\",\n            \"data\": {\n                \"step\": 68,\n                \"train_loss\": 0.00335497478954494,\n                \"total_steps\": 100,\n                \"train_mean_token_accuracy\": 1\n            },\n            \"type\": \"metrics\"\n        }\n    ],\n    \"has_more\": true\n}"
								}
							]
						},
						{
							"name": "List Fine Tuning Checkpoints",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs/{{tuningJobId}}/checkpoints",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"fine_tuning",
										"jobs",
										"{{tuningJobId}}",
										"checkpoints"
									]
								}
							},
							"response": [
								{
									"name": "List Fine Tuning Checkpoints",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "checkpoints",
											"host": [
												"checkpoints"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 20:42:17 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_21c2dbdd3ca6f0067bc6ef08fe472103"
										},
										{
											"key": "openai-processing-ms",
											"value": "423"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fef03623bdf091e-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"fine_tuning.job.checkpoint\",\n            \"id\": \"ftckpt_VaSWtSWMUn6EtFXQF7VIWefc\",\n            \"created_at\": 1736368779,\n            \"fine_tuned_model_checkpoint\": \"ft:gpt-3.5-turbo-0125:myopenaiaccount::AnX8BVLh\",\n            \"fine_tuning_job_id\": \"ftjob-eiI5JPFksQL6EizNw4CbO0rD\",\n            \"metrics\": {\n                \"step\": 100\n            },\n            \"step_number\": 100\n        },\n        {\n            \"object\": \"fine_tuning.job.checkpoint\",\n            \"id\": \"ftckpt_GnrbIyFCdWIn4k5EtTSIcpVu\",\n            \"created_at\": 1736368764,\n            \"fine_tuned_model_checkpoint\": \"ft:gpt-3.5-turbo-0125:myopenaiaccount::AnX8BLAB:ckpt-step-90\",\n            \"fine_tuning_job_id\": \"ftjob-eiI5JPFksQL6EizNw4CbO0rD\",\n            \"metrics\": {\n                \"step\": 90\n            },\n            \"step_number\": 90\n        },\n        {\n            \"object\": \"fine_tuning.job.checkpoint\",\n            \"id\": \"ftckpt_ouuWJzpsZI7xXM5Py73xon6s\",\n            \"created_at\": 1736368748,\n            \"fine_tuned_model_checkpoint\": \"ft:gpt-3.5-turbo-0125:myopenaiaccount::AnX8BvMm:ckpt-step-80\",\n            \"fine_tuning_job_id\": \"ftjob-eiI5JPFksQL6EizNw4CbO0rD\",\n            \"metrics\": {\n                \"step\": 80\n            },\n            \"step_number\": 80\n        }\n    ],\n    \"has_more\": false,\n    \"first_id\": \"ftckpt_VaSWtSWMUn6EtFXQF7VIWefc\",\n    \"last_id\": \"ftckpt_ouuWJzpsZI7xXM5Py73xon6s\"\n}"
								}
							]
						},
						{
							"name": "Retrieve Fine Tuning Jobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"fineTunedModel\", jsonData.fine_tuned_model);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "ningJobId}}",
									"host": [
										"ningJobId}}"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve Fine Tuning Jobs",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs/{{tuningJobId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"fine_tuning",
												"jobs",
												"{{tuningJobId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 20:42:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_a62425694fe2eaf7a50a092bd4c84880"
										},
										{
											"key": "openai-processing-ms",
											"value": "308"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fef045e8d64091e-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"fine_tuning.job\",\n    \"id\": \"ftjob-eiI5JPFksQL6EizNw4CbO0rD\",\n    \"model\": \"gpt-3.5-turbo-0125\",\n    \"created_at\": 1736368413,\n    \"finished_at\": 1736368790,\n    \"fine_tuned_model\": \"ft:gpt-3.5-turbo-0125:myopenaiacct::AnX8BVLh\",\n    \"organization_id\": \"org-krOIFyxVjJBW16QjtMHuoBud\",\n    \"result_files\": [\n        \"file-NZAvks8PuhV1ncb1G1uABa\"\n    ],\n    \"status\": \"succeeded\",\n    \"validation_file\": null,\n    \"training_file\": \"file-RYuivPHF3ZAvgz7yU8hXHp\",\n    \"hyperparameters\": {\n        \"n_epochs\": 10,\n        \"batch_size\": 1,\n        \"learning_rate_multiplier\": 2\n    },\n    \"trained_tokens\": 8460,\n    \"error\": {},\n    \"user_provided_suffix\": null,\n    \"seed\": 1840334027,\n    \"estimated_finish\": null,\n    \"integrations\": [],\n    \"method\": {\n        \"type\": \"supervised\",\n        \"supervised\": {\n            \"hyperparameters\": {\n                \"n_epochs\": 10,\n                \"batch_size\": 1,\n                \"learning_rate_multiplier\": 2\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Cancel Fine Tuning Jobs",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/fine_tuning/jobs/{{tuningJobId}}/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"fine_tuning",
										"jobs",
										"{{tuningJobId}}",
										"cancel"
									]
								}
							},
							"response": []
						}
					],
					"description": "[Fine-tuning ](https://platform.openai.com/docs/guides/fine-tuning) lets you get more out of the models available through the API by providing:\n\n- Higher quality results than prompting\n    \n- Ability to train on more examples than can fit in a prompt\n    \n- Token savings due to shorter prompts\n    \n- Lower latency requests\n    \n\nOpenAI's text generation models have been pre-trained on a vast amount of text. To use the models effectively, we include instructions and sometimes several examples in a prompt. Using demonstrations to show how to perform a task is often called \"few-shot learning.\"\n\nFine-tuning improves on few-shot learning by training on many more examples than can fit in the prompt, letting you achieve better results on a wide number of tasks. **Once a model has been fine-tuned, you won't need to provide as many examples in the prompt.** This saves costs and enables lower-latency requests."
				},
				{
					"name": "Batch API Requests",
					"item": [
						{
							"name": "Get Batches",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input_file_id\": \"{{fileId}}\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"completion_window\": \"24h\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/batches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"batches"
									]
								}
							},
							"response": [
								{
									"name": "Get Batches",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input_file_id\": \"{{fileId}}\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"completion_window\": \"24h\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/batches",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"batches"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 22:36:03 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_8fc80b54088eef66e163638e2284a031"
										},
										{
											"key": "openai-processing-ms",
											"value": "1046"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff7e7645884091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"batch_67804f53610c81908260b0755fdae4da\",\n    \"object\": \"batch\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"errors\": null,\n    \"input_file_id\": \"file-74CVq2Hw8YPN7itK2P4yY9\",\n    \"completion_window\": \"24h\",\n    \"status\": \"validating\",\n    \"output_file_id\": null,\n    \"error_file_id\": null,\n    \"created_at\": 1736462163,\n    \"in_progress_at\": null,\n    \"expires_at\": 1736548563,\n    \"finalizing_at\": null,\n    \"completed_at\": null,\n    \"failed_at\": null,\n    \"expired_at\": null,\n    \"cancelling_at\": null,\n    \"cancelled_at\": null,\n    \"request_counts\": {\n        \"total\": 0,\n        \"completed\": 0,\n        \"failed\": 0\n    },\n    \"metadata\": null\n}"
								}
							]
						},
						{
							"name": "Create Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Stores the id in a collection level variable",
											"var batchId = pm.response.json().id;",
											"pm.collectionVariables.set(\"batchId\", batchId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input_file_id\": \"{{fileId}}\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"completion_window\": \"24h\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/batches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"batches"
									]
								}
							},
							"response": [
								{
									"name": "Get Batches Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input_file_id\": \"{{fileId}}\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"completion_window\": \"24h\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/batches",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"batches"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 22:32:25 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_1668b8114c370ede17429e71df69fece"
										},
										{
											"key": "openai-processing-ms",
											"value": "897"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Set-Cookie",
											"value": "__cf_bm=DxOGpNDsHOqvOIMmKR5hsPnYGaAX77.Jb_rlqZG7MSw-1736461945-1.0.1.1-HF9cvOsdsWxmxl1KaTTQnSKav9DHx5X6sn2xjryNbXFAUAahU761JCDihja7KEgRKtY3DIjzQYT_.QLJzf_vSQ; path=/; expires=Thu, 09-Jan-25 23:02:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff7e20e9a7e091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"batch_67804e78eaa48190bb291735207cd5de\",\n    \"object\": \"batch\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"errors\": null,\n    \"input_file_id\": \"file-74CVq2Hw8YPN7itK2P4yY9\",\n    \"completion_window\": \"24h\",\n    \"status\": \"validating\",\n    \"output_file_id\": null,\n    \"error_file_id\": null,\n    \"created_at\": 1736461944,\n    \"in_progress_at\": null,\n    \"expires_at\": 1736548344,\n    \"finalizing_at\": null,\n    \"completed_at\": null,\n    \"failed_at\": null,\n    \"expired_at\": null,\n    \"cancelling_at\": null,\n    \"cancelled_at\": null,\n    \"request_counts\": {\n        \"total\": 0,\n        \"completed\": 0,\n        \"failed\": 0\n    },\n    \"metadata\": null\n}"
								}
							]
						},
						{
							"name": "Retrieve Batch",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/batches/{{batchId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve Batch",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/batches/{{batchId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"batches",
												"{{batchId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 22:36:51 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_c8502a11e483845774b1ebb8159a395f"
										},
										{
											"key": "openai-processing-ms",
											"value": "190"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff7e8971f57091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"batch_67804e78eaa48190bb291735207cd5de\",\n    \"object\": \"batch\",\n    \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n    \"errors\": null,\n    \"input_file_id\": \"file-74CVq2Hw8YPN7itK2P4yY9\",\n    \"completion_window\": \"24h\",\n    \"status\": \"completed\",\n    \"output_file_id\": \"file-DBNxxknoR25hrruhAB6vyc\",\n    \"error_file_id\": null,\n    \"created_at\": 1736461944,\n    \"in_progress_at\": 1736461945,\n    \"expires_at\": 1736548344,\n    \"finalizing_at\": 1736462008,\n    \"completed_at\": 1736462008,\n    \"failed_at\": null,\n    \"expired_at\": null,\n    \"cancelling_at\": null,\n    \"cancelled_at\": null,\n    \"request_counts\": {\n        \"total\": 2,\n        \"completed\": 2,\n        \"failed\": 0\n    },\n    \"metadata\": null\n}"
								}
							]
						},
						{
							"name": "Cancel Batch",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/batches/{{batchId}}/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"batches",
										"{{batchId}}",
										"cancel"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('object');",
											"    pm.expect(responseData).to.have.property('data');",
											"    pm.expect(responseData).to.have.property('first_id');",
											"    pm.expect(responseData).to.have.property('last_id');",
											"    pm.expect(responseData).to.have.property('has_more');",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and contains the expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.data).to.have.lengthOf.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Validate object is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.object).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Object should be a non-empty string\");",
											"});",
											"",
											"",
											"pm.test(\"Verify Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/batches?limit=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"batches"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": [
								{
									"name": "List Batch",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/batches?limit=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"batches"
											],
											"query": [
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 22:37:09 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_c7020d63b695a56519d73b7b7f8055da"
										},
										{
											"key": "openai-processing-ms",
											"value": "453"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff7e9011b31091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"batch_67804f53610c81908260b0755fdae4da\",\n            \"object\": \"batch\",\n            \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n            \"errors\": null,\n            \"input_file_id\": \"file-74CVq2Hw8YPN7itK2P4yY9\",\n            \"completion_window\": \"24h\",\n            \"status\": \"in_progress\",\n            \"output_file_id\": null,\n            \"error_file_id\": null,\n            \"created_at\": 1736462163,\n            \"in_progress_at\": 1736462164,\n            \"expires_at\": 1736548563,\n            \"finalizing_at\": null,\n            \"completed_at\": null,\n            \"failed_at\": null,\n            \"expired_at\": null,\n            \"cancelling_at\": null,\n            \"cancelled_at\": null,\n            \"request_counts\": {\n                \"total\": 2,\n                \"completed\": 1,\n                \"failed\": 0\n            },\n            \"metadata\": null\n        },\n        {\n            \"id\": \"batch_67804e78eaa48190bb291735207cd5de\",\n            \"object\": \"batch\",\n            \"endpoint\": \"/{{baseVersion}}/chat/completions\",\n            \"errors\": null,\n            \"input_file_id\": \"file-74CVq2Hw8YPN7itK2P4yY9\",\n            \"completion_window\": \"24h\",\n            \"status\": \"completed\",\n            \"output_file_id\": \"file-DBNxxknoR25hrruhAB6vyc\",\n            \"error_file_id\": null,\n            \"created_at\": 1736461944,\n            \"in_progress_at\": 1736461945,\n            \"expires_at\": 1736548344,\n            \"finalizing_at\": 1736462008,\n            \"completed_at\": 1736462008,\n            \"failed_at\": null,\n            \"expired_at\": null,\n            \"cancelling_at\": null,\n            \"cancelled_at\": null,\n            \"request_counts\": {\n                \"total\": 2,\n                \"completed\": 2,\n                \"failed\": 0\n            },\n            \"metadata\": null\n        }\n    ],\n    \"first_id\": \"batch_67804f53610c81908260b0755fdae4da\",\n    \"last_id\": \"batch_67804e78eaa48190bb291735207cd5de\",\n    \"has_more\": false\n}"
								}
							]
						}
					],
					"description": "While some uses of the OpenAI Platform require you to send synchronous requests, there are many cases where requests do not need an immediate response or [rate limits](https://platform.openai.com/docs/guides/rate-limits) prevent you from executing a large number of queries quickly. Batch processing jobs are often helpful in use cases like:\n\n1. running evaluations\n    \n2. classifying large datasets\n    \n3. embedding content repositories\n    \n\nThe [Batch API ](https://platform.openai.com/docs/guides/batch) offers a straightforward set of endpoints that allow you to collect a set of requests into a single file, kick off a batch processing job to execute these requests, query for the status of that batch while the underlying requests execute, and eventually retrieve the collected results when the batch is complete.\n\nCompared to using standard endpoints directly, Batch API has:\n\n1. **Better cost efficiency:** 50% cost discount compared to synchronous APIs\n    \n2. **Higher rate limits:** [Substantially more headroom](https://platform.openai.com/settings/organization/limits) compared to the synchronous APIs\n    \n3. **Fast completion times:** Each batch completes within 24 hours (and often more quickly)"
				},
				{
					"name": "Files",
					"item": [
						{
							"name": "Upload Files - fine-tune",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Stores the fileId in a collection level variable",
											"var fileId = pm.response.json().id;",
											"pm.collectionVariables.set(\"fileId\", fileId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "purpose",
											"value": "fine-tune",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "fine_tune.jsonl"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files"
									]
								}
							},
							"response": [
								{
									"name": "Upload Files",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "purpose",
													"value": "fine-tune",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "fine_tune.jsonl"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"files"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 19:09:07 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_659fd1da08f7b4f997b3987be6f0bf29"
										},
										{
											"key": "openai-processing-ms",
											"value": "671"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fee7ae84b372ee7-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"file\",\n    \"id\": \"file-TeqYRSFVGZ3x7czq4seS8P\",\n    \"purpose\": \"fine-tune\",\n    \"filename\": \"fine_tune.jsonl\",\n    \"bytes\": 4919,\n    \"created_at\": 1736363347,\n    \"status\": \"processed\",\n    \"status_details\": null\n}"
								}
							]
						},
						{
							"name": "Upload Files - batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Stores the fileId in a collection level variable",
											"var fileId = pm.response.json().id;",
											"pm.collectionVariables.set(\"fileId\", fileId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "purpose",
											"value": "batch",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "batch.jsonl"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files"
									]
								}
							},
							"response": [
								{
									"name": "Upload Files - batch",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "purpose",
													"value": "batch",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "batch.jsonl"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"files"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 21:32:12 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_20485a8abd3daac442688457cdaa63b9"
										},
										{
											"key": "openai-processing-ms",
											"value": "972"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Set-Cookie",
											"value": "__cf_bm=loSnSYIpuLIjOgkk8yr_DW4d9jnC4ahoj4f5XY.lb9Y-1736458332-1.0.1.1-cNblHdQGNQWWo62wspef6Kzr2Fz_TBErorFBIQqrLblUjOCvgcKzCOPUzt6HThtNNTK.ktkCvNdfvCiAFk58yQ; path=/; expires=Thu, 09-Jan-25 22:02:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff789daada0091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"file\",\n    \"id\": \"file-74CVq2Hw8YPN7itK2P4yY9\",\n    \"purpose\": \"batch\",\n    \"filename\": \"batch.jsonl\",\n    \"bytes\": 522,\n    \"created_at\": 1736458331,\n    \"status\": \"processed\",\n    \"status_details\": null\n}"
								}
							]
						},
						{
							"name": "List Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the data object and its fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    ",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('purpose');",
											"        pm.expect(item).to.have.property('filename');",
											"        pm.expect(item).to.have.property('bytes');",
											"        pm.expect(item).to.have.property('created_at');",
											"        pm.expect(item).to.have.property('status');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Has_more field is present and has a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.has_more).to.exist.and.to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"    });",
											"});",
											"",
											"pm.test(\"Bytes is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.bytes).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});",
											"",
											"pm.test(\"Created_at is a valid timestamp\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.created_at).to.be.a('number');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files?limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": [
								{
									"name": "List Files",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/files?limit=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"files"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 21:58:25 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_e909407ee305ebbae666294913c23063"
										},
										{
											"key": "openai-processing-ms",
											"value": "320"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fef72e9794ee9df-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"file\",\n            \"id\": \"file-NZAvks8PuhV1ncb1G1uABa\",\n            \"purpose\": \"fine-tune-results\",\n            \"filename\": \"step_metrics.csv\",\n            \"bytes\": 2796,\n            \"created_at\": 1736368793,\n            \"status\": \"processed\",\n            \"status_details\": null\n        },\n        {\n            \"object\": \"file\",\n            \"id\": \"file-RYuivPHF3ZAvgz7yU8hXHp\",\n            \"purpose\": \"fine-tune\",\n            \"filename\": \"fine_tune.jsonl\",\n            \"bytes\": 4889,\n            \"created_at\": 1736368408,\n            \"status\": \"processed\",\n            \"status_details\": null\n        },\n        {\n            \"object\": \"file\",\n            \"id\": \"file-3iSNBfXyLimKcJxqet8LZ5\",\n            \"purpose\": \"fine-tune-results\",\n            \"filename\": \"step_metrics.csv\",\n            \"bytes\": 2288,\n            \"created_at\": 1736366630,\n            \"status\": \"processed\",\n            \"status_details\": null\n        },\n        {\n            \"object\": \"file\",\n            \"id\": \"file-E2ikJZr8MhhMpT8i8cqf6c\",\n            \"purpose\": \"fine-tune\",\n            \"filename\": \"fine_tune_2.jsonl\",\n            \"bytes\": 3127,\n            \"created_at\": 1736366268,\n            \"status\": \"processed\",\n            \"status_details\": null\n        },\n        {\n            \"object\": \"file\",\n            \"id\": \"file-5bnJSpMYqvRwY2DpMYLwvM\",\n            \"purpose\": \"fine-tune\",\n            \"filename\": \"fine_tune_2.jsonl\",\n            \"bytes\": 781,\n            \"created_at\": 1736365870,\n            \"status\": \"processed\",\n            \"status_details\": null\n        },\n        {\n            \"object\": \"file\",\n            \"id\": \"file-XFCsstmgtsF2cEVUfHhKft\",\n            \"purpose\": \"fine-tune\",\n            \"filename\": \"fine_tune.jsonl\",\n            \"bytes\": 4919,\n            \"created_at\": 1736364627,\n            \"status\": \"processed\",\n            \"status_details\": null\n        },\n        {\n            \"object\": \"file\",\n            \"id\": \"file-TeqYRSFVGZ3x7czq4seS8P\",\n            \"purpose\": \"fine-tune\",\n            \"filename\": \"fine_tune.jsonl\",\n            \"bytes\": 4919,\n            \"created_at\": 1736363347,\n            \"status\": \"processed\",\n            \"status_details\": null\n        }\n    ],\n    \"has_more\": false,\n    \"first_id\": \"file-NZAvks8PuhV1ncb1G1uABa\",\n    \"last_id\": \"file-TeqYRSFVGZ3x7czq4seS8P\"\n}"
								}
							]
						},
						{
							"name": "Retrieve File",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files/{{fileId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files",
										"{{fileId}}"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve File",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/files/{{fileId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"files",
												"{{fileId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 21:58:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_b94803749fdeaf6a447bd7e007b23b63"
										},
										{
											"key": "openai-processing-ms",
											"value": "393"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fef73b30ac2e9df-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"file\",\n    \"id\": \"file-RYuivPHF3ZAvgz7yU8hXHp\",\n    \"purpose\": \"fine-tune\",\n    \"filename\": \"fine_tune.jsonl\",\n    \"bytes\": 4889,\n    \"created_at\": 1736368408,\n    \"status\": \"processed\",\n    \"status_details\": null\n}"
								}
							]
						},
						{
							"name": "Delete File",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files/{{fileId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files",
										"{{fileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve File Contents",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/files/{{fileId}}/content",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"files",
										"{{fileId}}",
										"content"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve File Contents",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/files/{{fileId}}/content",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"files",
												"{{fileId}}",
												"content"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "raw",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 21:59:54 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/octet-stream"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "content-disposition",
											"value": "attachment; filename=\"fine_tune.jsonl\""
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_d4cddf2695433929893acb2285a84905"
										},
										{
											"key": "openai-processing-ms",
											"value": "373"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fef75125ebee9df-LAX"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"}, {\"role\": \"assistant\", \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"}, {\"role\": \"user\", \"content\": \"Where was it played?\"}, {\"role\": \"assistant\", \"content\": \"It was played at Globe Life Field in Arlington, Texas, due to the COVID-19 pandemic.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What's the capital of France?\"}, {\"role\": \"assistant\", \"content\": \"The capital of France is Paris.\"}, {\"role\": \"user\", \"content\": \"Can you tell me a fun fact about Paris?\"}, {\"role\": \"assistant\", \"content\": \"Sure! Paris is known as the 'City of Light' because it was one of the first cities in the world to have street lighting.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What is the difference between HTTP and HTTPS?\"}, {\"role\": \"assistant\", \"content\": \"HTTP is unsecured, while HTTPS is secure and uses SSL/TLS encryption to protect data in transit.\"}, {\"role\": \"user\", \"content\": \"Why is HTTPS important?\"}, {\"role\": \"assistant\", \"content\": \"HTTPS ensures that sensitive information like passwords and credit card details are transmitted securely.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What are the benefits of regular exercise?\"}, {\"role\": \"assistant\", \"content\": \"Regular exercise improves cardiovascular health, boosts mood, and enhances overall physical fitness.\"}, {\"role\": \"user\", \"content\": \"How often should I exercise?\"}, {\"role\": \"assistant\", \"content\": \"It is recommended to exercise at least 150 minutes per week for moderate-intensity activity.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"How do I prevent pasta from sticking together?\"}, {\"role\": \"assistant\", \"content\": \"You can add a bit of oil to the boiling water and stir the pasta occasionally while cooking.\"}, {\"role\": \"user\", \"content\": \"How do I know when the pasta is done?\"}, {\"role\": \"assistant\", \"content\": \"Taste it! Pasta is done when it is 'al dente,' meaning it has a slight bite to it.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What is the best time to visit Japan?\"}, {\"role\": \"assistant\", \"content\": \"The best times to visit Japan are during the spring (March to May) and fall (September to November) for pleasant weather and beautiful scenery.\"}, {\"role\": \"user\", \"content\": \"What should I pack for spring in Japan?\"}, {\"role\": \"assistant\", \"content\": \"Pack light layers, as spring weather can vary. Don’t forget comfortable walking shoes and a lightweight raincoat.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"Who was the first president of the United States?\"}, {\"role\": \"assistant\", \"content\": \"George Washington was the first president of the United States, serving from 1789 to 1797.\"}, {\"role\": \"user\", \"content\": \"What was significant about his presidency?\"}, {\"role\": \"assistant\", \"content\": \"He set many precedents for future presidents, including the two-term limit and the establishment of a cabinet.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What is a variable in programming?\"}, {\"role\": \"assistant\", \"content\": \"A variable is a named storage location in memory that holds a value, which can be modified during program execution.\"}, {\"role\": \"user\", \"content\": \"Can you give an example?\"}, {\"role\": \"assistant\", \"content\": \"Sure! In Python, you can write `x = 5` to assign the value 5 to the variable `x`.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"How do I grow tomatoes at home?\"}, {\"role\": \"assistant\", \"content\": \"Tomatoes need plenty of sunlight, well-draining soil, and consistent watering. Use stakes or cages to support the plants as they grow.\"}, {\"role\": \"user\", \"content\": \"When should I harvest them?\"}, {\"role\": \"assistant\", \"content\": \"Harvest tomatoes when they are fully red (or the intended color for the variety) and slightly firm to the touch.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"Can you recommend a good sci-fi movie?\"}, {\"role\": \"assistant\", \"content\": \"Sure! 'Interstellar' is a great sci-fi movie that explores space exploration and the power of love and sacrifice.\"}, {\"role\": \"user\", \"content\": \"What about something more action-packed?\"}, {\"role\": \"assistant\", \"content\": \"You might enjoy 'The Matrix,' a classic sci-fi action film with groundbreaking visual effects and a compelling story.\"}]}"
								}
							]
						}
					],
					"description": "The [Files API](https://platform.openai.com/docs/api-reference/files) is used to upload documents that can be used with features like [Assistants](https://platform.openai.com/docs/api-reference/assistants), [Fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning), and [Batch API](https://platform.openai.com/docs/guides/batch)."
				},
				{
					"name": "Image Generation",
					"item": [
						{
							"name": "Generate Image ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Created field is present and is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.created).to.exist;",
											"  pm.expect(responseData.created).to.be.a('number');",
											"  pm.expect(responseData.created).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array').with.lengthOf(1);",
											"});",
											"",
											"",
											"pm.test(\"Revised prompt and URL in data array are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    ",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.revised_prompt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"revised_prompt should not be empty\");",
											"        pm.expect(item.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"url should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"dall-e-3\",\n    \"prompt\": \"A cute baby sea otter\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/images/generations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"images",
										"generations"
									]
								}
							},
							"response": [
								{
									"name": "Generate Image ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"model\": \"dall-e-3\",\n    \"prompt\": \"A cute baby sea otter\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/images/generations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"images",
												"generations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 22:03:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_46dd095458cee071f1314b83a851e21f"
										},
										{
											"key": "openai-processing-ms",
											"value": "12455"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fef7abd9e8769c4-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"created\": 1736373838,\n    \"data\": [\n        {\n            \"revised_prompt\": \"Create a detailed image of an adorable baby sea otter. The baby sea otter should be captured in its natural habitat, surrounded by seaweed and floating on its back in the calm ocean water. Being a pup, it should display fluffy fur, large glassy eyes, and tiny paws. The facial expression of the otter is that of curiosity, joy, and innocence typically expected from young wildlife. The ocean circulates it with a serene ambiance, sparkled by droplets of water reflecting the sunlight. It might be holding a small shell or stone, a behavior commonly seen in sea otters.\",\n            \"url\": \"https://oaidalleapiprodscus.blob.core.windows.net/private/org-krOIFyxVjJBW16QjtMHuoBud/user-1vXYrAdci3Vyc2cjliD4yuRG/img-a4bCbNBJtOy1MmZrylYgvFl0.png?st=2025-01-08T21%3A03%3A58Z&se=2025-01-08T23%3A03%3A58Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-01-08T00%3A06%3A06Z&ske=2025-01-09T00%3A06%3A06Z&sks=b&skv=2024-08-04&sig=qs9YXIE2KWU7BD3o4u//kDnBOvrt0zY7av3TLM3Kq4c%3D\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create Image Edit",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "otter.png"
										},
										{
											"key": "mask",
											"type": "file",
											"src": "mask.png"
										},
										{
											"key": "prompt",
											"value": "A cute baby sea otter wearing a beret",
											"type": "text"
										},
										{
											"key": "n",
											"value": "2",
											"type": "text"
										},
										{
											"key": "size",
											"value": "1024x1024",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/images/edits",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"images",
										"edits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Image Variation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response has the required fields - created and data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('created');",
											"    pm.expect(responseData).to.have.property('data');",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and contains expected number of elements\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.have.property('data').that.is.an('array').and.that.is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "cute_otter.png"
										},
										{
											"key": "n",
											"value": "2",
											"type": "text"
										},
										{
											"key": "size",
											"value": "1024x1024",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/images/variations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"images",
										"variations"
									]
								}
							},
							"response": [
								{
									"name": "Create Image Variation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": "cute_otter.png"
												},
												{
													"key": "n",
													"value": "2",
													"type": "text"
												},
												{
													"key": "size",
													"value": "1024x1024",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/images/variations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"images",
												"variations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 22:54:39 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_d1650c98235a60c9f0b8507310e4e7f9"
										},
										{
											"key": "openai-processing-ms",
											"value": "9878"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fefc5079a542ae4-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"created\": 1736376879,\n    \"data\": [\n        {\n            \"url\": \"https://oaidalleapiprodscus.blob.core.windows.net/private/org-krOIFyxVjJBW16QjtMHuoBud/user-1vXYrAdci3Vyc2cjliD4yuRG/img-SuaEmlqakukuLNn90fnh56Y4.png?st=2025-01-08T21%3A54%3A39Z&se=2025-01-08T23%3A54%3A39Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-01-08T00%3A13%3A14Z&ske=2025-01-09T00%3A13%3A14Z&sks=b&skv=2024-08-04&sig=lo7ch4fl3WnRtzvnQMeLcyF9lnIxzi3OSiP7E4i3c5w%3D\"\n        },\n        {\n            \"url\": \"https://oaidalleapiprodscus.blob.core.windows.net/private/org-krOIFyxVjJBW16QjtMHuoBud/user-1vXYrAdci3Vyc2cjliD4yuRG/img-cLHrEAqq82BIVVGDBr3wV14a.png?st=2025-01-08T21%3A54%3A38Z&se=2025-01-08T23%3A54%3A38Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-01-08T00%3A13%3A14Z&ske=2025-01-09T00%3A13%3A14Z&sks=b&skv=2024-08-04&sig=IIRoTuuBUD15PDY%2BbmwkvMja2wGhau3P8tkZSg1mwwA%3D\"\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "The [Images API](https://platform.openai.com/docs/guides/images) provides three methods for interacting with images:\n\n1. Creating images from scratch based on a text prompt (DALL·E 3 and DALL·E 2)\n    \n2. Creating edited versions of images by having the model replace some areas of a pre-existing image, based on a new text prompt (DALL·E 2 only)\n    \n3. Creating variations of an existing image (DALL·E 2 only)"
				},
				{
					"name": "Models",
					"item": [
						{
							"name": "List Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, object, created, and owned_by\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.data.forEach(function(item) {",
											"    pm.expect(item).to.have.property('id');",
											"    pm.expect(item).to.have.property('object');",
											"    pm.expect(item).to.have.property('created');",
											"    pm.expect(item).to.have.property('owned_by');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Data array contains at least one element\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string and created is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
											"        pm.expect(item.created).to.be.a('number').and.to.be.at.least(0, \"Created should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Object property must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.object).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Object should be a non-empty string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/models",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"models"
									]
								}
							},
							"response": [
								{
									"name": "List Models",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/models",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"models"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 23:00:27 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "x-request-id",
											"value": "ad7bcbfff10f1ab27008fe5527bf4f62"
										},
										{
											"key": "openai-processing-ms",
											"value": "341"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fefcdc30cc07c92-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"gpt-4o-audio-preview-2024-10-01\",\n            \"object\": \"model\",\n            \"created\": 1727389042,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-mini-audio-preview\",\n            \"object\": \"model\",\n            \"created\": 1734387424,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-realtime-preview\",\n            \"object\": \"model\",\n            \"created\": 1727659998,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-realtime-preview-2024-10-01\",\n            \"object\": \"model\",\n            \"created\": 1727131766,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-mini\",\n            \"object\": \"model\",\n            \"created\": 1721172741,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-mini-audio-preview-2024-12-17\",\n            \"object\": \"model\",\n            \"created\": 1734115920,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-mini-realtime-preview\",\n            \"object\": \"model\",\n            \"created\": 1734387380,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"dall-e-2\",\n            \"object\": \"model\",\n            \"created\": 1698798177,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4-1106-preview\",\n            \"object\": \"model\",\n            \"created\": 1698957206,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-realtime-preview-2024-12-17\",\n            \"object\": \"model\",\n            \"created\": 1733945430,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-mini-2024-07-18\",\n            \"object\": \"model\",\n            \"created\": 1721172717,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-3.5-turbo\",\n            \"object\": \"model\",\n            \"created\": 1677610602,\n            \"owned_by\": \"openai\"\n        },\n        {\n            \"id\": \"gpt-3.5-turbo-0125\",\n            \"object\": \"model\",\n            \"created\": 1706048358,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-3.5-turbo-instruct\",\n            \"object\": \"model\",\n            \"created\": 1692901427,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"babbage-002\",\n            \"object\": \"model\",\n            \"created\": 1692634615,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"whisper-1\",\n            \"object\": \"model\",\n            \"created\": 1677532384,\n            \"owned_by\": \"openai-internal\"\n        },\n        {\n            \"id\": \"dall-e-3\",\n            \"object\": \"model\",\n            \"created\": 1698785189,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-3.5-turbo-16k\",\n            \"object\": \"model\",\n            \"created\": 1683758102,\n            \"owned_by\": \"openai-internal\"\n        },\n        {\n            \"id\": \"omni-moderation-latest\",\n            \"object\": \"model\",\n            \"created\": 1731689265,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"o1-preview-2024-09-12\",\n            \"object\": \"model\",\n            \"created\": 1725648865,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"omni-moderation-2024-09-26\",\n            \"object\": \"model\",\n            \"created\": 1732734466,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"tts-1-hd-1106\",\n            \"object\": \"model\",\n            \"created\": 1699053533,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"o1-preview\",\n            \"object\": \"model\",\n            \"created\": 1725648897,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4\",\n            \"object\": \"model\",\n            \"created\": 1687882411,\n            \"owned_by\": \"openai\"\n        },\n        {\n            \"id\": \"gpt-4-0613\",\n            \"object\": \"model\",\n            \"created\": 1686588896,\n            \"owned_by\": \"openai\"\n        },\n        {\n            \"id\": \"chatgpt-4o-latest\",\n            \"object\": \"model\",\n            \"created\": 1723515131,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4-0125-preview\",\n            \"object\": \"model\",\n            \"created\": 1706037612,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"tts-1-hd\",\n            \"object\": \"model\",\n            \"created\": 1699046015,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"davinci-002\",\n            \"object\": \"model\",\n            \"created\": 1692634301,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"text-embedding-ada-002\",\n            \"object\": \"model\",\n            \"created\": 1671217299,\n            \"owned_by\": \"openai-internal\"\n        },\n        {\n            \"id\": \"gpt-3.5-turbo-1106\",\n            \"object\": \"model\",\n            \"created\": 1698959748,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-audio-preview\",\n            \"object\": \"model\",\n            \"created\": 1727460443,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4-turbo-2024-04-09\",\n            \"object\": \"model\",\n            \"created\": 1712601677,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4-turbo\",\n            \"object\": \"model\",\n            \"created\": 1712361441,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"tts-1\",\n            \"object\": \"model\",\n            \"created\": 1681940951,\n            \"owned_by\": \"openai-internal\"\n        },\n        {\n            \"id\": \"tts-1-1106\",\n            \"object\": \"model\",\n            \"created\": 1699053241,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-3.5-turbo-instruct-0914\",\n            \"object\": \"model\",\n            \"created\": 1694122472,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4-turbo-preview\",\n            \"object\": \"model\",\n            \"created\": 1706037777,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-mini-realtime-preview-2024-12-17\",\n            \"object\": \"model\",\n            \"created\": 1734112601,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-2024-05-13\",\n            \"object\": \"model\",\n            \"created\": 1715368132,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"text-embedding-3-small\",\n            \"object\": \"model\",\n            \"created\": 1705948997,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-2024-11-20\",\n            \"object\": \"model\",\n            \"created\": 1731975040,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"text-embedding-3-large\",\n            \"object\": \"model\",\n            \"created\": 1705953180,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"o1-mini\",\n            \"object\": \"model\",\n            \"created\": 1725649008,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"o1-mini-2024-09-12\",\n            \"object\": \"model\",\n            \"created\": 1725648979,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-audio-preview-2024-12-17\",\n            \"object\": \"model\",\n            \"created\": 1734034239,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o-2024-08-06\",\n            \"object\": \"model\",\n            \"created\": 1722814719,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"gpt-4o\",\n            \"object\": \"model\",\n            \"created\": 1715367049,\n            \"owned_by\": \"system\"\n        },\n        {\n            \"id\": \"ft:gpt-3.5-turbo-0125:cbrehmpersonal::AnWZHZYI:ckpt-step-72\",\n            \"object\": \"model\",\n            \"created\": 1736366627,\n            \"owned_by\": \"myopenaiaccount\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Retrieve Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id');",
											"  pm.expect(responseData).to.have.property('object');",
											"  pm.expect(responseData).to.have.property('created');",
											"  pm.expect(responseData).to.have.property('owned_by');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Created is a valid timestamp\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.created).to.match(/^\\d{10}$/);",
											"});",
											"",
											"",
											"pm.test(\"Owned_by is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.owned_by).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Owned_by should be a non-empty string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/models/{{model}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"models",
										"{{model}}"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve Models",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/models/{{model}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"models",
												"{{model}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 23:02:03 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "x-request-id",
											"value": "8edfd798312af84841ceea9725e10d74"
										},
										{
											"key": "openai-processing-ms",
											"value": "125"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fefd01bebf708aa-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"gpt-4o\",\n    \"object\": \"model\",\n    \"created\": 1715367049,\n    \"owned_by\": \"system\"\n}"
								}
							]
						},
						{
							"name": "Delete Fine Tuned Model",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/models/{{fineTunedModel}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"models",
										"{{fineTunedModel}}"
									]
								}
							},
							"response": [
								{
									"name": "Delete Fine Tuned Model",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/models/{{fineTunedModel}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"models",
												"{{fineTunedModel}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 23:09:51 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_d11ad4f5e55d5709242395ba894d6fdf"
										},
										{
											"key": "openai-processing-ms",
											"value": "141"
										},
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fefdb8c6e46cb9b-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"ft:gpt-3.5-turbo-0125:myopenaiaccount::AnX8BVLh\",\n    \"object\": \"model\",\n    \"deleted\": true\n}"
								}
							]
						}
					],
					"description": "List and describe the various models available in the [Models AP](https://platform.openai.com/docs/api-reference/models)I. You can refer to the [Models](https://platform.openai.com/docs/models) documentation to understand what models are available and the differences between them."
				},
				{
					"name": "Moderations",
					"item": [
						{
							"name": "Moderations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Id and model fields must exist\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.model).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Results array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('results').that.is.an('array').and.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Results array contains expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.results).to.be.an('array');",
											"    ",
											"    responseData.results.forEach(function(result) {",
											"        pm.expect(result.flagged).to.exist;",
											"        pm.expect(result.categories).to.exist;",
											"        pm.expect(result.category_scores).to.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"I want to kill them.\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/moderations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"moderations"
									]
								}
							},
							"response": [
								{
									"name": "Moderations",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": \"I want to kill them.\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/moderations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"moderations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 08 Jan 2025 23:13:17 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_e1dcd90abe057ad686c30d7b1d3b17c1"
										},
										{
											"key": "openai-processing-ms",
											"value": "279"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8fefe0924a4fe9e3-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"modr-AnZWfG6bdKPEf9iW4uF5l6NLTDa1I\",\n    \"model\": \"text-moderation-007\",\n    \"results\": [\n        {\n            \"flagged\": true,\n            \"categories\": {\n                \"sexual\": false,\n                \"hate\": false,\n                \"harassment\": true,\n                \"self-harm\": false,\n                \"sexual/minors\": false,\n                \"hate/threatening\": false,\n                \"violence/graphic\": false,\n                \"self-harm/intent\": false,\n                \"self-harm/instructions\": false,\n                \"harassment/threatening\": true,\n                \"violence\": true\n            },\n            \"category_scores\": {\n                \"sexual\": 0.000011726012417057063,\n                \"hate\": 0.22706663608551025,\n                \"harassment\": 0.5215635299682617,\n                \"self-harm\": 0.000002227119921371923,\n                \"sexual/minors\": 7.107352217872176e-8,\n                \"hate/threatening\": 0.023547329008579254,\n                \"violence/graphic\": 0.00003391829886822961,\n                \"self-harm/intent\": 0.000001646940972932498,\n                \"self-harm/instructions\": 1.1198755256458526e-9,\n                \"harassment/threatening\": 0.5694745779037476,\n                \"violence\": 0.9971134662628174\n            }\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "[Moderations](https://platform.openai.com/docs/guides/moderation) is a tool you can use to check whether text or images are potentially harmful. Once harmful content is identified, developers can take corrective action like filtering content or intervening with user accounts creating offending content. The moderation endpoint is free to use."
				}
			],
			"description": "The OpenAI API allows developers to create generative AI applications using OpenAI's state-of-the-art models, such as GPT (for text-based tasks) and DALL·E (for image generation). The API supports a wide range of use cases, including conversational AI, content generation, summarization, text classification, sentiment analysis, code generation, and image creation. OpenAI models can work with various types of inputs, such as plain text, code snippets, or detailed prompts for generating images. The API is designed to be flexible and can handle both single-turn queries and multi-turn interactions, making it ideal for tasks like building dialogue agents, writing assistance, brainstorming, and more.\n\n**References**\n\n- [Chat Completions](https://www.postman.com/devrel/openai/request/z1m5sfw/chat-completions?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- [Embeddings](https://www.postman.com/devrel/openai/request/o51r0bp/embeddings?action=share&source=copy-link&creator=5078742&ctx=documentation)\n    \n- Fine Tuning\n    \n    - [Upload Training File](https://www.postman.com/devrel/openai/request/aat4yv1/upload-training-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create a Fine Tuning Job](https://www.postman.com/devrel/openai/request/lyz6y8a/create-fine-tuning-job?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Enable Weights and Biases Integrations](https://www.postman.com/devrel/openai/request/ndutt0y/enable-weights-and-biases-integration?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Fine Tuning Jobs](https://www.postman.com/devrel/openai/request/l2zxkvt/list-fine-tuning-jobs?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Fine Tuning Events](https://www.postman.com/devrel/openai/request/fp95wua/list-fine-tuning-events?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Fine Tuning Checkpoints](https://www.postman.com/devrel/openai/request/33whmks/list-fine-tuning-checkpoints?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Fine Tuning Jobs](https://www.postman.com/devrel/openai/request/kbdjtu8/retrieve-fine-tuning-jobs?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Cancel Fine Tuning Jobs](https://www.postman.com/devrel/openai/request/q0quai9/cancel-fine-tuning-jobs?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Batch API Requests\n    \n    - [Get Batches](https://www.postman.com/devrel/openai/request/usyj5nr/get-batches?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Batch](https://www.postman.com/devrel/openai/request/0toz44d/retrieve-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Cancel Batch](https://www.postman.com/devrel/openai/request/c9zmbrq/cancel-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Batch](https://www.postman.com/devrel/openai/request/ayowh6p/list-batch?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Files\n    \n    - [Upload Files](https://www.postman.com/devrel/openai/request/rixfdg5/upload-files?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [List Files](https://www.postman.com/devrel/openai/request/xgnko2p/list-files?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve File](https://www.postman.com/devrel/openai/request/1e1ogge/retrieve-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Delete File](https://www.postman.com/devrel/openai/request/e4ogrmh/delete-file?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve File Contents](https://www.postman.com/devrel/openai/request/seq7fpr/retrieve-file-contents?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- Image Generation\n    \n    - [Generate Image](https://www.postman.com/devrel/openai/request/riub8s3/generate-image?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create Image Edit](https://www.postman.com/devrel/openai/request/8c7f7d8/create-image-edit?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Create Image Variation](https://www.postman.com/devrel/openai/request/4gk4mxf/create-image-variation?action=share&source=copy-link&creator=41178308&ctx=documentation)\n        \n- Models\n    \n    - [List Models](https://www.postman.com/devrel/openai/request/1p8b6v6/list-models?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Retrieve Models](https://www.postman.com/devrel/openai/request/ns0dwtr/retrieve-models?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n    - [Delete Fine Tuned Model](https://www.postman.com/devrel/openai/request/0ketmr9/delete-fine-tuned-model?action=share&source=copy-link&creator=5078742&ctx=documentation)\n        \n- [Moderations](https://www.postman.com/devrel/openai/request/6quoxk9/moderations?action=share&source=copy-link&creator=5078742&ctx=documentation)"
		},
		{
			"name": "OpenAI Assistants API - Beta",
			"item": [
				{
					"name": "Threads",
					"item": [
						{
							"name": "Messages",
							"item": [
								{
									"name": "Create Message in a Thread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"messageId\", jsonData.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"role\": \"user\",\n    \"content\": \"How does AI work? Explain it in simple terms.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"messages"
											]
										}
									},
									"response": [
										{
											"name": "Create Message in a Thread",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"role\": \"user\",\n    \"content\": \"How does AI work? Explain it in simple terms.\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"messages"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:14:35 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_b10483b38b13eed3a298ec291355f28c"
												},
												{
													"key": "openai-processing-ms",
													"value": "453"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Set-Cookie",
													"value": "__cf_bm=StCRzeSZkqLtT97ZT01jfwjrLLgHezJeWquLAMnTm7E-1736381675-1.0.1.1-z.Yciko5ptN_MZULO3pFABfQN2K7c3F4pcMQ69VwkE43A8HKzV4hQrQQFIHsrisxeAQul7Rb_IxZlp_l7DrA4A; path=/; expires=Thu, 09-Jan-25 00:44:35 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff03a5bb8c6f7c7-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"msg_nIMXudehVNpEof7yftPounhP\",\n    \"object\": \"thread.message\",\n    \"created_at\": 1736381675,\n    \"assistant_id\": null,\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"run_id\": null,\n    \"role\": \"user\",\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": {\n                \"value\": \"How does AI work? Explain it in simple terms.\",\n                \"annotations\": []\n            }\n        }\n    ],\n    \"attachments\": [],\n    \"metadata\": {}\n}"
										}
									]
								},
								{
									"name": "List Messages in a Thread",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"messages"
											]
										}
									},
									"response": [
										{
											"name": "List Messages in a Thread",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"messages"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:15:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_04d6757d7b42b2be747a7c367a0d63fb"
												},
												{
													"key": "openai-processing-ms",
													"value": "464"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff03bedaa361004-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"msg_nIMXudehVNpEof7yftPounhP\",\n            \"object\": \"thread.message\",\n            \"created_at\": 1736381675,\n            \"assistant_id\": null,\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"run_id\": null,\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": {\n                        \"value\": \"How does AI work? Explain it in simple terms.\",\n                        \"annotations\": []\n                    }\n                }\n            ],\n            \"attachments\": [],\n            \"metadata\": {}\n        },\n        {\n            \"id\": \"msg_3oQMbfJDKPigvHsIRDGJZv09\",\n            \"object\": \"thread.message\",\n            \"created_at\": 1736381163,\n            \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"run_id\": \"run_fWc1m4nW0I6C1O1AHDWyCjeR\",\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": {\n                        \"value\": \"If you have any other questions, whether about deep learning or a different topic, feel free to ask! I'm here to help.\",\n                        \"annotations\": []\n                    }\n                }\n            ],\n            \"attachments\": [],\n            \"metadata\": {}\n        },\n        {\n            \"id\": \"msg_Wgnt4DyvlgqaRZyzmV6tF0fz\",\n            \"object\": \"thread.message\",\n            \"created_at\": 1736380767,\n            \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"run_id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": {\n                        \"value\": \"Imagine you have a very smart robot friend who wants to learn how to tell the difference between cats and dogs. Deep learning is like giving your robot friend a magic coloring book. Every time your friend colors in this book, they get better at seeing the differences between cats and dogs.\\n\\nIn deep learning, we show the robot lots and lots of pictures of cats and dogs. Each picture is like a page in the coloring book. At first, the robot might make mistakes – maybe it thinks a small dog is a cat. But we help it learn by telling it, \\\"No, this is not a cat, it's a dog.\\\" Every time we tell our robot friend what's right, it remembers and gets a little better at telling them apart.\\n\\nThis magic coloring book has many layers, like a big cake. Each layer helps the robot see different things. One layer might help it see shapes, like ears or tails. Another layer looks at colors. By the time it looks at all the layers, it can say, \\\"This is a cat\\\" or \\\"This is a dog!\\\"\\n\\nSo, deep learning is just a way to help robots learn from many pictures or things, so they can get really good at knowing what they're looking at, just like you learn from playing and being curious!\",\n                        \"annotations\": []\n                    }\n                }\n            ],\n            \"attachments\": [],\n            \"metadata\": {}\n        },\n        {\n            \"id\": \"msg_5ORC7J4TC7mRJFvYxyEzFpY1\",\n            \"object\": \"thread.message\",\n            \"created_at\": 1736380765,\n            \"assistant_id\": null,\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"run_id\": null,\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": {\n                        \"value\": \"Explain deep learning to a 5 year old.\",\n                        \"annotations\": []\n                    }\n                }\n            ],\n            \"attachments\": [],\n            \"metadata\": {}\n        }\n    ],\n    \"first_id\": \"msg_nIMXudehVNpEof7yftPounhP\",\n    \"last_id\": \"msg_5ORC7J4TC7mRJFvYxyEzFpY1\",\n    \"has_more\": false\n}"
										}
									]
								},
								{
									"name": "Get Message in Thread",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages/{{messageId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"messages",
												"{{messageId}}"
											]
										}
									},
									"response": [
										{
											"name": "Get Message in Thread",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages/{{messageId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"messages",
														"{{messageId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:18:28 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_bc1f32831b6cbf4d7125689bcc1021f0"
												},
												{
													"key": "openai-processing-ms",
													"value": "325"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff0400cd9ba2aa4-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"msg_nIMXudehVNpEof7yftPounhP\",\n    \"object\": \"thread.message\",\n    \"created_at\": 1736381675,\n    \"assistant_id\": null,\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"run_id\": null,\n    \"role\": \"user\",\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": {\n                \"value\": \"How does AI work? Explain it in simple terms.\",\n                \"annotations\": []\n            }\n        }\n    ],\n    \"attachments\": [],\n    \"metadata\": {}\n}"
										}
									]
								},
								{
									"name": "Modify Message in Thread",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"metadata\": {\n        \"modified\": \"true\",\n        \"user\": \"abc123\",\n        \"custom_field\": \"some_value\"\n      }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages/{{messageId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"messages",
												"{{messageId}}"
											]
										}
									},
									"response": [
										{
											"name": "Modify Message in Thread",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n      \"metadata\": {\n        \"modified\": \"true\",\n        \"user\": \"abc123\",\n        \"custom_field\": \"some_value\"\n      }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages/{{messageId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"messages",
														"{{messageId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:21:28 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_2f5cb825b1728f5e3a0cebd54d3350e6"
												},
												{
													"key": "openai-processing-ms",
													"value": "453"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff044733bb408cf-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"msg_nIMXudehVNpEof7yftPounhP\",\n    \"object\": \"thread.message\",\n    \"created_at\": 1736381675,\n    \"assistant_id\": null,\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"run_id\": null,\n    \"role\": \"user\",\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": {\n                \"value\": \"How does AI work? Explain it in simple terms.\",\n                \"annotations\": []\n            }\n        }\n    ],\n    \"file_ids\": [],\n    \"metadata\": {\n        \"modified\": \"true\",\n        \"user\": \"abc123\",\n        \"custom_field\": \"some_value\"\n    }\n}"
										}
									]
								},
								{
									"name": "Delete Message in Thread",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/messages/{{messageId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"messages",
												"{{messageId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create [messages](https://platform.openai.com/docs/api-reference/messages) within threads."
						},
						{
							"name": "Runs",
							"item": [
								{
									"name": "Create Thread and Run",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"threadId\", jsonData.thread_id);",
													"",
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"runId\", jsonData.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"assistant_id\": \"{{assistantId}}\",\n      \"thread\": {\n        \"messages\": [\n          {\"role\": \"user\", \"content\": \"Explain deep learning to a 5 year old.\"}\n        ]\n      }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/runs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"runs"
											]
										}
									},
									"response": [
										{
											"name": "Create Thread and Run",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n      \"assistant_id\": \"{{assistantId}}\",\n      \"thread\": {\n        \"messages\": [\n          {\"role\": \"user\", \"content\": \"Explain deep learning to a 5 year old.\"}\n        ]\n      }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/runs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"runs"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 08 Jan 2025 23:49:51 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_086ffad17daf146ead237831f0b70ec4"
												},
												{
													"key": "openai-processing-ms",
													"value": "3447"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff0161079062b73-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"run_NmOGMwUqv3lPscr6O65zkO6b\",\n    \"object\": \"thread.run\",\n    \"created_at\": 1736380188,\n    \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n    \"thread_id\": \"thread_m1xoSnu9iP9qb9U1K8dhSHYX\",\n    \"status\": \"queued\",\n    \"started_at\": null,\n    \"expires_at\": 1736380788,\n    \"cancelled_at\": null,\n    \"failed_at\": null,\n    \"completed_at\": null,\n    \"required_action\": null,\n    \"last_error\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"tools\": [\n        {\n            \"type\": \"code_interpreter\"\n        }\n    ],\n    \"tool_resources\": {},\n    \"metadata\": {},\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"max_completion_tokens\": null,\n    \"max_prompt_tokens\": null,\n    \"truncation_strategy\": {\n        \"type\": \"auto\",\n        \"last_messages\": null\n    },\n    \"incomplete_details\": null,\n    \"usage\": null,\n    \"response_format\": \"auto\",\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": true\n}"
										}
									]
								},
								{
									"name": "Create Run",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assistant_id\": \"{{assistantId}}\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs"
											]
										}
									},
									"response": [
										{
											"name": "Create Run",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assistant_id\": \"{{assistantId}}\"\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"runs"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:06:02 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_6f901f5a540edec6e333627b0b8f7ced"
												},
												{
													"key": "openai-processing-ms",
													"value": "1601"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff02dcc8b662ab7-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"run_fWc1m4nW0I6C1O1AHDWyCjeR\",\n    \"object\": \"thread.run\",\n    \"created_at\": 1736381161,\n    \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"status\": \"queued\",\n    \"started_at\": null,\n    \"expires_at\": 1736381761,\n    \"cancelled_at\": null,\n    \"failed_at\": null,\n    \"completed_at\": null,\n    \"required_action\": null,\n    \"last_error\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"tools\": [\n        {\n            \"type\": \"code_interpreter\"\n        }\n    ],\n    \"tool_resources\": {},\n    \"metadata\": {},\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"max_completion_tokens\": null,\n    \"max_prompt_tokens\": null,\n    \"truncation_strategy\": {\n        \"type\": \"auto\",\n        \"last_messages\": null\n    },\n    \"incomplete_details\": null,\n    \"usage\": null,\n    \"response_format\": \"auto\",\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": true\n}"
										}
									]
								},
								{
									"name": "List Runs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Data array is present and contains at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
													"});",
													"",
													"",
													"pm.test(\"Data object contains required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"    responseData.data.forEach(function(dataItem) {",
													"        pm.expect(dataItem).to.have.property('id');",
													"        pm.expect(dataItem).to.have.property('created_at');",
													"        pm.expect(dataItem).to.have.property('assistant_id');",
													"        pm.expect(dataItem).to.have.property('thread_id');",
													"        pm.expect(dataItem).to.have.property('status');",
													"        pm.expect(dataItem).to.have.property('started_at');",
													"        pm.expect(dataItem).to.have.property('completed_at');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Tools array is present and contains at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.an('array');",
													"    pm.expect(responseData.data[0].tools).to.exist.and.to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs?limit=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												}
											]
										}
									},
									"response": [
										{
											"name": "List Runs",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs?limit=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"runs"
													],
													"query": [
														{
															"key": "limit",
															"value": "3"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:07:54 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_a8f3d27ad4d6d316d3832998d2428275"
												},
												{
													"key": "openai-processing-ms",
													"value": "481"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff030901e1d2ab7-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"run_fWc1m4nW0I6C1O1AHDWyCjeR\",\n            \"object\": \"thread.run\",\n            \"created_at\": 1736381161,\n            \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"status\": \"completed\",\n            \"started_at\": 1736381162,\n            \"expires_at\": null,\n            \"cancelled_at\": null,\n            \"failed_at\": null,\n            \"completed_at\": 1736381164,\n            \"required_action\": null,\n            \"last_error\": null,\n            \"model\": \"gpt-4-turbo\",\n            \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n            \"tools\": [\n                {\n                    \"type\": \"code_interpreter\"\n                }\n            ],\n            \"tool_resources\": {},\n            \"metadata\": {},\n            \"temperature\": 1,\n            \"top_p\": 1,\n            \"max_completion_tokens\": null,\n            \"max_prompt_tokens\": null,\n            \"truncation_strategy\": {\n                \"type\": \"auto\",\n                \"last_messages\": null\n            },\n            \"incomplete_details\": null,\n            \"usage\": {\n                \"prompt_tokens\": 412,\n                \"completion_tokens\": 29,\n                \"total_tokens\": 441,\n                \"prompt_token_details\": {\n                    \"cached_tokens\": 0\n                }\n            },\n            \"response_format\": \"auto\",\n            \"tool_choice\": \"auto\",\n            \"parallel_tool_calls\": true\n        },\n        {\n            \"id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n            \"object\": \"thread.run\",\n            \"created_at\": 1736380765,\n            \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"status\": \"completed\",\n            \"started_at\": 1736380767,\n            \"expires_at\": null,\n            \"cancelled_at\": null,\n            \"failed_at\": null,\n            \"completed_at\": 1736380772,\n            \"required_action\": null,\n            \"last_error\": null,\n            \"model\": \"gpt-4-turbo\",\n            \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n            \"tools\": [\n                {\n                    \"type\": \"code_interpreter\"\n                }\n            ],\n            \"tool_resources\": {},\n            \"metadata\": {},\n            \"temperature\": 1,\n            \"top_p\": 1,\n            \"max_completion_tokens\": null,\n            \"max_prompt_tokens\": null,\n            \"truncation_strategy\": {\n                \"type\": \"auto\",\n                \"last_messages\": null\n            },\n            \"incomplete_details\": null,\n            \"usage\": {\n                \"prompt_tokens\": 148,\n                \"completion_tokens\": 262,\n                \"total_tokens\": 410,\n                \"prompt_token_details\": {\n                    \"cached_tokens\": 0\n                }\n            },\n            \"response_format\": \"auto\",\n            \"tool_choice\": \"auto\",\n            \"parallel_tool_calls\": true\n        }\n    ],\n    \"first_id\": \"run_fWc1m4nW0I6C1O1AHDWyCjeR\",\n    \"last_id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n    \"has_more\": false\n}"
										}
									]
								},
								{
									"name": "Get Run",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs",
												"{{runId}}"
											]
										}
									},
									"response": [
										{
											"name": "Get Run",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"runs",
														"{{runId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:08:32 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_1baf3b82cda5cd74eceed7d02b295a53"
												},
												{
													"key": "openai-processing-ms",
													"value": "3029"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff03170389e2ab7-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n    \"object\": \"thread.run\",\n    \"created_at\": 1736380765,\n    \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"status\": \"completed\",\n    \"started_at\": 1736380767,\n    \"expires_at\": null,\n    \"cancelled_at\": null,\n    \"failed_at\": null,\n    \"completed_at\": 1736380772,\n    \"required_action\": null,\n    \"last_error\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"tools\": [\n        {\n            \"type\": \"code_interpreter\"\n        }\n    ],\n    \"tool_resources\": {},\n    \"metadata\": {},\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"max_completion_tokens\": null,\n    \"max_prompt_tokens\": null,\n    \"truncation_strategy\": {\n        \"type\": \"auto\",\n        \"last_messages\": null\n    },\n    \"incomplete_details\": null,\n    \"usage\": {\n        \"prompt_tokens\": 148,\n        \"completion_tokens\": 262,\n        \"total_tokens\": 410,\n        \"prompt_token_details\": {\n            \"cached_tokens\": 0\n        }\n    },\n    \"response_format\": \"auto\",\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": true\n}"
										}
									]
								},
								{
									"name": "Modify Run",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"metadata\": {\n      \"user_id\": \"user_abc123\",\n      \"custom_field\": \"example_value\"\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs",
												"{{runId}}"
											]
										}
									},
									"response": [
										{
											"name": "Modify Run",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"metadata\": {\n      \"user_id\": \"user_abc123\",\n      \"custom_field\": \"example_value\"\n    }\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"runs",
														"{{runId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:22:34 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_00497b02719d0409cc76014dd73650fc"
												},
												{
													"key": "openai-processing-ms",
													"value": "485"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff04610cb990fe5-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n    \"object\": \"thread.run\",\n    \"created_at\": 1736380765,\n    \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"status\": \"completed\",\n    \"started_at\": 1736380767,\n    \"expires_at\": null,\n    \"cancelled_at\": null,\n    \"failed_at\": null,\n    \"completed_at\": 1736380772,\n    \"required_action\": null,\n    \"last_error\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"tools\": [\n        {\n            \"type\": \"code_interpreter\"\n        }\n    ],\n    \"tool_resources\": {},\n    \"metadata\": {\n        \"user_id\": \"user_abc123\",\n        \"custom_field\": \"example_value\"\n    },\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"max_completion_tokens\": null,\n    \"max_prompt_tokens\": null,\n    \"truncation_strategy\": {\n        \"type\": \"auto\",\n        \"last_messages\": null\n    },\n    \"incomplete_details\": null,\n    \"usage\": {\n        \"prompt_tokens\": 148,\n        \"completion_tokens\": 262,\n        \"total_tokens\": 410,\n        \"prompt_token_details\": {\n            \"cached_tokens\": 0\n        }\n    },\n    \"response_format\": \"auto\",\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": true\n}"
										}
									]
								},
								{
									"name": "Submit Tool Outputs",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tool_outputs\": [\n      {\n        \"tool_call_id\": \"call_001\",\n        \"output\": \"70 degrees and sunny.\"\n      }\n    ]\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}/submit_tool_outputs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs",
												"{{runId}}",
												"submit_tool_outputs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel Run",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs",
												"{{runId}}",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Run Steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// For testing, Grab the id of the first object in the data array and store it in a collection level variable called stepId",
													"var responseData = pm.response.json();",
													"pm.collectionVariables.set(\"stepId\", responseData.data[0].id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs",
												"{{runId}}",
												"steps"
											]
										}
									},
									"response": [
										{
											"name": "List Run Steps",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}/steps",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"runs",
														"{{runId}}",
														"steps"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:23:07 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_f72e30a3282262482cd623cbbaece263"
												},
												{
													"key": "openai-processing-ms",
													"value": "410"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff046dc8db90fe5-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"step_pNuVGelujQ1XTJkCg2bAekNX\",\n            \"object\": \"thread.run.step\",\n            \"created_at\": 1736380767,\n            \"run_id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n            \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n            \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n            \"type\": \"message_creation\",\n            \"status\": \"completed\",\n            \"cancelled_at\": null,\n            \"completed_at\": 1736380772,\n            \"expires_at\": null,\n            \"failed_at\": null,\n            \"last_error\": null,\n            \"step_details\": {\n                \"type\": \"message_creation\",\n                \"message_creation\": {\n                    \"message_id\": \"msg_Wgnt4DyvlgqaRZyzmV6tF0fz\"\n                }\n            },\n            \"usage\": {\n                \"prompt_tokens\": 148,\n                \"completion_tokens\": 262,\n                \"total_tokens\": 410,\n                \"prompt_token_details\": {\n                    \"cached_tokens\": 0\n                }\n            }\n        }\n    ],\n    \"first_id\": \"step_pNuVGelujQ1XTJkCg2bAekNX\",\n    \"last_id\": \"step_pNuVGelujQ1XTJkCg2bAekNX\",\n    \"has_more\": false\n}"
										}
									]
								},
								{
									"name": "Get Run Steps",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}/steps/{{stepId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}",
												"runs",
												"{{runId}}",
												"steps",
												"{{stepId}}"
											]
										}
									},
									"response": [
										{
											"name": "Get Run Steps",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}/runs/{{runId}}/steps/{{stepId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"threads",
														"{{threadId}}",
														"runs",
														"{{runId}}",
														"steps",
														"{{stepId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 09 Jan 2025 00:27:23 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "openai-version",
													"value": "2020-10-01"
												},
												{
													"key": "openai-organization",
													"value": "cbrehmpersonal"
												},
												{
													"key": "x-request-id",
													"value": "req_88b4647f2e869564f5fc2a25ee5c49b0"
												},
												{
													"key": "openai-processing-ms",
													"value": "430"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=31536000; includeSubDomains; preload"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8ff04d1a7a700fcd-LAX"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												},
												{
													"key": "alt-svc",
													"value": "h3=\":443\"; ma=86400"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"step_pNuVGelujQ1XTJkCg2bAekNX\",\n    \"object\": \"thread.run.step\",\n    \"created_at\": 1736380767,\n    \"run_id\": \"run_D0f2GTfBiLnTY31vi9c93jtk\",\n    \"assistant_id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n    \"thread_id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"type\": \"message_creation\",\n    \"status\": \"completed\",\n    \"cancelled_at\": null,\n    \"completed_at\": 1736380772,\n    \"expires_at\": null,\n    \"failed_at\": null,\n    \"last_error\": null,\n    \"step_details\": {\n        \"type\": \"message_creation\",\n        \"message_creation\": {\n            \"message_id\": \"msg_Wgnt4DyvlgqaRZyzmV6tF0fz\"\n        }\n    },\n    \"usage\": {\n        \"prompt_tokens\": 148,\n        \"completion_tokens\": 262,\n        \"total_tokens\": 410,\n        \"prompt_token_details\": {\n            \"cached_tokens\": 0\n        }\n    }\n}"
										}
									]
								}
							],
							"description": "Represents and execution [run](https://platform.openai.com/docs/api-reference/runs) on a thread."
						},
						{
							"name": "Create Thread",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/threads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"threads"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Thread",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"threads",
										"{{threadId}}"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve Thread",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:24:13 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_708fe22e13b02fc9c817888d454685bf"
										},
										{
											"key": "openai-processing-ms",
											"value": "541"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Set-Cookie",
											"value": "__cf_bm=JG_aK9Y9N8qEVnoQx_Tsjq_clc0NB_e7FqqmacuHFLI-1736439853-1.0.1.1-ylpVcX1Od4cEGVY_8aHoRGx3XnNCTG4rkAKSCsW4d.UbKDE3gyx6pIr4.6AHDGvztkjET59_Pozlh3agTmsROw; path=/; expires=Thu, 09-Jan-25 16:54:13 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "Set-Cookie",
											"value": "_cfuvid=CUoro4_VwtxBCrhngIbNrHrDzdBtqSHknydz7siGmEc-1736439853461-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5c6b82f512b81-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"object\": \"thread\",\n    \"created_at\": 1736380765,\n    \"metadata\": {},\n    \"tool_resources\": {\n        \"code_interpreter\": {\n            \"file_ids\": []\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Modify Thread",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"metadata\": {\n        \"modified\": \"true\",\n        \"user\": \"abc123\"\n      }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"threads",
										"{{threadId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Thread",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"threads",
										"{{threadId}}"
									]
								}
							},
							"response": [
								{
									"name": "Delete Thread",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/threads/{{threadId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"threads",
												"{{threadId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:25:09 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_68af3b4b7e241290ff781d4ac3495abb"
										},
										{
											"key": "openai-processing-ms",
											"value": "1104"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5c813c94d2b81-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"thread_t32oV4YykJ0slJGll7kGWLrn\",\n    \"object\": \"thread.deleted\",\n    \"deleted\": true\n}"
								}
							]
						}
					],
					"description": "Create [threads](https://platform.openai.com/docs/api-reference/threads) the assistants can interact with."
				},
				{
					"name": "Vector Store",
					"item": [
						{
							"name": "Vector Store Files",
							"item": [
								{
									"name": "Batches",
									"item": [
										{
											"name": "Vector Store File Batch",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json \\"
													},
													{
														"key": "-H OpenAI-Beta",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/vs_abc123/file_batches",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"vector_stores",
														"vs_abc123",
														"file_batches"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Vector Store File Batch",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/vs_abc123/files_batches/vsfb_abc123",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"vector_stores",
														"vs_abc123",
														"files_batches",
														"vsfb_abc123"
													]
												}
											},
											"response": []
										},
										{
											"name": "Cancel Vector Store File Batch",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/vs_abc123/files_batches/vsfb_abc123/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"vector_stores",
														"vs_abc123",
														"files_batches",
														"vsfb_abc123",
														"cancel"
													]
												}
											},
											"response": []
										},
										{
											"name": "List Vector Stores in a Files Batch",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer $OPENAI_API_KEY"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "OpenAI-Beta",
														"value": "{{assistants-beta}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/vs_abc123/files_batches/vsfb_abc123/files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{baseVersion}}",
														"vector_stores",
														"vs_abc123",
														"files_batches",
														"vsfb_abc123",
														"files"
													]
												}
											},
											"response": []
										}
									],
									"description": "[Vector store file batches](https://platform.openai.com/docs/api-reference/vector-stores-file-batches) represent operations to add multiple files to a vector store. Related guide: [File Search](https://platform.openai.com/docs/assistants/tools/file-search)"
								},
								{
									"name": "Create Vector Store File",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"file_id\": \"file-abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}",
												"files"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Vector Store File",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}",
												"files"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Vector Store File",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}/files/file-abc123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}",
												"files",
												"file-abc123"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Vector Store File",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}/files/file-abc123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}",
												"files",
												"file-abc123"
											]
										}
									},
									"response": []
								}
							],
							"description": "[Vector store files](https://platform.openai.com/docs/api-reference/vector-stores-files) represent files inside a vector store."
						},
						{
							"name": "Create Vector Store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"vectorStoreId\", jsonData.id);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Support FAQ\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"vector_stores"
									]
								}
							},
							"response": [
								{
									"name": "Create Vector Store",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Support FAQ\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:44:32 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_dcd6bcec9d0b98de8914bd4958d27c28"
										},
										{
											"key": "openai-processing-ms",
											"value": "321"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5e4799ca5091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"vs_9tvtDHcIPiSsv7aHQUQfbcVm\",\n    \"object\": \"vector_store\",\n    \"name\": \"Support FAQ\",\n    \"status\": \"completed\",\n    \"usage_bytes\": 0,\n    \"created_at\": 1736441072,\n    \"file_counts\": {\n        \"in_progress\": 0,\n        \"completed\": 0,\n        \"failed\": 0,\n        \"cancelled\": 0,\n        \"total\": 0\n    },\n    \"metadata\": {},\n    \"expires_after\": null,\n    \"expires_at\": null,\n    \"last_active_at\": 1736441072\n}"
								}
							]
						},
						{
							"name": "List Vector Stores",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "ctor_stores",
									"host": [
										"ctor_stores"
									]
								}
							},
							"response": [
								{
									"name": "List Vector Stores",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:45:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_b1451a520466ba8b58631b415822f19a"
										},
										{
											"key": "openai-processing-ms",
											"value": "364"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5e56bebe6091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"vs_9tvtDHcIPiSsv7aHQUQfbcVm\",\n            \"object\": \"vector_store\",\n            \"name\": \"Support FAQ\",\n            \"status\": \"completed\",\n            \"usage_bytes\": 0,\n            \"created_at\": 1736441072,\n            \"file_counts\": {\n                \"in_progress\": 0,\n                \"completed\": 0,\n                \"failed\": 0,\n                \"cancelled\": 0,\n                \"total\": 0\n            },\n            \"metadata\": {},\n            \"expires_after\": null,\n            \"expires_at\": null,\n            \"last_active_at\": 1736441072\n        }\n    ],\n    \"first_id\": \"vs_9tvtDHcIPiSsv7aHQUQfbcVm\",\n    \"last_id\": \"vs_9tvtDHcIPiSsv7aHQUQfbcVm\",\n    \"has_more\": false\n}"
								}
							]
						},
						{
							"name": "Retrieve Vector Store",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"vector_stores",
										"{{vectorStoreId}}"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve Vector Store",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:46:32 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_04bbcdb7d985266dfd5be8459e32e527"
										},
										{
											"key": "openai-processing-ms",
											"value": "374"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5e7683897091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"vs_9tvtDHcIPiSsv7aHQUQfbcVm\",\n    \"object\": \"vector_store\",\n    \"name\": \"Support FAQ\",\n    \"status\": \"completed\",\n    \"usage_bytes\": 0,\n    \"created_at\": 1736441072,\n    \"file_counts\": {\n        \"in_progress\": 0,\n        \"completed\": 0,\n        \"failed\": 0,\n        \"cancelled\": 0,\n        \"total\": 0\n    },\n    \"metadata\": {},\n    \"expires_after\": null,\n    \"expires_at\": null,\n    \"last_active_at\": 1736441072\n}"
								}
							]
						},
						{
							"name": "Modify Vector Store",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Support FAQ\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"vector_stores",
										"{{vectorStoreId}}"
									]
								}
							},
							"response": [
								{
									"name": "Modify Vector Store",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Support FAQ\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:47:47 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_13d508734c9d8caa14d9198464e39d21"
										},
										{
											"key": "openai-processing-ms",
											"value": "372"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5e93f8c93091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"vs_pcy7vm9qSrzWOeTAVVdevN5k\",\n    \"object\": \"vector_store\",\n    \"name\": \"Support FAQ\",\n    \"status\": \"completed\",\n    \"usage_bytes\": 0,\n    \"created_at\": 1736441263,\n    \"file_counts\": {\n        \"in_progress\": 0,\n        \"completed\": 0,\n        \"failed\": 0,\n        \"cancelled\": 0,\n        \"total\": 0\n    },\n    \"metadata\": {},\n    \"expires_after\": null,\n    \"expires_at\": null,\n    \"last_active_at\": 1736441267\n}"
								}
							]
						},
						{
							"name": "Delete Vector Store",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"vector_stores",
										"{{vectorStoreId}}"
									]
								}
							},
							"response": [
								{
									"name": "Delete Vector Store",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer $OPENAI_API_KEY"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "OpenAI-Beta",
												"value": "{{assistants-beta}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{baseVersion}}/vector_stores/{{vectorStoreId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{baseVersion}}",
												"vector_stores",
												"{{vectorStoreId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 09 Jan 2025 16:47:28 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "openai-version",
											"value": "2020-10-01"
										},
										{
											"key": "openai-organization",
											"value": "cbrehmpersonal"
										},
										{
											"key": "x-request-id",
											"value": "req_a80dc5db961cbb31ae968fb620c6611d"
										},
										{
											"key": "openai-processing-ms",
											"value": "1250"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains; preload"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8ff5e8c4deeb091d-LAX"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"vs_9tvtDHcIPiSsv7aHQUQfbcVm\",\n    \"object\": \"vector_store.deleted\",\n    \"deleted\": true\n}"
								}
							]
						}
					],
					"description": "[Vector stores](https://platform.openai.com/docs/api-reference/vector-stores) are used to store files for use by the `file_search` tool."
				},
				{
					"name": "Create Assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Stores the assistantId in a collection level variable",
									"var assistantId = pm.response.json().id;",
									"pm.collectionVariables.set(\"assistantId\", assistantId);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer $OPENAI_API_KEY"
							},
							{
								"key": "OpenAI-Beta",
								"value": "{{assistants-beta}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"name\": \"Math Tutor\",\n    \"tools\": [{\"type\": \"code_interpreter\"}],\n    \"model\": \"gpt-4-turbo\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{baseVersion}}/assistants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{baseVersion}}",
								"assistants"
							]
						},
						"description": "### POST /{{baseVersion}}/assistants\n\nThis endpoint is used to create a new assistant for the OpenAI platform.\n\n#### Request Body\n\n- `instructions` (text): The set of instructions or prompts for the assistant.\n    \n- `name` (text): The name of the assistant.\n    \n- `tools` (array): An array of tools or capabilities for the assistant, where each tool object contains a `type` attribute.\n    \n- `model` (text): The model to be used for the assistant.\n    \n\n#### Response\n\nThe response for this request follows the JSON schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"object\": { \"type\": \"string\" },\n    \"created_at\": { \"type\": \"number\" },\n    \"name\": { \"type\": \"string\" },\n    \"description\": { \"type\": \"string\" },\n    \"model\": { \"type\": \"string\" },\n    \"instructions\": { \"type\": \"string\" },\n    \"tools\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": { \"type\": \"string\" }\n        }\n      }\n    },\n    \"top_p\": { \"type\": \"number\" },\n    \"temperature\": { \"type\": \"number\" },\n    \"tool_resources\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code_interpreter\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"file_ids\": {\n              \"type\": \"array\",\n              \"items\": { \"type\": \"string\" }\n            }\n          }\n        }\n      }\n    },\n    \"metadata\": { \"type\": \"object\" },\n    \"response_format\": { \"type\": \"string\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create Assistant",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"name\": \"Math Tutor\",\n    \"tools\": [{\"type\": \"code_interpreter\"}],\n    \"model\": \"gpt-4-turbo\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/assistants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"assistants"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 08 Jan 2025 23:27:43 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "openai-version",
									"value": "2020-10-01"
								},
								{
									"key": "openai-organization",
									"value": "cbrehmpersonal"
								},
								{
									"key": "x-request-id",
									"value": "req_ce6f29cdf8964db42940becc91a439c2"
								},
								{
									"key": "openai-processing-ms",
									"value": "326"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Set-Cookie",
									"value": "__cf_bm=OUhV.sAWvy2E1WETSXyEvYBBGjPHC1OCprSqxuUCtIQ-1736378863-1.0.1.1-GyzGmAvynL4.XhEo7X.RhZq.rKGvzrvpytEGsDzEJ_Rk.5WCAVZ2_gAvv0x46Ico6Mvh3FSGnpl5jOQRQn48lQ; path=/; expires=Wed, 08-Jan-25 23:57:43 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8feff5b8adeb150c-LAX"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"asst_svh0nGY1itxIz8H4VUTYUZCB\",\n    \"object\": \"assistant\",\n    \"created_at\": 1736378863,\n    \"name\": \"Math Tutor\",\n    \"description\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"tools\": [\n        {\n            \"type\": \"code_interpreter\"\n        }\n    ],\n    \"top_p\": 1,\n    \"temperature\": 1,\n    \"tool_resources\": {\n        \"code_interpreter\": {\n            \"file_ids\": []\n        }\n    },\n    \"metadata\": {},\n    \"response_format\": \"auto\"\n}"
						}
					]
				},
				{
					"name": "List Assistants",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer $OPENAI_API_KEY"
							},
							{
								"key": "OpenAI-Beta",
								"value": "{{assistants-beta}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{baseVersion}}/assistants?order=desc&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{baseVersion}}",
								"assistants"
							],
							"query": [
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "List Assistants",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/assistants?order=desc&limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"assistants"
									],
									"query": [
										{
											"key": "order",
											"value": "desc"
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 08 Jan 2025 23:28:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "openai-version",
									"value": "2020-10-01"
								},
								{
									"key": "openai-organization",
									"value": "cbrehmpersonal"
								},
								{
									"key": "x-request-id",
									"value": "req_06d1cd4a3870e86d0ec0af55553fd3ee"
								},
								{
									"key": "openai-processing-ms",
									"value": "596"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8feff699aefd150c-LAX"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"asst_svh0nGY1itxIz8H4VUTYUZCB\",\n            \"object\": \"assistant\",\n            \"created_at\": 1736378863,\n            \"name\": \"Math Tutor\",\n            \"description\": null,\n            \"model\": \"gpt-4-turbo\",\n            \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n            \"tools\": [\n                {\n                    \"type\": \"code_interpreter\"\n                }\n            ],\n            \"top_p\": 1,\n            \"temperature\": 1,\n            \"tool_resources\": {\n                \"code_interpreter\": {\n                    \"file_ids\": []\n                }\n            },\n            \"metadata\": {},\n            \"response_format\": \"auto\"\n        }\n    ],\n    \"first_id\": \"asst_svh0nGY1itxIz8H4VUTYUZCB\",\n    \"last_id\": \"asst_svh0nGY1itxIz8H4VUTYUZCB\",\n    \"has_more\": false\n}"
						}
					]
				},
				{
					"name": "Retrieve Assistants",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer $OPENAI_API_KEY"
							},
							{
								"key": "OpenAI-Beta",
								"value": "{{assistants-beta}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{baseVersion}}/assistants/{{assistantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{baseVersion}}",
								"assistants",
								"{{assistantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Retrieve Assistants",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/assistants/{{assistantId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"assistants",
										"{{assistantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 08 Jan 2025 23:36:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "openai-version",
									"value": "2020-10-01"
								},
								{
									"key": "openai-organization",
									"value": "cbrehmpersonal"
								},
								{
									"key": "x-request-id",
									"value": "req_5a19ad1053adad950c0eaa7c3573c3eb"
								},
								{
									"key": "openai-processing-ms",
									"value": "336"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8ff0027c38f12f32-LAX"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"asst_svh0nGY1itxIz8H4VUTYUZCB\",\n    \"object\": \"assistant\",\n    \"created_at\": 1736378863,\n    \"name\": \"Math Tutor\",\n    \"description\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"tools\": [\n        {\n            \"type\": \"code_interpreter\"\n        }\n    ],\n    \"top_p\": 1,\n    \"temperature\": 1,\n    \"tool_resources\": {\n        \"code_interpreter\": {\n            \"file_ids\": []\n        }\n    },\n    \"metadata\": {},\n    \"response_format\": \"auto\"\n}"
						}
					]
				},
				{
					"name": "Modify Assistants",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer $OPENAI_API_KEY"
							},
							{
								"key": "OpenAI-Beta",
								"value": "{{assistants-beta}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies. Always respond with info from either of the files.\",\n      \"tools\": [{\"type\": \"file_search\"}],\n      \"model\": \"gpt-4-turbo\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{baseVersion}}/assistants/{{assistantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{baseVersion}}",
								"assistants",
								"{{assistantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Modify Assistants",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies. Always respond with info from either of the files.\",\n      \"tools\": [{\"type\": \"file_search\"}],\n      \"model\": \"gpt-4-turbo\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/assistants/{{assistantId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"assistants",
										"{{assistantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 08 Jan 2025 23:37:43 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "openai-version",
									"value": "2020-10-01"
								},
								{
									"key": "openai-organization",
									"value": "cbrehmpersonal"
								},
								{
									"key": "x-request-id",
									"value": "req_3456edcbbca3d4673404fb3e979cf9b6"
								},
								{
									"key": "openai-processing-ms",
									"value": "1002"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8ff004578ab40912-LAX"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"asst_svh0nGY1itxIz8H4VUTYUZCB\",\n    \"object\": \"assistant\",\n    \"created_at\": 1736378863,\n    \"name\": \"Math Tutor\",\n    \"description\": null,\n    \"model\": \"gpt-4-turbo\",\n    \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies. Always respond with info from either of the files.\",\n    \"tools\": [\n        {\n            \"type\": \"file_search\",\n            \"file_search\": {\n                \"ranking_options\": {\n                    \"ranker\": \"default_2024_08_21\",\n                    \"score_threshold\": 0\n                }\n            }\n        }\n    ],\n    \"top_p\": 1,\n    \"temperature\": 1,\n    \"tool_resources\": {\n        \"file_search\": {\n            \"vector_store_ids\": []\n        }\n    },\n    \"metadata\": {},\n    \"response_format\": \"auto\"\n}"
						}
					]
				},
				{
					"name": "Delete Assistants",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer $OPENAI_API_KEY"
							},
							{
								"key": "OpenAI-Beta",
								"value": "{{assistants-beta}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{baseVersion}}/assistants/{{assistantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{baseVersion}}",
								"assistants",
								"{{assistantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Assistants",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer $OPENAI_API_KEY"
									},
									{
										"key": "OpenAI-Beta",
										"value": "{{assistants-beta}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{baseVersion}}/assistants/{{assistantId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{baseVersion}}",
										"assistants",
										"{{assistantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 09 Jan 2025 19:45:08 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "openai-version",
									"value": "2020-10-01"
								},
								{
									"key": "openai-organization",
									"value": "cbrehmpersonal"
								},
								{
									"key": "x-request-id",
									"value": "req_b536f18fd891a9674b0828e356f304e2"
								},
								{
									"key": "openai-processing-ms",
									"value": "402"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Set-Cookie",
									"value": "__cf_bm=4.vUIKDqyRIvYlqxAJ8o1LAT4VCaicFZzplXfJboUVE-1736451908-1.0.1.1-GruUlfxhdT9GYzMIp44uq_YLE5GceYjlRszbu3hUZv_G5M4HwhGbVmcKNylWhLb77BI3tVRSECqGtahu0zTjtQ; path=/; expires=Thu, 09-Jan-25 20:15:08 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8ff6ed070d98091d-LAX"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"asst_TwexI41FNliz3novZ8J3yL4s\",\n    \"object\": \"assistant.deleted\",\n    \"deleted\": true\n}"
						}
					]
				}
			],
			"description": "# Assistants API\n\nThe new [Assistants API](https://platform.openai.com/docs/assistants/overview) is a stateful evolution of [Chat Completions API](https://platform.openai.com/docs/guides/text-generation/chat-completions-api) meant to simplify the creation of assistant-like experiences, and enable developer access to powerful tools like Code Interpreter and Retrieval.\n\n## Chat Completions API vs Assistants API\n\nThe primitives of the **Chat Completions API** are `Messages`, on which you perform a `Completion` with a `Model` (`gpt-3.5-turbo`, `gpt-4`, etc). It is lightweight and powerful, but inherently stateless, which means you have to manage conversation state, tool definitions, retrieval documents, and code execution manually.\n\nThe primitives of the **Assistants API** are\n\n- `Assistants`, which encapsulate a base model, instructions, tools, and (context) documents\n    \n- `Threads` which represent the state of a conversation, and\n    \n- `Runs` which power the execution of an `Assistant` on a `Thread`, including textual responses and multi-step tool use.\n    \n\n### **When to Use Each API**\n\n- Use the **Completions API** for simpler, stateless tasks like generating standalone text, transforming inputs, or creating summaries.\n    \n- Use the **Assistants API** for building interactive systems or conversational AI with contextual understanding and multi-turn dialogue capabilities."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{vault:openai-secret-key}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "messages",
			"value": "[{\"role\":\"system\",\"content\":\"You are a helpful assistant.\"},{\"role\":\"user\",\"content\":\"Who won the world series in 2020?\"},{\"role\":\"assistant\",\"content\":\"The Los Angeles Dodgers won the World Series in 2020.\"},{\"role\":\"user\",\"content\":\"Where was it played?\"}]"
		},
		{
			"key": "model",
			"value": "gpt-4o"
		},
		{
			"key": "storedEmbeddings",
			"value": ""
		},
		{
			"key": "inputString",
			"value": ""
		},
		{
			"key": "userInputEmbeddings",
			"value": ""
		},
		{
			"key": "embeddingModel",
			"value": "text-embedding-3-large"
		},
		{
			"key": "fileId",
			"value": ""
		},
		{
			"key": "tuningJobId",
			"value": ""
		},
		{
			"key": "fineTunedModel",
			"value": ""
		},
		{
			"key": "assistantId",
			"value": ""
		},
		{
			"key": "threadId",
			"value": ""
		},
		{
			"key": "runId",
			"value": ""
		},
		{
			"key": "messageId",
			"value": ""
		},
		{
			"key": "stepId",
			"value": ""
		},
		{
			"key": "vectorStoreId",
			"value": ""
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "assistants-beta",
			"value": "assistants=v2"
		},
		{
			"key": "baseUrl",
			"value": "https://api.openai.com"
		},
		{
			"key": "baseVersion",
			"value": "v1"
		}
	]
}